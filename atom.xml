<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W | 个人博客 | web前端</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>

  <updated>2018-11-27T09:46:46.402Z</updated>
=======
  <updated>2018-12-11T14:03:41.513Z</updated>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangxiaobai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node-阿里云ECS部署</title>
    <link href="http://yoursite.com/2018/11/27/Node-%E9%98%BF%E9%87%8C%E4%BA%91ECS%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/11/27/Node-阿里云ECS部署/</id>
    <published>2018-11-27T04:19:00.000Z</published>

    <updated>2018-11-27T09:46:46.402Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>双11抢购了一台阿里云服务器，趁工作不忙，搞了一个简单的node项目。那么问题来了，如何将node项目部署到阿里云ECS？</p></blockquote><a id="more"></a><p>此教程仅供新手借鉴，多少有些缺陷，有问题还望各位大佬指正。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>一个域名</li><li>阿里云ECS(实例镜像：CentOS7.4)</li><li>如果使用Windows，推荐xshell。如果是Mac，推荐iTerm2</li></ul><p>(注：因本人使用Mac，以下均已Mac为主)</p><hr><h3 id="终端连接服务器"><a href="#终端连接服务器" class="headerlink" title="终端连接服务器"></a>终端连接服务器</h3><ul><li>打开iTerm2，输入连接命令ssh username@ip公网地址，回车，输入你在购买服务器时设置的密码。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/fb945240-f68e-11e7-b8d1-49d5de1a2fe1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>密码输入正确，进入服务器。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/8a21b2f0-f68f-11e7-b8d1-49d5de1a2fe1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>cd / 进入根目录，创建一个空目录 mkdir soft，用来放我们的安装包。</p><hr><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>下载node包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz</div></pre></td></tr></table></figure><p>下载完成后，进行压缩包解压。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf v8.9.4.tar.gz</div></pre></td></tr></table></figure><p>进入解压好的目录并执行config配置命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd node-v8.9.4 &amp;&amp; ./configure</div></pre></td></tr></table></figure><p>执行编译及安装命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><p>经过漫长的等待之后，一个node环境就安装好了。可以通过node -v 或者 npm -v来检查当前node/npm是否安装成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/aa87c390-f6e4-11e7-b0db-b9b8a7444865" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果你需要升级node和npm版本，执行以下命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i -g n</div><div class="line">n stable</div></pre></td></tr></table></figure><hr><h3 id="安装nrm和pm2"><a href="#安装nrm和pm2" class="headerlink" title="安装nrm和pm2"></a>安装nrm和pm2</h3><p>nrm是一个管理npm源的插件，方便切换国内外以及私人npm库。</p><p>pm2是node服务器的守护进程，方便管理当前服务器上的所有服务。</p><p>这里说一下cnpm，如果安装依赖包很慢或者根本没进度，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>然后使用cnpm代替npm安装。</p><p>回到我们熟悉的soft目录。</p><hr><h4 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h4><p>安装nrm。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nrm</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>nrm add name address 添加新的源</li><li>nrm use name 切换到源</li><li>nrm ls 查看所有可用的源</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/ef923690-f6e5-11e7-b28d-519a9998aa5b" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h4><p>安装pm2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>pm2 list 查看pm2守护服务</li><li>pm2 start index.js 启动一个pm2守护进程命令</li><li>pm2 restart id/name 重启一个pm2守护进程命令</li><li>pm2 delete id/name 删除一个正在使用的进程</li><li>pm2 delete all 删除所有正在使用的进程</li><li>pm2 monit 查看pm2的消耗</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/24e04d00-f6e6-11e7-b0db-b9b8a7444865" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>卸载已有的mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -qa|grep -i mysql</div><div class="line">yum remove &apos;mysql&apos;</div></pre></td></tr></table></figure><p>下载mysql源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 5.7.24</div><div class="line">wget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</div></pre></td></tr></table></figure><p>安装下载的源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh mysql57-community-release-el7-7.noarch.rpm</div></pre></td></tr></table></figure><p>下载安装mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server</div><div class="line">yum install mysql-devel</div><div class="line">yum install mysql</div></pre></td></tr></table></figure><p>启动mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld start</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>service mysqld status 查看mysql当前的状态</li><li>service mysqld stop 停止mysql</li><li>service mysqld restart 重启mysql</li><li>service mysqld start 启动mysql</li></ul><p>如果遇到错误：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket /var/lib/mysql/mysql.sock’，请在tmp下创建一个软连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /tmp/mysql.sock /var/lib/mysql</div></pre></td></tr></table></figure><p>打开my.cnf并修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/4d980cc0-f6ea-11e7-9a49-93c72a04fa82" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>重启数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure><p>登录(默认root是没有密码的)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root</div></pre></td></tr></table></figure><p>这时出现ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)，登录root帐号需要密码，现在我们没有设置密码，哪来的密码。</p><p>于是我们开始忘记密码的操作</p><p>第一步，在/etc/my.cnf文件中添加skip-grant-tables<br>第二步，重启mysql，service mysqld restart<br>第三步，登录mysql，mysql -u root<br>第四步，修改密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt;use mysql;</div><div class="line">mysql&gt;update mysql.user set authentication_string=password(&apos;your password&apos;) where user=&apos;root&apos;;</div><div class="line">mysql&gt;flush privileges;</div><div class="line">mysql&gt;exit;</div></pre></td></tr></table></figure><p>第五步，恢复/etc/my.cnf，将skip-grant-tables删除或者注释掉<br>第六步，重启mysql，service mysqld restart</p><p>分配用户</p><p>host指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</div><div class="line">CREATE USER &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;</div></pre></td></tr></table></figure><p>给创建的用户权限</p><ul><li>privileges 用户的操作权限,如SELECT，INSERT，UPDATE等.如果要授予所的权限则使用ALL</li><li>databasename 数据库名</li><li>tablename 表名,如果要授予该用户对所有数据库和表的相应操作权限则可用表示, 如.*.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;</div></pre></td></tr></table></figure><hr><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p>Redis是一个非常好用的数据仓库，既可以做nosql数据库，也可以做缓存数据库。</p><p>下载安装包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-4.0.6.tar.gz</div></pre></td></tr></table></figure><p>解压并进入解压之后的文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf redis-4.0.6.tar.gz &amp;&amp;cd redis-4.0.6</div></pre></td></tr></table></figure><p>编译并安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><p>启动redis服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server redis.conf</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/9ab114d0-f82e-11e7-b753-f548c55dc4dd" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此时我们发现，不能再输入任何命令，因为redis-server已经占用了这个命令行客户端。我们需要再打开一个命令行工具并连接服务器。</p><p>使用redis客户端连接Redis服务，执行Redis文件夹下的redis-cli文件redis-cli，输入几个命令测试一下简单的set/get：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/c4d479e0-f82f-11e7-bec2-d1185e7bb6e2" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>关掉客户端，redis服务也会停止。这时，我们就需要修改redis.conf文件，将daemonizede的值改为yes。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/afb6f050-f830-11e7-b753-f548c55dc4dd" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再次运行Redis的启动命令redis-server redis.conf，这次就不会占用命令行了，可以继续操作其他的，Redis服务也不会停止。</p><hr><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>nginx在转发请求，负载均衡等方面非常有用。它可以将几个不同的服务集中在一个80端口下，根据域名或者请求路径来区分。</p><p>在安装nginx之前，先要安装几个依赖插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y pcre pcre-devel</div><div class="line">yum install -y zlib zlib-devel</div></pre></td></tr></table></figure><p>安装openssl。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y openssl openssl-devel</div></pre></td></tr></table></figure><p>下载nginx包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nginx.org/download/nginx-1.15.6.tar.gz</div></pre></td></tr></table></figure><p>解压并进入解压好的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.15.6.tar.gz &amp;&amp; cd nginx-1.15.6</div></pre></td></tr></table></figure><p>执行配置命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure><p>编译并安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><p>查看安装结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whereis nginx</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/d892e470-f835-11e7-b753-f548c55dc4dd" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>跳转到安装好的nginx目录下，进入sbin目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nginx/sbin</div></pre></td></tr></table></figure><p>启动nginx。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>./nginx 启动nginx</li><li>./nginx -s stop 停止nginx</li><li>./nginx -s quit 退出nginx</li><li>./nginx -s reload 重启nginx</li></ul><hr><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>centOS上没有安装git，有需要的话，我们可以自己手动安装一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install git</div><div class="line">git --version</div></pre></td></tr></table></figure><hr><h3 id="使用pm2启动项目"><a href="#使用pm2启动项目" class="headerlink" title="使用pm2启动项目"></a>使用pm2启动项目</h3><p>在本地搭建并测试好node项目，上传到GitHub。然后git clone一下。</p><p>配置ECS安全组规则，暴露3000接口。</p><p>如果项目中使用数据库，运行之前要先建立好数据库，然后再运行项目，登录数据库执行create database dabasename;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/***</div><div class="line">cd ***</div><div class="line">cnpm i</div><div class="line">pm2 start index.js</div></pre></td></tr></table></figure><p>注：项目监听3000端口，如果顺利的话，项目已经运行起来了。<br>   可以使用pm2 list查看进程列表，使用pm2 log打印日志。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;双11抢购了一台阿里云服务器，趁工作不忙，搞了一个简单的node项目。那么问题来了，如何将node项目部署到阿里云ECS？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>JS-深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2018/10/11/JS-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/10/11/JS-深拷贝与浅拷贝/</id>
    <published>2018-10-11T10:11:52.000Z</published>
    <updated>2018-11-27T13:49:56.107Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>当我们在JS中复制一个数据，在复制如string，number等基本数据类型时，看似没有出现问题。但是当复制如array，object类型时。出现了意想不到的结果。</p></blockquote><a id="more"></a><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = &#123;x: 10, y: 10&#125;</div><div class="line">var b = a</div><div class="line">b.x = 100</div><div class="line">b.y = 100</div></pre></td></tr></table></figure><p>打印一下a和b的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(a) // &#123;x: 100, y: 200&#125;</div><div class="line">console.log(b) // &#123;x: 100, y: 200&#125;</div></pre></td></tr></table></figure><p>发现改变b的值，同时也改了a的值。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = 10</div><div class="line">var b = a</div><div class="line">b = 20</div></pre></td></tr></table></figure><p>打印一下a和b的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(a) // 10</div><div class="line">console.log(b) // 20</div></pre></td></tr></table></figure><p>??? b的值改变并没有引起a的值改变。</p><hr><h3 id="值类型-vs-引用类型"><a href="#值类型-vs-引用类型" class="headerlink" title="值类型 vs 引用类型"></a>值类型 vs 引用类型</h3><p>在JS中，变量传递方式分为值类型和引用类型。值类型包括String，Number，Null，Boolean，Undefined。引用类型包括Object类的所有，如Date，Array，Function。</p><p>在参数传递方式上，值类型是按值传递。引用类型是按共享传递(指向同一个内存地址，两者引用同一个值，当一者改变值，另一者也改变)。</p><p>JS这样设计的原因在于：按值传递的类型，复制一份存入栈内存，这类类型一般不会占用太多内存，而且按值传递保证了其访问速度。按共享传递的类型，是复制其引用，而不是整个复制其值，保证过大的对象等不会因为不停复制内容而造成内存的浪费。</p><p>深拷贝和浅拷贝最根本的区别在于是否真正获取了一个对象的拷贝实体，而不只是引用。</p><hr><h3 id="浅拷贝的实现方式"><a href="#浅拷贝的实现方式" class="headerlink" title="浅拷贝的实现方式"></a>浅拷贝的实现方式</h3><h4 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;username: &apos;kobe&apos;, age: 39, sex: &#123;option1: &apos;男&apos;, option2: &apos;女&apos;&#125;&#125;</div><div class="line">let obj1 = obj</div><div class="line">obj1.sex.option1 = &apos;不男不女&apos; // 修改复制的对象会影响原对象</div></pre></td></tr></table></figure><p>打印obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(obj1) // &#123;username: &apos;kobe&apos;, age: 39, sex: &#123;option1: &apos;不男不女&apos;, option2: &apos;女&apos;&#125;&#125;</div></pre></td></tr></table></figure><hr><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;</div><div class="line">  username: &apos;kobe&apos;</div><div class="line">&#125;;</div><div class="line">let obj1 = Object.assign(obj)</div><div class="line">obj1.username = &apos;wang&apos;</div></pre></td></tr></table></figure><p>打印obj的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(obj) // &#123; username: &quot;wang&quot; &#125;</div></pre></td></tr></table></figure><hr><h4 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat"></a>Array.prototype.concat</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 3, &#123;</div><div class="line">    username: &apos;kobe&apos;</div><div class="line">&#125;]</div><div class="line">let arr2=arr.concat()</div><div class="line">arr2[2].username = &apos;wang&apos;</div></pre></td></tr></table></figure><p>打印arr的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(arr) // [1, 3, &#123; username: &quot;wade&quot; &#125;]</div></pre></td></tr></table></figure><hr><h4 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice"></a>Array.prototype.slice</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 3, &#123;</div><div class="line">    username: &apos;kobe&apos;</div><div class="line">&#125;]</div><div class="line">let arr2=arr.slice()</div><div class="line">arr2[2].username = &apos;wang&apos;</div></pre></td></tr></table></figure><p>打印arr的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(arr) // [1, 3, &#123; username: &quot;wade&quot; &#125;]</div></pre></td></tr></table></figure><hr><h4 id="Array-prototype-concat-vs-Array-prototype-slice"><a href="#Array-prototype-concat-vs-Array-prototype-slice" class="headerlink" title="Array.prototype.concat vs Array.prototype.slice"></a>Array.prototype.concat vs Array.prototype.slice</h4><p>关于Array的concat和slice补充说明：Array的concat和slice方法不改变原始数组，只是返回了一个浅复制原数组中的元素的一个新数组。</p><p>原数组中的元素会按照下述规则拷贝：</p><ul><li><p>如果该元素是个引用类型，slice或者concat会拷贝这个引用到新的数组里，两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新数组和原数组中的这个元素都会发生改变。</p></li><li><p>如果该元素是个值类型，slice或者concat会复制一份这些值到新数组里。在别的数组里修改这些值，并不会影响另一个数组。</p></li></ul><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 3, &#123;</div><div class="line">    username: &apos;kobe&apos;</div><div class="line">&#125;];</div><div class="line">let arr3 = arr.slice();</div><div class="line">arr3[1] = 2</div><div class="line">console.log(arr, arr3)</div></pre></td></tr></table></figure><p>打印arr和arr3的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(arr, arr3)</div><div class="line">// ---result</div><div class="line">// [1, 3, &#123; username: &quot;kobe&quot; &#125;]</div><div class="line">// [1, 2, &#123; username: &quot;kobe&quot; &#125;]</div></pre></td></tr></table></figure><hr><h3 id="深拷贝的实现方式"><a href="#深拷贝的实现方式" class="headerlink" title="深拷贝的实现方式"></a>深拷贝的实现方式</h3><h4 id="Object-assign-1"><a href="#Object-assign-1" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>Object.assign可以进行一层深度拷贝</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = Object.assign(&#123;&#125;, obj1)</div><div class="line">obj1.age = 24</div><div class="line">console.log(obj, obj1)</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ----result</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123;  &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123;  &#125;, age: 24 &#125;</div></pre></td></tr></table></figure><p>然而。。。。。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = Object.assign(&#123;&#125;, obj1)</div><div class="line">obj1.test4.age = 24</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ----result</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123; age: 24 &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123; age: 24 &#125; &#125;</div></pre></td></tr></table></figure><hr><h4 id="JSON-parse-JSON-stringfy-obj"><a href="#JSON-parse-JSON-stringfy-obj" class="headerlink" title="JSON.parse(JSON.stringfy(obj))"></a>JSON.parse(JSON.stringfy(obj))</h4><p>说到深拷贝，你肯定会想到JSON.parse(JSON.stringfy(obj))。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test: &#123;</div><div class="line">            name: &apos;test&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = JSON.parse(JSON.stringify(obj))</div><div class="line">obj1.test.name = 24</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ----result</div><div class="line">// &#123; name: &quot;wang&quot;, test: &#123; name: &quot;test&quot; &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test: &#123; name: 24 &#125; &#125;</div></pre></td></tr></table></figure><p>然而。。。。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = JSON.parse(JSON.stringify(obj))</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ---result</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123;  &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test4: &#123;  &#125; &#125;</div></pre></td></tr></table></figure><p>???test2和test3不见了。。。。。</p><p>JSON.stringify()方法是将一个JavaScript值(对象或者数组)转换为一个JSON字符串，不能接受函数。</p><hr><h4 id="手写递归方法"><a href="#手写递归方法" class="headerlink" title="手写递归方法"></a>手写递归方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function deepClone(obj) &#123;</div><div class="line">let result</div><div class="line">    let toString = Object.prototype.toString</div><div class="line">    if (toString.call(obj) === &apos;[Object Array]&apos;) &#123;</div><div class="line">    result = []</div><div class="line">      for (var i =0; i&lt;obj.length; i++) &#123;</div><div class="line">        result[i] = deepClone(obj[i])</div><div class="line">        &#125;</div><div class="line">    &#125; else if (toString.call(obj) === &apos;[Object Object]&apos;) &#123;</div><div class="line">    result = &#123;&#125;</div><div class="line">      for (var key in obj) &#123;</div><div class="line">        if (obj.hasOwnProperty(key)) &#123;</div><div class="line">            result[key] = deepClone(obj[key])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">    return obj</div><div class="line">    &#125;</div><div class="line">  return result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>🌰：调用函数并打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = deepClone(obj)</div><div class="line">console.log(obj, obj21)</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: Object &#123;  &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: Object &#123;  &#125; &#125;</div></pre></td></tr></table></figure><hr><h4 id="jQuery实现"><a href="#jQuery实现" class="headerlink" title="jQuery实现"></a>jQuery实现</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj2 = $.extend(true, &#123;&#125;, obj1)</div></pre></td></tr></table></figure><hr><h4 id="lodash实现"><a href="#lodash实现" class="headerlink" title="lodash实现"></a>lodash实现</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;</div><div class="line">        name: &apos;wclimb&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj2 = _.cloneDeep(obj1)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当我们在JS中复制一个数据，在复制如string，number等基本数据类型时，看似没有出现问题。但是当复制如array，object类型时。出现了意想不到的结果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack-webpack-dev-server</title>
    <link href="http://yoursite.com/2018/09/26/Webpack-webpack-dev-server/"/>
    <id>http://yoursite.com/2018/09/26/Webpack-webpack-dev-server/</id>
    <published>2018-09-26T07:15:00.000Z</published>
    <updated>2018-11-27T04:18:11.509Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。</p></blockquote><a id="more"></a><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>webpack-dev-server为webpack提供的一个静态服务的工具，并能够实时重新加载。</p><hr><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i webpack-dev-server -D</div></pre></td></tr></table></figure><p>package.json添加scripts配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // ...</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;webpack-dev-server --mode development&quot; // 指定mode为development</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure><p>如果项目构建了HTML文件，直接访问<a href="http://localhost:8080/就可以看到index.html页面了。否则，就会看到一个静态资源列表列表的页面。" target="_blank" rel="external">http://localhost:8080/就可以看到index.html页面了。否则，就会看到一个静态资源列表列表的页面。</a></p><hr><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>在webpack配置中，可以通过devServer字段来配置webpack-dev-server。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  devServer: &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>host：指定使用一个host，默认是localhost。</li><li>port：指定端口号，默认是8080。</li><li>publicPath: 构建好的静态文件在浏览器中以什么路径去访问，默认为’/‘。假设服务器运行在<a href="http://localhost:8080，并且output.filename被设置为bundle.js。完整的访问路径是" target="_blank" rel="external">http://localhost:8080，并且output.filename被设置为bundle.js。完整的访问路径是</a> <a href="http://localhost:8080/bundle.js，如果你配置了" target="_blank" rel="external">http://localhost:8080/bundle.js，如果你配置了</a> publicPath: ‘assets/‘，那么上述 bundle.js 的完整访问路径就是 <a href="http://localhost:8080/assets/bundle.js。" target="_blank" rel="external">http://localhost:8080/assets/bundle.js。</a></li></ul><p>建议devServer.publicPath和output.publicPath一样。</p><ul><li>proxy：配置代理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">proxy: &#123;</div><div class="line">  &apos;/api&apos;: &#123;</div><div class="line">    target: &apos;http://localhost:3000&apos; // 将url中带有/api的请求代理到本地3000端口的服务器上</div><div class="line">    pathRewrite: &#123;&apos;^/api&apos;: &apos;&apos;&#125; // 把URL中path部分的api去掉</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>color：启用/jiny9ong控制台的彩色输出。</li><li>contentBase：提供未经webpack构建的额外静态文件内容的目录。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 使用当前目录下的 public</div><div class="line">contentBase: path.join(__dirname, &quot;public&quot;)</div><div class="line"></div><div class="line">// 也可以使用数组提供多个路径</div><div class="line">contentBase: [path.join(__dirname, &quot;public&quot;), path.join(__dirname, &quot;assets&quot;)]</div></pre></td></tr></table></figure><p>publicePath的优先级高于constBase。</p><ul><li><p>before：在服务内部的所有其他中间件之前， 提供执行自定义中间件的功能。</p></li><li><p>after：在服务内部的所有其他中间件之后， 提供执行自定义中间件的功能。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack-基础使用</title>
    <link href="http://yoursite.com/2018/09/25/Webpack-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/25/Webpack-基础使用/</id>
    <published>2018-09-25T07:15:00.000Z</published>
    <updated>2018-11-27T04:18:15.013Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。</p></blockquote><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm或者yarn来安装webpack</p><hr><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm i webpack webpack-cli -g</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">$ yarn -g add webpack webpack-cli</div></pre></td></tr></table></figure><p>等待安装完毕，就可以全局执行webpack命令了。注：webpack-cli在4.x版本之后不再作为webpack的依赖了，我们使用时需要单独安装。</p><hr><h4 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h4><p>在项目中，我们更推荐将webpack作为项目的开发依赖来安装使用，这样可以指定项目中使用的webpack版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm i webpack webpack-cli -D</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">$ yarn add webpack webpack-cli -D</div></pre></td></tr></table></figure><p>等待安装完毕，webpack会出现在项目的package.json文件中，我们添加一个npm scripts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;build&quot;: &quot;webpack --mode production&quot;</div><div class="line">&#125;,</div><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">  &quot;webpack&quot;: &quot;^4.1.1&quot;,</div><div class="line">  &quot;webpack-cli&quot;: &quot;^2.0.12&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>项目根目录新建./src/index.js，任意写JS代码，保存，执行npm run build或者yarn build命令，我们会发现项目根目录下新增了一个dist目录，里面存放了webpack构建好的main.js文件。</p><p>webpack4.x可以零配置就开始构建，但有时我们的项目需要更多的功能。</p><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>先放一张经典图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-gold-cdn.xitu.io/2018/3/19/1623bfac4a1e0945?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p>如上图左上角的.js，这个.js就是多个代码模块的入口，也是webpack构建的入口。webpack会读取这个文件，并从它开始解析依赖，然后进行打包。</p><p>在我们的项目中，如果是单页应用，那么可能入口只有一个。如果是多页应用，那么经常是一个页面对应一个构建入口。</p><p>用法：entry</p><hr><h5 id="单个入口语法"><a href="#单个入口语法" class="headerlink" title="单个入口语法"></a>单个入口语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 简写</div><div class="line">module.exports = &#123;</div><div class="line">  entry: &apos;./src/index&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    main: &apos;./src/index&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h5 id="多个入口语法"><a href="#多个入口语法" class="headerlink" title="多个入口语法"></a>多个入口语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    foo: &apos;./src/foo&apos;,</div><div class="line">    bar: &apos;./src/bar&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出即指webpack最终构建出来的静态文件，构建结果的文件名，路径等都是可以配置的。</p><p>用法：output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;bundle.js&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 多个入口生成不同的文件</div><div class="line">module.exports = &#123;</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;[name].js&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 路径中使用hash，每次构建都有一个不同的hash值，避免发布新版本使用浏览器缓存</div><div class="line">module.exports = &#123;</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist/[hash]&apos;),</div><div class="line">    filename: &apos;[name].js&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>loader，我们可以理解为一个转换器，负责把某种文件格式的内容转换成webpack可以支持打包的模块。</p><p>默认情况下，webpack会默认把所有依赖打包成JS文件，如果入口文件依赖一个.pug模块文件或者.scss样式文件，那么我们就需要相应的loader来把不同格式的文件转换为JavaScript，以便打包后在浏览器运行。</p><p>用法：module.rules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.jsx?/, // 条件</div><div class="line">        include: [</div><div class="line">          path.resolve(__dirname, &apos;src&apos;)</div><div class="line">        ], // 条件</div><div class="line">        use: &apos;babel-loader&apos; // 规则应用结果</div><div class="line">      &#125; // 一个Object即一条规则</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>loader匹配规则中最重要的两个因素：匹配条件和匹配规则后的应用。</p><hr><h5 id="规则条件配置"><a href="#规则条件配置" class="headerlink" title="规则条件配置"></a>规则条件配置</h5><p>匹配条件通常使用请求资源文件的绝对路径来进行匹配，官方文档成为resource。</p><p>上述代码中的test和include都用于匹配resource路径，是resource.test和resource.include的简写。你也可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  rules: [</div><div class="line">      &#123;</div><div class="line">        resource: &#123; // resource 的匹配条件</div><div class="line">          test: /\.jsx?/,</div><div class="line">          include: [</div><div class="line">            path.resolve(__dirname, &apos;src&apos;),</div><div class="line">          ]</div><div class="line">        &#125;,</div><div class="line">        use: &apos;babel-loader&apos;</div><div class="line">      &#125;,</div><div class="line">      // ...</div><div class="line">    ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>webpack为loader提供了多种匹配条件的配置方式：</p><ul><li>test: … 匹配特定条件</li><li>include: … 匹配特定路径</li><li>exclude: … 排除特定路径</li><li>and: [] 必须匹配数组中的所有条件</li><li>or: [] 匹配数组中的任意一个条件</li><li>not: [] 排除匹配数组中的所有条件</li></ul><p>条件值类型：</p><ul><li>字符串：必须以提供的字符串开始（绝对路径）</li><li>正则表达式</li><li>数组：至少包含一个条件的数组</li><li>对象：匹配所有属性值的条件</li><li>函数：返回true表示匹配</li></ul><hr><h5 id="规则应用配置"><a href="#规则应用配置" class="headerlink" title="规则应用配置"></a>规则应用配置</h5><p>匹配规则后的应用，我们可以使用use字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">rules: [</div><div class="line">  &#123;</div><div class="line">    test: /\.less/,</div><div class="line">    use: [</div><div class="line">      &apos;style-loader&apos;,</div><div class="line">      &#123;</div><div class="line">        loader: &apos;css-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          // ...</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        loader: &apos;less-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          // ...</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><p>使用options可以给对应的loader传递一些配置项。</p><p>对于上述的less规则应用配置，一个less模块文件可以经过多个loader的转换处理，执行顺序为从右到左。</p><p>如果多个rule匹配了同一个模块文件，loader的应用顺序应该如何处理？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rules: [</div><div class="line">  &#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;eslint-loader&quot;,</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;babel-loader&quot;,</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><p>eslint-loader用于检查人工编写的代码，babel-loader用于转换代码。所以，eslint-loader应该在babel-loader之前执行，那么该如何保证执行顺序？</p><p>webpack为每一个匹配规则提供了enforce字段来配置当前rule得的loader类型。pre(前置) &gt; 行内 &gt; 普通 &gt; 后置(post)。 我们要确保eslint-loader在babel-loader之前执行，只需给rule规则项添加enforce字段，并设置其值为pre。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">rules: [</div><div class="line">  &#123;</div><div class="line">    enforce: &apos;pre&apos;,</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;eslint-loader&quot;,</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;babel-loader&quot;,</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><hr><h5 id="常用rule配置项"><a href="#常用rule配置项" class="headerlink" title="常用rule配置项"></a>常用rule配置项</h5><h6 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.css$/,</div><div class="line">        // 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</div><div class="line">        use: ExtractTextPlugin.extract(&#123;</div><div class="line">          fallback: &apos;style-loader&apos;,</div><div class="line">          use: &apos;css-loader&apos;,</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    // 引入插件，配置文件名，这里同样可以使用 [hash]</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;),</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>css-loader：负责解析CSS代码，主要处理CSS中的依赖，🌰：@import、url()等。</li><li>style-loader：将css-loader解析的结果转变为JS代码，运行时动态插入style标签来让CSS生效。</li></ul><hr><h6 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.less/,</div><div class="line">        // 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</div><div class="line">        use: ExtractTextPlugin.extract(&#123;</div><div class="line">          fallback: &apos;style-loader&apos;,</div><div class="line">          use: [&apos;css-loader&apos;, &apos;less-loader&apos;],</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    // 引入插件，配置文件名，这里同样可以使用 [hash]</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h6><p>webpack无法处理图片格式，我们选择file-loader，它不仅可以处理图片格式，还可用于处理其它很多类型的文件。直接输出文件，将构建后的文件路径返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.(png|jpg|gif)$/,</div><div class="line">        use: &apos;file-loader&apos;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h6><p>Babel是一个让我们能够使用ES6、ES7等新标准来编写JS的编译工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.jsx?/,</div><div class="line">        loader: &apos;babel-loader&apos;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>插件是webpack的支柱功能，在于解决loader无法实现的其他事情。</p><p>用法：plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const UglifyPlugin = require(&apos;uglifyjs-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  plugins: [new UglifyPlugin()]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h5 id="常见webpack-plugin使用"><a href="#常见webpack-plugin使用" class="headerlink" title="常见webpack plugin使用"></a>常见webpack plugin使用</h5><h6 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h6><p>webpack默认从作为入口的JS文件进行构建，但通常一个前端项目都是从一个页面(HTML)出发的。通常我们会创建一个HTML文件，使用script标签直接引入构建好的js文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>然而，问题来了，如果我们的文件名或者路径变化，每次构建完成后，我们要手动去修改HTML文件中的js路径?</p><p>如果能将HTML引用路径和我们的webpack构建结果关联起来就好了。</p><p>html-webpack-plugin就可以帮我们解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm i html-webpack-plugin -D</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">yarn add html-webpack-plugin -D</div></pre></td></tr></table></figure><p>然后在webpack配置中，将html-webpack-plugin添加到plugins列表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new HtmlWebpackPlugin(),</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置好之后，构建时html-webpack-plugin会为我们创建一个HTML文件，其中会引用构建出来的JS文件。</p><p>我们还可以在html-webpack-plugin中传递我们自己写好的HTML模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new HtmlWebpackPlugin(&#123;</div><div class="line">      filename: &quot;index.html&quot;,</div><div class="line">      template: &quot;assets/index.html&quot;</div><div class="line">    &#125;),</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h6><p>DefinePlugin是webpack的内置插件，可以通过webpack.DefinePlugin直接引用。</p><p>主要用于创建一些在编译时可以配置的全局变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new webpack.DefinePlugin(&#123;</div><div class="line">      VERSION: JSON.stringfy(&apos;v1.1.0&apos;), // const VERSION = &apos;v1.1.0&apos;</div><div class="line">      TWO: &apos;1 + 1&apos;, // const TWO = 2</div><div class="line">      BROWSER_SUPPORT: true, // const BROWSER_SUPPORT = &apos;true&apos;</div><div class="line">      CONSTANTS: &#123;</div><div class="line">        APP_VERSION: JSON.stringfy(&apos;1.1.1&apos;)</div><div class="line">      &#125; // const CONSTANTS = &#123; APP_VERSION: &apos;1.1.1&apos;&#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置好之后，我们就可以在应用代码中，访问配置好的变量了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(VERSION)</div></pre></td></tr></table></figure><p>有关配置的值，简述一下配置规则：</p><ul><li><p>如果配置的值为字符串，那么整个字符串会被当做代码片段来执行，其结果将作为最终配置的值。</p></li><li><p>如果配置的值不是字符串，也不是对象字面量，那么该值会被转换为一个字符串。</p></li><li><p>如果配置的值是一个对象字面量，那么该对象的所有key会以同样的方式去定义。</p></li></ul><hr><h6 id="CopyWebpackPlugin"><a href="#CopyWebpackPlugin" class="headerlink" title="CopyWebpackPlugin"></a>CopyWebpackPlugin</h6><p>通常我们会把源码和资源文件放在项目的src目录下，构建完成后会有一个dist目录，我们会直接拿dist目录中的所有文件来发布。有些文件没有经过webpack处理，但是我们希望它们也能出现在dist目录下，这时，我们就可以使用CopyWebpackPlugin来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new CopyWebpackPlugin([</div><div class="line">       &#123; from: &apos;src/*.txt&apos;, to: &apos;dist/*.txt&apos; &#125; // from: 配置来源；to: 配置目标</div><div class="line">    ])</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a>ExtractTextWebpackPlugin</h6><p>通常CSS经过相应的loader处理后，会转换为JS，和index.js一起打包。如果需要单独把CSS文件分离出来，就需要使用extract-text-webpack-plugin插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const ExtractTextWebpackPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.css$/,</div><div class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</div><div class="line">          fallback: &apos;style-loader&apos;,</div><div class="line">          use: &apos;css-loader&apos;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    //  style.css 作为单独分离出来的文件名</div><div class="line">    new ExtractTextWebpackPlugin(&apos;style.css&apos;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>它还可以为每一个入口创建单独分离的文件，所以，最好这样配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  new ExtractTextPlugin(&apos;[name].css&apos;),</div><div class="line">]</div></pre></td></tr></table></figure><hr><h6 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a>ProvidePlugin</h6><p>ProvidePlugin是webpack的内置插件，可以通过webpack.ProvidePlugin直接引用。</p><p>主要用于自动加载模块，不必到处import或require</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">new webpack.ProvidePlugin(&#123;</div><div class="line">  identifier: &apos;module&apos;,</div><div class="line">  // ...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">new webpack.ProvidePlugin(&#123;</div><div class="line">  identifier: [&apos;module&apos;, &apos;property&apos;], // 即引用 module 下的 property，类似 import &#123; property &#125; from &apos;module&apos;</div><div class="line">  // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>任何时候，当identifier被当作未赋值的变量时，module就会自动被加载，并且identifier会被这个module输出的内容所赋值。</p><p>注：如果是ES的default export，那么你需要指定模块的default属性：identifier: [‘module’, ‘default’]。</p><hr><h6 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h6><p>IgnorePlugin是webpack的内置插件，可以通过webpack.IgnorePlugin直接引用。</p><p>主要用于忽略某些特定的模块，让webpack不把这些指定的模块打包进去。</p><p>配置参数：匹配引入模块路径的正则表达式，匹配模块的上下文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Linux-常用命令</title>
    <link href="http://yoursite.com/2017/10/03/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/10/03/Linux-常用命令/</id>
    <published>2017-10-03T08:41:00.000Z</published>
    <updated>2018-11-27T05:13:10.447Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>这篇文章主要是为了使用Linux系统服务器做开发，总结的一些常用命令。</p></blockquote><a id="more"></a><h3 id="Linux常用操作指令列表"><a href="#Linux常用操作指令列表" class="headerlink" title="Linux常用操作指令列表"></a>Linux常用操作指令列表</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ssh username@ip</td><td>连接服务器</td></tr><tr><td>cd path</td><td>跳转到路径对应的目录下</td></tr><tr><td>rm filename</td><td>删除文件</td></tr><tr><td>rm -rf path</td><td>删除目录及目录下的所有文件</td></tr><tr><td>ls [-a]</td><td>查看当前目录下的文件和目录(-a：查看所有文件，包括隐藏文件)</td></tr><tr><td>ll</td><td>查看当前目录下的文件详情(文件权限)</td></tr><tr><td>pwd</td><td>查看当前路径的完整路径</td></tr><tr><td>which name</td><td>默认位置查找该名字</td></tr><tr><td>mkdir dirname</td><td>创建空目录</td></tr><tr><td>cat path</td><td>查看文件内容</td></tr><tr><td>cp origin target</td><td>复制一个文件到另一个地方</td></tr><tr><td>mv origin target</td><td>移动一个文件到另一个地方</td></tr><tr><td>ps -aux</td><td>显示当前进程</td></tr><tr><td>kill -9 processid</td><td>结束进程</td></tr><tr><td>tar -zxvf filename</td><td>解压文件</td></tr><tr><td>tar -zcvf filename</td><td>压缩文件</td></tr><tr><td>vi path</td><td>进入文件编辑模式</td></tr><tr><td>vi编辑文件，按下i进入编辑模式</td></tr><tr><td>vi退出文件，esc+:wq或esc+:x保存退出</td></tr><tr><td>vi退出文件，esc+:q或esc+:q!强制退出</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这篇文章主要是为了使用Linux系统服务器做开发，总结的一些常用命令。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>小程序-全栈开发(mpvue+koa2+mysql)</title>
    <link href="http://yoursite.com/2017/09/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91(mpvue+koa2+mysql)/"/>
    <id>http://yoursite.com/2017/09/02/小程序-全栈开发(mpvue+koa2+mysql)/</id>
    <published>2017-09-02T08:06:52.000Z</published>
    <updated>2018-11-27T04:18:06.205Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>接触小程序并做了一些项目之后，又开始了Vue的旅程，受其核心思想的影响，对数据/状态管理、组件化、跨平台等都有较高的追求，mpvue 是一个使用 Vue.js开发小程序的前端框架，由此开始了mpvue踩坑之旅，想在提高代码可读性的同时，也增加一点Vue.js的开发体验。</p></blockquote><a id="more"></a><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><hr><p>前端： 微信小程序、mpvue、 eslint、sass、ES6、ES7<br>后端：koa2、Koa-Router、Knex、腾讯云Wafer2<br>数据库：Mysql<br>数据库可视化工具：Navicate Premium</p><hr><h2 id="小程序介绍"><a href="#小程序介绍" class="headerlink" title="小程序介绍"></a>小程序介绍</h2><p>一个功能简单的小程序，包含了个人中心、图书列表、个人评论列表三个tab页，后端的数据定义、分类、和存取等，各有其色。</p><hr><h3 id="成果分享"><a href="#成果分享" class="headerlink" title="成果分享"></a>成果分享</h3><p>个人中心：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/user1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>个人中心：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/user2.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图书列表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/home1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图书详情：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/home1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>评论列表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/list-01.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/naotu.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>*全局安装vue-cli</p><p>$npm install –global vue-cli</p><p>*创建基于mpvue-quickstart模板的新项目，一路回车。</p><p>$vue init mpvue/mpvue-quickstart koa-wx</p><p>*安装依赖</p><p>$cd koa-wx</p><p>$npm install</p><p>$npm run dev</p><hr><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">├── build           // 构建相关  </div><div class="line">├── config           // 配置相关</div><div class="line">├── dist            // 编译后静态文件 </div><div class="line">├── node_modules        // 依赖相关</div><div class="line">├── server            // 服务端源代码</div><div class="line">│  ├── controllers     </div><div class="line">│  ├── middlewares    </div><div class="line">│  ├── node_modules    </div><div class="line">│  ├── routes    </div><div class="line">│  ├── tools     </div><div class="line">│  ├── .eslintrc.js </div><div class="line">│  ├── .eslintrc.json  </div><div class="line">│  ├── app.js     </div><div class="line">│  ├── config.js   </div><div class="line">│  ├── nodemon.json   </div><div class="line">│  ├── package.json    </div><div class="line">│  ├── process.prod.json   </div><div class="line">│  ├── qcloud.js   </div><div class="line">│  ├── README.md    </div><div class="line">│  ├── tools.md  </div><div class="line">├── src            // 前端源代码</div><div class="line">│  ├── components     </div><div class="line">│  ├── config    </div><div class="line">│  ├── mock     </div><div class="line">│  ├── pages     </div><div class="line">│  ├── styles     </div><div class="line">│  ├── utils       </div><div class="line">│  ├── App.vue        </div><div class="line">│  ├── main.js       </div><div class="line">│  ├── store.js      </div><div class="line">│  ├── weui.css    </div><div class="line">├── static          </div><div class="line">├── .babelrc         </div><div class="line">├── .editorconfig      </div><div class="line">├── .eslintignore    </div><div class="line">├── .eslintrc.js       </div><div class="line">├── .postcssrc.js      </div><div class="line">├── index.html        </div><div class="line">└── package.json      </div><div class="line">└── package-lock.json </div><div class="line">└── project.config.json </div><div class="line">└── README.md</div></pre></td></tr></table></figure><hr><h3 id="搭建后端本地开发环境"><a href="#搭建后端本地开发环境" class="headerlink" title="搭建后端本地开发环境"></a>搭建后端本地开发环境</h3><p>打开 server/config.js添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const CONF = &#123;</div><div class="line">      // 其他配置 ...</div><div class="line">    serverHost: &apos;localhost&apos;,</div><div class="line">    tunnelServerUrl: &apos;&apos;,</div><div class="line">    tunnelSignatureKey: &apos;27fb7d1c161b7ca52d73cce0f1d833f9f5b5ec89&apos;,</div><div class="line">      // 腾讯云相关配置可以查看云 API 秘钥控制台：https://console.cloud.tencent.com/capi</div><div class="line">    qcloudAppId: &apos;您的腾讯云 AppID&apos;,</div><div class="line">    qcloudSecretId: &apos;您的腾讯云 SecretId&apos;,</div><div class="line">    qcloudSecretKey: &apos;您的腾讯云 SecretKey&apos;,</div><div class="line">    wxMessageToken: &apos;weixinmsgtoken&apos;,</div><div class="line">    networkTimeout: 30000</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>并修改 MySQL 相关的配置为本地的 MySQL 数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql: &#123;</div><div class="line">    host: &apos;localhost&apos;,</div><div class="line">    port: 3306,</div><div class="line">    user: &apos;root&apos;,</div><div class="line">    db: &apos;cAuth&apos;,</div><div class="line">    pass: &apos;******&apos;,</div><div class="line">    char: &apos;utf8mb4&apos;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p>*切换到服务端代码目录<br>$cd server</p><p>*安装依赖<br>$npm install</p><p>*安装全局依赖<br>$npm install -g nodemon</p><p>$npm run dev</p><p>初始化数据库 - 打开 terminal 输入如下命令：</p><p>$node tools/initdb.js</p><p>进入Mysql选中刚才创建的数据库，输入 show tables; 可以看到初始化时创建了一个名叫 cSessionInfo 的表。说明本地环境已经搭建成功。</p><hr><h3 id="部署到腾讯云环境"><a href="#部署到腾讯云环境" class="headerlink" title="部署到腾讯云环境"></a>部署到腾讯云环境</h3><p>当本地本地开发出一版时，可以部署到腾讯云的开发环境，这样就可以在线上访问该项目。</p><p>首先修改项目根目录的 project.config.json 文件，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;qcloudRoot&quot;: &quot;./server/&quot;,</div></pre></td></tr></table></figure><p>然后将本地开发时添加到 server/config.js 的配置删除，在 mysql.pass 那里填上自己的 APPID。</p><p>接着进入小程序开发工具，点击右上角的 腾讯云，上传测试代码，弹出如图选项。第一次部署如下选择，之后再次上传选择 智能上传 即可。部署成功会有提示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://static.imkk.xin/blog/photo/uploadToTecentCloud.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>###上传前端代码</p><p>在小程序开发工具右上角找到 上传 选项，填写版本信息，上传后进入开发者控制台，开发管理页面，将该小程序设置为体验版本。</p><p>然后在用户身份 ==&gt; 成员管理中，添加项目成员，配置权限，这样好友也可以体验该小程序了。</p><p>项目地址：<a href="https://github.com/wangqian2017/mpvue-koa2" target="_blank" rel="external">https://github.com/wangqian2017/mpvue-koa2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;接触小程序并做了一些项目之后，又开始了Vue的旅程，受其核心思想的影响，对数据/状态管理、组件化、跨平台等都有较高的追求，mpvue 是一个使用 Vue.js开发小程序的前端框架，由此开始了mpvue踩坑之旅，想在提高代码可读性的同时，也增加一点Vue.js的开发体验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vue-移动端自动转换px为rem(postcss-pxtorem)</title>
    <link href="http://yoursite.com/2017/08/25/Vue-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2px%E4%B8%BArem(postcss-pxtorem)/"/>
    <id>http://yoursite.com/2017/08/25/Vue-移动端自动转换px为rem(postcss-pxtorem)/</id>
    <published>2017-08-25T09:41:00.000Z</published>
    <updated>2018-11-27T04:17:59.503Z</updated>
=======
    <updated>2018-12-11T14:03:41.513Z</updated>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>双11抢购了一台阿里云服务器，趁工作不忙，搞了一个简单的node项目。那么问题来了，如何将node项目部署到阿里云ECS？</p></blockquote><a id="more"></a><p>此教程仅供新手借鉴，多少有些缺陷，有问题还望各位大佬指正。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>一个域名</li><li>阿里云ECS(实例镜像：CentOS7.4)</li><li>如果使用Windows，推荐xshell。如果是Mac，推荐iTerm2</li></ul><p>(注：因本人使用Mac，以下均已Mac为主)</p><hr><h3 id="终端连接服务器"><a href="#终端连接服务器" class="headerlink" title="终端连接服务器"></a>终端连接服务器</h3><ul><li>打开iTerm2，输入连接命令ssh username@ip公网地址，回车，输入你在购买服务器时设置的密码。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/fb945240-f68e-11e7-b8d1-49d5de1a2fe1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>密码输入正确，进入服务器。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/8a21b2f0-f68f-11e7-b8d1-49d5de1a2fe1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>cd / 进入根目录，创建一个空目录 mkdir soft，用来放我们的安装包。</p><hr><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>下载node包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz</div></pre></td></tr></table></figure><p>下载完成后，进行压缩包解压。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf v8.9.4.tar.gz</div></pre></td></tr></table></figure><p>进入解压好的目录并执行config配置命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd node-v8.9.4 &amp;&amp; ./configure</div></pre></td></tr></table></figure><p>执行编译及安装命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><p>经过漫长的等待之后，一个node环境就安装好了。可以通过node -v 或者 npm -v来检查当前node/npm是否安装成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/aa87c390-f6e4-11e7-b0db-b9b8a7444865" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果你需要升级node和npm版本，执行以下命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i -g n</div><div class="line">n stable</div></pre></td></tr></table></figure><hr><h3 id="安装nrm和pm2"><a href="#安装nrm和pm2" class="headerlink" title="安装nrm和pm2"></a>安装nrm和pm2</h3><p>nrm是一个管理npm源的插件，方便切换国内外以及私人npm库。</p><p>pm2是node服务器的守护进程，方便管理当前服务器上的所有服务。</p><p>这里说一下cnpm，如果安装依赖包很慢或者根本没进度，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>然后使用cnpm代替npm安装。</p><p>回到我们熟悉的soft目录。</p><hr><h4 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h4><p>安装nrm。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nrm</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>nrm add name address 添加新的源</li><li>nrm use name 切换到源</li><li>nrm ls 查看所有可用的源</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/ef923690-f6e5-11e7-b28d-519a9998aa5b" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h4><p>安装pm2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>pm2 list 查看pm2守护服务</li><li>pm2 start index.js 启动一个pm2守护进程命令</li><li>pm2 restart id/name 重启一个pm2守护进程命令</li><li>pm2 delete id/name 删除一个正在使用的进程</li><li>pm2 delete all 删除所有正在使用的进程</li><li>pm2 monit 查看pm2的消耗</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/24e04d00-f6e6-11e7-b0db-b9b8a7444865" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>卸载已有的mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -qa|grep -i mysql</div><div class="line">yum remove &apos;mysql&apos;</div></pre></td></tr></table></figure><p>下载mysql源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 5.7.24</div><div class="line">wget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</div></pre></td></tr></table></figure><p>安装下载的源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh mysql57-community-release-el7-7.noarch.rpm</div></pre></td></tr></table></figure><p>下载安装mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server</div><div class="line">yum install mysql-devel</div><div class="line">yum install mysql</div></pre></td></tr></table></figure><p>启动mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld start</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>service mysqld status 查看mysql当前的状态</li><li>service mysqld stop 停止mysql</li><li>service mysqld restart 重启mysql</li><li>service mysqld start 启动mysql</li></ul><p>如果遇到错误：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket /var/lib/mysql/mysql.sock’，请在tmp下创建一个软连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /tmp/mysql.sock /var/lib/mysql</div></pre></td></tr></table></figure><p>打开my.cnf并修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/4d980cc0-f6ea-11e7-9a49-93c72a04fa82" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>重启数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure><p>登录(默认root是没有密码的)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root</div></pre></td></tr></table></figure><p>这时出现ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)，登录root帐号需要密码，现在我们没有设置密码，哪来的密码。</p><p>于是我们开始忘记密码的操作</p><p>第一步，在/etc/my.cnf文件中添加skip-grant-tables<br>第二步，重启mysql，service mysqld restart<br>第三步，登录mysql，mysql -u root<br>第四步，修改密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt;use mysql;</div><div class="line">mysql&gt;update mysql.user set authentication_string=password(&apos;your password&apos;) where user=&apos;root&apos;;</div><div class="line">mysql&gt;flush privileges;</div><div class="line">mysql&gt;exit;</div></pre></td></tr></table></figure><p>第五步，恢复/etc/my.cnf，将skip-grant-tables删除或者注释掉<br>第六步，重启mysql，service mysqld restart</p><p>分配用户</p><p>host指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</div><div class="line">CREATE USER &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;;</div></pre></td></tr></table></figure><p>给创建的用户权限</p><ul><li>privileges 用户的操作权限,如SELECT，INSERT，UPDATE等.如果要授予所的权限则使用ALL</li><li>databasename 数据库名</li><li>tablename 表名,如果要授予该用户对所有数据库和表的相应操作权限则可用表示, 如.*.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;</div></pre></td></tr></table></figure><hr><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p>Redis是一个非常好用的数据仓库，既可以做nosql数据库，也可以做缓存数据库。</p><p>下载安装包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-4.0.6.tar.gz</div></pre></td></tr></table></figure><p>解压并进入解压之后的文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf redis-4.0.6.tar.gz &amp;&amp;cd redis-4.0.6</div></pre></td></tr></table></figure><p>编译并安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><p>启动redis服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server redis.conf</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/9ab114d0-f82e-11e7-b753-f548c55dc4dd" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此时我们发现，不能再输入任何命令，因为redis-server已经占用了这个命令行客户端。我们需要再打开一个命令行工具并连接服务器。</p><p>使用redis客户端连接Redis服务，执行Redis文件夹下的redis-cli文件redis-cli，输入几个命令测试一下简单的set/get：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/c4d479e0-f82f-11e7-bec2-d1185e7bb6e2" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>关掉客户端，redis服务也会停止。这时，我们就需要修改redis.conf文件，将daemonizede的值改为yes。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/afb6f050-f830-11e7-b753-f548c55dc4dd" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再次运行Redis的启动命令redis-server redis.conf，这次就不会占用命令行了，可以继续操作其他的，Redis服务也不会停止。</p><hr><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>nginx在转发请求，负载均衡等方面非常有用。它可以将几个不同的服务集中在一个80端口下，根据域名或者请求路径来区分。</p><p>在安装nginx之前，先要安装几个依赖插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y pcre pcre-devel</div><div class="line">yum install -y zlib zlib-devel</div></pre></td></tr></table></figure><p>安装openssl。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y openssl openssl-devel</div></pre></td></tr></table></figure><p>下载nginx包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nginx.org/download/nginx-1.15.6.tar.gz</div></pre></td></tr></table></figure><p>解压并进入解压好的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.15.6.tar.gz &amp;&amp; cd nginx-1.15.6</div></pre></td></tr></table></figure><p>执行配置命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure><p>编译并安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><p>查看安装结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whereis nginx</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images.gitbook.cn/d892e470-f835-11e7-b753-f548c55dc4dd" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>跳转到安装好的nginx目录下，进入sbin目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nginx/sbin</div></pre></td></tr></table></figure><p>启动nginx。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure><p>常用命令：</p><ul><li>./nginx 启动nginx</li><li>./nginx -s stop 停止nginx</li><li>./nginx -s quit 退出nginx</li><li>./nginx -s reload 重启nginx</li></ul><hr><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>centOS上没有安装git，有需要的话，我们可以自己手动安装一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install git</div><div class="line">git --version</div></pre></td></tr></table></figure><hr><h3 id="使用pm2启动项目"><a href="#使用pm2启动项目" class="headerlink" title="使用pm2启动项目"></a>使用pm2启动项目</h3><p>在本地搭建并测试好node项目，上传到GitHub。然后git clone一下。</p><p>配置ECS安全组规则，暴露3000接口。</p><p>如果项目中使用数据库，运行之前要先建立好数据库，然后再运行项目，登录数据库执行create database dabasename;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/***</div><div class="line">cd ***</div><div class="line">cnpm i</div><div class="line">pm2 start index.js</div></pre></td></tr></table></figure><p>注：项目监听3000端口，如果顺利的话，项目已经运行起来了。<br>   可以使用pm2 list查看进程列表，使用pm2 log打印日志。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;双11抢购了一台阿里云服务器，趁工作不忙，搞了一个简单的node项目。那么问题来了，如何将node项目部署到阿里云ECS？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>JS-深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2018/10/11/JS-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/10/11/JS-深拷贝与浅拷贝/</id>
    <published>2018-10-11T10:11:52.000Z</published>
    <updated>2018-12-11T14:03:41.509Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>当我们在JS中复制一个数据，在复制如string，number等基本数据类型时，看似没有出现问题。但是当复制如array，object类型时。出现了意想不到的结果。</p></blockquote><a id="more"></a><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = &#123;x: 10, y: 10&#125;</div><div class="line">var b = a</div><div class="line">b.x = 100</div><div class="line">b.y = 100</div></pre></td></tr></table></figure><p>打印一下a和b的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(a) // &#123;x: 100, y: 200&#125;</div><div class="line">console.log(b) // &#123;x: 100, y: 200&#125;</div></pre></td></tr></table></figure><p>发现改变b的值，同时也改了a的值。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = 10</div><div class="line">var b = a</div><div class="line">b = 20</div></pre></td></tr></table></figure><p>打印一下a和b的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(a) // 10</div><div class="line">console.log(b) // 20</div></pre></td></tr></table></figure><p>??? b的值改变并没有引起a的值改变。</p><hr><h3 id="值类型-vs-引用类型"><a href="#值类型-vs-引用类型" class="headerlink" title="值类型 vs 引用类型"></a>值类型 vs 引用类型</h3><p>在JS中，变量传递方式分为值类型和引用类型。值类型包括String，Number，Null，Boolean，Undefined。引用类型包括Object类的所有，如Date，Array，Function。</p><p>在参数传递方式上，值类型是按值传递。引用类型是按共享传递(指向同一个内存地址，两者引用同一个值，当一者改变值，另一者也改变)。</p><p>JS这样设计的原因在于：按值传递的类型，复制一份存入栈内存，这类类型一般不会占用太多内存，而且按值传递保证了其访问速度。按共享传递的类型，是复制其引用，而不是整个复制其值，保证过大的对象等不会因为不停复制内容而造成内存的浪费。</p><p>深拷贝和浅拷贝最根本的区别在于是否真正获取了一个对象的拷贝实体，而不只是引用。</p><hr><h3 id="浅拷贝的实现方式"><a href="#浅拷贝的实现方式" class="headerlink" title="浅拷贝的实现方式"></a>浅拷贝的实现方式</h3><h4 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;username: &apos;kobe&apos;, age: 39, sex: &#123;option1: &apos;男&apos;, option2: &apos;女&apos;&#125;&#125;</div><div class="line">let obj1 = obj</div><div class="line">obj1.sex.option1 = &apos;不男不女&apos; // 修改复制的对象会影响原对象</div></pre></td></tr></table></figure><p>打印obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(obj1) // &#123;username: &apos;kobe&apos;, age: 39, sex: &#123;option1: &apos;不男不女&apos;, option2: &apos;女&apos;&#125;&#125;</div></pre></td></tr></table></figure><hr><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;</div><div class="line">  username: &apos;kobe&apos;</div><div class="line">&#125;;</div><div class="line">let obj1 = Object.assign(obj)</div><div class="line">obj1.username = &apos;wang&apos;</div></pre></td></tr></table></figure><p>打印obj的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(obj) // &#123; username: &quot;wang&quot; &#125;</div></pre></td></tr></table></figure><hr><h4 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat"></a>Array.prototype.concat</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 3, &#123;</div><div class="line">    username: &apos;kobe&apos;</div><div class="line">&#125;]</div><div class="line">let arr2=arr.concat()</div><div class="line">arr2[2].username = &apos;wang&apos;</div></pre></td></tr></table></figure><p>打印arr的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(arr) // [1, 3, &#123; username: &quot;wade&quot; &#125;]</div></pre></td></tr></table></figure><hr><h4 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice"></a>Array.prototype.slice</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 3, &#123;</div><div class="line">    username: &apos;kobe&apos;</div><div class="line">&#125;]</div><div class="line">let arr2=arr.slice()</div><div class="line">arr2[2].username = &apos;wang&apos;</div></pre></td></tr></table></figure><p>打印arr的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(arr) // [1, 3, &#123; username: &quot;wade&quot; &#125;]</div></pre></td></tr></table></figure><hr><h4 id="Array-prototype-concat-vs-Array-prototype-slice"><a href="#Array-prototype-concat-vs-Array-prototype-slice" class="headerlink" title="Array.prototype.concat vs Array.prototype.slice"></a>Array.prototype.concat vs Array.prototype.slice</h4><p>关于Array的concat和slice补充说明：Array的concat和slice方法不改变原始数组，只是返回了一个浅复制原数组中的元素的一个新数组。</p><p>原数组中的元素会按照下述规则拷贝：</p><ul><li><p>如果该元素是个引用类型，slice或者concat会拷贝这个引用到新的数组里，两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新数组和原数组中的这个元素都会发生改变。</p></li><li><p>如果该元素是个值类型，slice或者concat会复制一份这些值到新数组里。在别的数组里修改这些值，并不会影响另一个数组。</p></li></ul><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 3, &#123;</div><div class="line">    username: &apos;kobe&apos;</div><div class="line">&#125;];</div><div class="line">let arr3 = arr.slice();</div><div class="line">arr3[1] = 2</div><div class="line">console.log(arr, arr3)</div></pre></td></tr></table></figure><p>打印arr和arr3的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(arr, arr3)</div><div class="line">// ---result</div><div class="line">// [1, 3, &#123; username: &quot;kobe&quot; &#125;]</div><div class="line">// [1, 2, &#123; username: &quot;kobe&quot; &#125;]</div></pre></td></tr></table></figure><hr><h3 id="深拷贝的实现方式"><a href="#深拷贝的实现方式" class="headerlink" title="深拷贝的实现方式"></a>深拷贝的实现方式</h3><h4 id="Object-assign-1"><a href="#Object-assign-1" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>Object.assign可以进行一层深度拷贝</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = Object.assign(&#123;&#125;, obj1)</div><div class="line">obj1.age = 24</div><div class="line">console.log(obj, obj1)</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ----result</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123;  &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123;  &#125;, age: 24 &#125;</div></pre></td></tr></table></figure><p>然而。。。。。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = Object.assign(&#123;&#125;, obj1)</div><div class="line">obj1.test4.age = 24</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ----result</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123; age: 24 &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123; age: 24 &#125; &#125;</div></pre></td></tr></table></figure><hr><h4 id="JSON-parse-JSON-stringfy-obj"><a href="#JSON-parse-JSON-stringfy-obj" class="headerlink" title="JSON.parse(JSON.stringfy(obj))"></a>JSON.parse(JSON.stringfy(obj))</h4><p>说到深拷贝，你肯定会想到JSON.parse(JSON.stringfy(obj))。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test: &#123;</div><div class="line">            name: &apos;test&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = JSON.parse(JSON.stringify(obj))</div><div class="line">obj1.test.name = 24</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ----result</div><div class="line">// &#123; name: &quot;wang&quot;, test: &#123; name: &quot;test&quot; &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test: &#123; name: 24 &#125; &#125;</div></pre></td></tr></table></figure><p>然而。。。。</p><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = JSON.parse(JSON.stringify(obj))</div></pre></td></tr></table></figure><p>打印obj和obj1的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(obj, obj1)</div><div class="line">// ---result</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: &#123;  &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test4: &#123;  &#125; &#125;</div></pre></td></tr></table></figure><p>???test2和test3不见了。。。。。</p><p>JSON.stringify()方法是将一个JavaScript值(对象或者数组)转换为一个JSON字符串，不能接受函数。</p><hr><h4 id="手写递归方法"><a href="#手写递归方法" class="headerlink" title="手写递归方法"></a>手写递归方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function deepClone(obj) &#123;</div><div class="line">let result</div><div class="line">    let toString = Object.prototype.toString</div><div class="line">    if (toString.call(obj) === &apos;[Object Array]&apos;) &#123;</div><div class="line">    result = []</div><div class="line">      for (var i =0; i&lt;obj.length; i++) &#123;</div><div class="line">        result[i] = deepClone(obj[i])</div><div class="line">        &#125;</div><div class="line">    &#125; else if (toString.call(obj) === &apos;[Object Object]&apos;) &#123;</div><div class="line">    result = &#123;&#125;</div><div class="line">      for (var key in obj) &#123;</div><div class="line">        if (obj.hasOwnProperty(key)) &#123;</div><div class="line">            result[key] = deepClone(obj[key])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">    return obj</div><div class="line">    &#125;</div><div class="line">  return result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>🌰：调用函数并打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj1 = deepClone(obj)</div><div class="line">console.log(obj, obj21)</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: Object &#123;  &#125; &#125;</div><div class="line">// &#123; name: &quot;wang&quot;, test1: null, test2: undefined, test3: function()&#123;alert(1)&#125;, test4: Object &#123;  &#125; &#125;</div></pre></td></tr></table></figure><hr><h4 id="jQuery实现"><a href="#jQuery实现" class="headerlink" title="jQuery实现"></a>jQuery实现</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;</div><div class="line">        name: &apos;wang&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj2 = $.extend(true, &#123;&#125;, obj1)</div></pre></td></tr></table></figure><hr><h4 id="lodash实现"><a href="#lodash实现" class="headerlink" title="lodash实现"></a>lodash实现</h4><p>🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;</div><div class="line">        name: &apos;wclimb&apos;,</div><div class="line">        test1: null,</div><div class="line">        test2: undefined,</div><div class="line">        test3: function()&#123;alert(1)&#125;,</div><div class="line">        test4: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">var obj2 = _.cloneDeep(obj1)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当我们在JS中复制一个数据，在复制如string，number等基本数据类型时，看似没有出现问题。但是当复制如array，object类型时。出现了意想不到的结果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS-事件的防抖和节流</title>
    <link href="http://yoursite.com/2018/10/10/JS-%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://yoursite.com/2018/10/10/JS-事件的防抖和节流/</id>
    <published>2018-10-10T10:11:52.000Z</published>
    <updated>2018-12-11T14:03:41.509Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>窗口的resize、scroll、mousemove、mouseover等事件被频繁触发时，其对应的回调函数也会被频繁触发而导致页面抖动甚至卡顿。</p></blockquote><a id="more"></a><p>为了规避这种情况，我们需要一些手段来控制事件被触发的频率。此时，事件节流(throttle)和事件防抖(debounce)出现了。</p><h3 id="“节流”与”防抖”的本质"><a href="#“节流”与”防抖”的本质" class="headerlink" title="“节流”与”防抖”的本质"></a>“节流”与”防抖”的本质</h3><p>这两个东西都以闭包的形式存在。</p><p>它们通过对事件对应的回调函数进行包裹，以自由变量的形式缓存事件信息，然后用setTimeout来控制事件的触发频率。</p><hr><h3 id="Throttle：”节流”"><a href="#Throttle：”节流”" class="headerlink" title="Throttle：”节流”"></a>Throttle：”节流”</h3><p>持续触发事件时，throttle会合并一定时间内的事件，并在该事件结束时真正去触发一次事件。</p><p><img src="" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;窗口的resize、scroll、mousemove、mouseover等事件被频繁触发时，其对应的回调函数也会被频繁触发而导致页面抖动甚至卡顿。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>

    <title>Vue-小技巧总结[转]</title>
    <link href="http://yoursite.com/2017/07/03/Vue-%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/07/03/Vue-小技巧总结/</id>
    <published>2017-07-03T09:41:00.000Z</published>
    <updated>2018-11-27T04:17:49.470Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>这篇文章主要是为了将开发过程中知道的一些小技巧进行总结，帮助使用Vue开发的小伙伴们愉快地采坑。</p></blockquote><a id="more"></a><hr><h3 id="组件实例style的scoped"><a href="#组件实例style的scoped" class="headerlink" title="组件实例style的scoped"></a>组件实例style的scoped</h3><p>场景：在组件中用js动态创建的dom，添加样式不生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    let a = document.querySelector(&apos;test&apos;)</div><div class="line">    let newDom = document.createElement(&apos;div&apos;)</div><div class="line">    newDom.setAttribute(&apos;class&apos;, &apos;testAdd&apos;)</div><div class="line">    a.appendChild(newDom)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style scoped&gt;</div><div class="line">    .test&#123;</div><div class="line">       background:blue;</div><div class="line">       height:100px;</div><div class="line">       width:100px;</div><div class="line">    &#125;</div><div class="line">    .testAdd&#123;</div><div class="line">        background:red;</div><div class="line">        height:100px;</div><div class="line">        width:100px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// test生效   testAdd 不生效</div><div class="line">&lt;div data-v-1b971ada class=&quot;test&quot;&gt;&lt;div class=&quot;testAdd&quot;&gt;&lt;/div&gt;&lt;/div&gt;</div><div class="line">.test[data-v-1b971ada] &#123; // 注意data-v-1b971ada</div><div class="line">    background:blue;</div><div class="line">    height:100px;</div><div class="line">    width:100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原因:</p><p>当 <style> 标签有 scoped 属性时，它的 CSS 只作用于当前组件中的元素。<br>它会为组件中所有的标签和class样式添加一个scoped标识，就像上面结果中的data-v-1b971ada。<br>所以原因就很清楚了：因为动态添加的dom没有scoped添加的标识，没有跟testAdd的样式匹配起来，导致样式失效。</p><p>解决方式：</p><ul><li><p>去掉该组件的scoped</p></li><li><p>动态添加style</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newDom.style.height=&apos;100px&apos;;</div><div class="line">newDom.style.width=&apos;100px&apos;;</div><div class="line">newDom.style.background=&apos;red&apos;;</div></pre></td></tr></table></figure><hr><h3 id="Vue-数组-对象更新-视图不更新"><a href="#Vue-数组-对象更新-视图不更新" class="headerlink" title="Vue 数组/对象更新 视图不更新"></a>Vue 数组/对象更新 视图不更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">data() &#123; // data数据</div><div class="line">    return &#123;</div><div class="line">        arr: [1,2,3],</div><div class="line">        obj:&#123;</div><div class="line">               a: 1,</div><div class="line">                b: 2</div><div class="line">             &#125;</div><div class="line">           &#125;;</div><div class="line">        &#125;,</div><div class="line">       // 数据更新 数组视图不更新</div><div class="line">        this.arr[0] = &apos;OBKoro1&apos;;</div><div class="line">        this.arr.length = 1;</div><div class="line">        console.log(arr);// [&apos;OBKoro1&apos;];</div><div class="line">        // 数据更新 对象视图不更新</div><div class="line">        this.obj.c = &apos;OBKoro1&apos;;</div><div class="line">        delete this.obj.a;</div><div class="line">        console.log(obj);  // &#123;b:2,c:&apos;OBKoro1&apos;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于js的限制，Vue 不能检测以上数组的变动，以及对象的添加/删除，很多人会因为像上面这样操作，出现视图没有更新的问题。</p><p>解决方式：</p><ul><li>this.$set(array)</li></ul></style></p>]]></content>
=======
    <title>Webpack-webpack-dev-server</title>
    <link href="http://yoursite.com/2018/09/26/Webpack-webpack-dev-server/"/>
    <id>http://yoursite.com/2018/09/26/Webpack-webpack-dev-server/</id>
    <published>2018-09-26T07:15:00.000Z</published>
    <updated>2018-12-11T14:03:41.515Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。</p></blockquote><a id="more"></a><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>webpack-dev-server为webpack提供的一个静态服务的工具，并能够实时重新加载。</p><hr><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i webpack-dev-server -D</div></pre></td></tr></table></figure><p>package.json添加scripts配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // ...</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;webpack-dev-server --mode development&quot; // 指定mode为development</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure><p>如果项目构建了HTML文件，直接访问<a href="http://localhost:8080/就可以看到index.html页面了。否则，就会看到一个静态资源列表列表的页面。" target="_blank" rel="external">http://localhost:8080/就可以看到index.html页面了。否则，就会看到一个静态资源列表列表的页面。</a></p><hr><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>在webpack配置中，可以通过devServer字段来配置webpack-dev-server。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  devServer: &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>host：指定使用一个host，默认是localhost。</li><li>port：指定端口号，默认是8080。</li><li>publicPath: 构建好的静态文件在浏览器中以什么路径去访问，默认为’/‘。假设服务器运行在<a href="http://localhost:8080，并且output.filename被设置为bundle.js。完整的访问路径是" target="_blank" rel="external">http://localhost:8080，并且output.filename被设置为bundle.js。完整的访问路径是</a> <a href="http://localhost:8080/bundle.js，如果你配置了" target="_blank" rel="external">http://localhost:8080/bundle.js，如果你配置了</a> publicPath: ‘assets/‘，那么上述 bundle.js 的完整访问路径就是 <a href="http://localhost:8080/assets/bundle.js。" target="_blank" rel="external">http://localhost:8080/assets/bundle.js。</a></li></ul><p>建议devServer.publicPath和output.publicPath一样。</p><ul><li>proxy：配置代理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">proxy: &#123;</div><div class="line">  &apos;/api&apos;: &#123;</div><div class="line">    target: &apos;http://localhost:3000&apos; // 将url中带有/api的请求代理到本地3000端口的服务器上</div><div class="line">    pathRewrite: &#123;&apos;^/api&apos;: &apos;&apos;&#125; // 把URL中path部分的api去掉</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>color：启用/jiny9ong控制台的彩色输出。</li><li>contentBase：提供未经webpack构建的额外静态文件内容的目录。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 使用当前目录下的 public</div><div class="line">contentBase: path.join(__dirname, &quot;public&quot;)</div><div class="line"></div><div class="line">// 也可以使用数组提供多个路径</div><div class="line">contentBase: [path.join(__dirname, &quot;public&quot;), path.join(__dirname, &quot;assets&quot;)]</div></pre></td></tr></table></figure><p>publicePath的优先级高于constBase。</p><ul><li><p>before：在服务内部的所有其他中间件之前， 提供执行自定义中间件的功能。</p></li><li><p>after：在服务内部的所有其他中间件之后， 提供执行自定义中间件的功能。</p></li></ul>]]></content>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;

&lt;p&gt;这篇文章主要是为了将开发过程中知道的一些小技巧进行总结，帮助使用Vue开发的小伙伴们愉快地采坑。&lt;/p&gt;
=======
&lt;p&gt;webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。&lt;/p&gt;
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    

      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
=======
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack-基础使用</title>
    <link href="http://yoursite.com/2018/09/25/Webpack-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/25/Webpack-基础使用/</id>
    <published>2018-09-25T07:15:00.000Z</published>
    <updated>2018-12-11T14:03:41.515Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。</p></blockquote><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm或者yarn来安装webpack</p><hr><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm i webpack webpack-cli -g</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">$ yarn -g add webpack webpack-cli</div></pre></td></tr></table></figure><p>等待安装完毕，就可以全局执行webpack命令了。注：webpack-cli在4.x版本之后不再作为webpack的依赖了，我们使用时需要单独安装。</p><hr><h4 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h4><p>在项目中，我们更推荐将webpack作为项目的开发依赖来安装使用，这样可以指定项目中使用的webpack版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm i webpack webpack-cli -D</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">$ yarn add webpack webpack-cli -D</div></pre></td></tr></table></figure><p>等待安装完毕，webpack会出现在项目的package.json文件中，我们添加一个npm scripts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;build&quot;: &quot;webpack --mode production&quot;</div><div class="line">&#125;,</div><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">  &quot;webpack&quot;: &quot;^4.1.1&quot;,</div><div class="line">  &quot;webpack-cli&quot;: &quot;^2.0.12&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>项目根目录新建./src/index.js，任意写JS代码，保存，执行npm run build或者yarn build命令，我们会发现项目根目录下新增了一个dist目录，里面存放了webpack构建好的main.js文件。</p><p>webpack4.x可以零配置就开始构建，但有时我们的项目需要更多的功能。</p><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>先放一张经典图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-gold-cdn.xitu.io/2018/3/19/1623bfac4a1e0945?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p>如上图左上角的.js，这个.js就是多个代码模块的入口，也是webpack构建的入口。webpack会读取这个文件，并从它开始解析依赖，然后进行打包。</p><p>在我们的项目中，如果是单页应用，那么可能入口只有一个。如果是多页应用，那么经常是一个页面对应一个构建入口。</p><p>用法：entry</p><hr><h5 id="单个入口语法"><a href="#单个入口语法" class="headerlink" title="单个入口语法"></a>单个入口语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 简写</div><div class="line">module.exports = &#123;</div><div class="line">  entry: &apos;./src/index&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    main: &apos;./src/index&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h5 id="多个入口语法"><a href="#多个入口语法" class="headerlink" title="多个入口语法"></a>多个入口语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    foo: &apos;./src/foo&apos;,</div><div class="line">    bar: &apos;./src/bar&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出即指webpack最终构建出来的静态文件，构建结果的文件名，路径等都是可以配置的。</p><p>用法：output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;bundle.js&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 多个入口生成不同的文件</div><div class="line">module.exports = &#123;</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;[name].js&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 路径中使用hash，每次构建都有一个不同的hash值，避免发布新版本使用浏览器缓存</div><div class="line">module.exports = &#123;</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist/[hash]&apos;),</div><div class="line">    filename: &apos;[name].js&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>loader，我们可以理解为一个转换器，负责把某种文件格式的内容转换成webpack可以支持打包的模块。</p><p>默认情况下，webpack会默认把所有依赖打包成JS文件，如果入口文件依赖一个.pug模块文件或者.scss样式文件，那么我们就需要相应的loader来把不同格式的文件转换为JavaScript，以便打包后在浏览器运行。</p><p>用法：module.rules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.jsx?/, // 条件</div><div class="line">        include: [</div><div class="line">          path.resolve(__dirname, &apos;src&apos;)</div><div class="line">        ], // 条件</div><div class="line">        use: &apos;babel-loader&apos; // 规则应用结果</div><div class="line">      &#125; // 一个Object即一条规则</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>loader匹配规则中最重要的两个因素：匹配条件和匹配规则后的应用。</p><hr><h5 id="规则条件配置"><a href="#规则条件配置" class="headerlink" title="规则条件配置"></a>规则条件配置</h5><p>匹配条件通常使用请求资源文件的绝对路径来进行匹配，官方文档成为resource。</p><p>上述代码中的test和include都用于匹配resource路径，是resource.test和resource.include的简写。你也可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  rules: [</div><div class="line">      &#123;</div><div class="line">        resource: &#123; // resource 的匹配条件</div><div class="line">          test: /\.jsx?/,</div><div class="line">          include: [</div><div class="line">            path.resolve(__dirname, &apos;src&apos;),</div><div class="line">          ]</div><div class="line">        &#125;,</div><div class="line">        use: &apos;babel-loader&apos;</div><div class="line">      &#125;,</div><div class="line">      // ...</div><div class="line">    ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>webpack为loader提供了多种匹配条件的配置方式：</p><ul><li>test: … 匹配特定条件</li><li>include: … 匹配特定路径</li><li>exclude: … 排除特定路径</li><li>and: [] 必须匹配数组中的所有条件</li><li>or: [] 匹配数组中的任意一个条件</li><li>not: [] 排除匹配数组中的所有条件</li></ul><p>条件值类型：</p><ul><li>字符串：必须以提供的字符串开始（绝对路径）</li><li>正则表达式</li><li>数组：至少包含一个条件的数组</li><li>对象：匹配所有属性值的条件</li><li>函数：返回true表示匹配</li></ul><hr><h5 id="规则应用配置"><a href="#规则应用配置" class="headerlink" title="规则应用配置"></a>规则应用配置</h5><p>匹配规则后的应用，我们可以使用use字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">rules: [</div><div class="line">  &#123;</div><div class="line">    test: /\.less/,</div><div class="line">    use: [</div><div class="line">      &apos;style-loader&apos;,</div><div class="line">      &#123;</div><div class="line">        loader: &apos;css-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          // ...</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        loader: &apos;less-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          // ...</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><p>使用options可以给对应的loader传递一些配置项。</p><p>对于上述的less规则应用配置，一个less模块文件可以经过多个loader的转换处理，执行顺序为从右到左。</p><p>如果多个rule匹配了同一个模块文件，loader的应用顺序应该如何处理？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rules: [</div><div class="line">  &#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;eslint-loader&quot;,</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;babel-loader&quot;,</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><p>eslint-loader用于检查人工编写的代码，babel-loader用于转换代码。所以，eslint-loader应该在babel-loader之前执行，那么该如何保证执行顺序？</p><p>webpack为每一个匹配规则提供了enforce字段来配置当前rule得的loader类型。pre(前置) &gt; 行内 &gt; 普通 &gt; 后置(post)。 我们要确保eslint-loader在babel-loader之前执行，只需给rule规则项添加enforce字段，并设置其值为pre。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">rules: [</div><div class="line">  &#123;</div><div class="line">    enforce: &apos;pre&apos;,</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;eslint-loader&quot;,</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loader: &quot;babel-loader&quot;,</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><hr><h5 id="常用rule配置项"><a href="#常用rule配置项" class="headerlink" title="常用rule配置项"></a>常用rule配置项</h5><h6 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.css$/,</div><div class="line">        // 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</div><div class="line">        use: ExtractTextPlugin.extract(&#123;</div><div class="line">          fallback: &apos;style-loader&apos;,</div><div class="line">          use: &apos;css-loader&apos;,</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    // 引入插件，配置文件名，这里同样可以使用 [hash]</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;),</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>css-loader：负责解析CSS代码，主要处理CSS中的依赖，🌰：@import、url()等。</li><li>style-loader：将css-loader解析的结果转变为JS代码，运行时动态插入style标签来让CSS生效。</li></ul><hr><h6 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.less/,</div><div class="line">        // 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader</div><div class="line">        use: ExtractTextPlugin.extract(&#123;</div><div class="line">          fallback: &apos;style-loader&apos;,</div><div class="line">          use: [&apos;css-loader&apos;, &apos;less-loader&apos;],</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    // 引入插件，配置文件名，这里同样可以使用 [hash]</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h6><p>webpack无法处理图片格式，我们选择file-loader，它不仅可以处理图片格式，还可用于处理其它很多类型的文件。直接输出文件，将构建后的文件路径返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.(png|jpg|gif)$/,</div><div class="line">        use: &apos;file-loader&apos;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h6><p>Babel是一个让我们能够使用ES6、ES7等新标准来编写JS的编译工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.jsx?/,</div><div class="line">        loader: &apos;babel-loader&apos;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>插件是webpack的支柱功能，在于解决loader无法实现的其他事情。</p><p>用法：plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const UglifyPlugin = require(&apos;uglifyjs-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  plugins: [new UglifyPlugin()]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h5 id="常见webpack-plugin使用"><a href="#常见webpack-plugin使用" class="headerlink" title="常见webpack plugin使用"></a>常见webpack plugin使用</h5><h6 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h6><p>webpack默认从作为入口的JS文件进行构建，但通常一个前端项目都是从一个页面(HTML)出发的。通常我们会创建一个HTML文件，使用script标签直接引入构建好的js文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>然而，问题来了，如果我们的文件名或者路径变化，每次构建完成后，我们要手动去修改HTML文件中的js路径?</p><p>如果能将HTML引用路径和我们的webpack构建结果关联起来就好了。</p><p>html-webpack-plugin就可以帮我们解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm i html-webpack-plugin -D</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">yarn add html-webpack-plugin -D</div></pre></td></tr></table></figure><p>然后在webpack配置中，将html-webpack-plugin添加到plugins列表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new HtmlWebpackPlugin(),</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置好之后，构建时html-webpack-plugin会为我们创建一个HTML文件，其中会引用构建出来的JS文件。</p><p>我们还可以在html-webpack-plugin中传递我们自己写好的HTML模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new HtmlWebpackPlugin(&#123;</div><div class="line">      filename: &quot;index.html&quot;,</div><div class="line">      template: &quot;assets/index.html&quot;</div><div class="line">    &#125;),</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h6><p>DefinePlugin是webpack的内置插件，可以通过webpack.DefinePlugin直接引用。</p><p>主要用于创建一些在编译时可以配置的全局变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new webpack.DefinePlugin(&#123;</div><div class="line">      VERSION: JSON.stringfy(&apos;v1.1.0&apos;), // const VERSION = &apos;v1.1.0&apos;</div><div class="line">      TWO: &apos;1 + 1&apos;, // const TWO = 2</div><div class="line">      BROWSER_SUPPORT: true, // const BROWSER_SUPPORT = &apos;true&apos;</div><div class="line">      CONSTANTS: &#123;</div><div class="line">        APP_VERSION: JSON.stringfy(&apos;1.1.1&apos;)</div><div class="line">      &#125; // const CONSTANTS = &#123; APP_VERSION: &apos;1.1.1&apos;&#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置好之后，我们就可以在应用代码中，访问配置好的变量了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(VERSION)</div></pre></td></tr></table></figure><p>有关配置的值，简述一下配置规则：</p><ul><li><p>如果配置的值为字符串，那么整个字符串会被当做代码片段来执行，其结果将作为最终配置的值。</p></li><li><p>如果配置的值不是字符串，也不是对象字面量，那么该值会被转换为一个字符串。</p></li><li><p>如果配置的值是一个对象字面量，那么该对象的所有key会以同样的方式去定义。</p></li></ul><hr><h6 id="CopyWebpackPlugin"><a href="#CopyWebpackPlugin" class="headerlink" title="CopyWebpackPlugin"></a>CopyWebpackPlugin</h6><p>通常我们会把源码和资源文件放在项目的src目录下，构建完成后会有一个dist目录，我们会直接拿dist目录中的所有文件来发布。有些文件没有经过webpack处理，但是我们希望它们也能出现在dist目录下，这时，我们就可以使用CopyWebpackPlugin来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new CopyWebpackPlugin([</div><div class="line">       &#123; from: &apos;src/*.txt&apos;, to: &apos;dist/*.txt&apos; &#125; // from: 配置来源；to: 配置目标</div><div class="line">    ])</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a>ExtractTextWebpackPlugin</h6><p>通常CSS经过相应的loader处理后，会转换为JS，和index.js一起打包。如果需要单独把CSS文件分离出来，就需要使用extract-text-webpack-plugin插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const ExtractTextWebpackPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.css$/,</div><div class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</div><div class="line">          fallback: &apos;style-loader&apos;,</div><div class="line">          use: &apos;css-loader&apos;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    //  style.css 作为单独分离出来的文件名</div><div class="line">    new ExtractTextWebpackPlugin(&apos;style.css&apos;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>它还可以为每一个入口创建单独分离的文件，所以，最好这样配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  new ExtractTextPlugin(&apos;[name].css&apos;),</div><div class="line">]</div></pre></td></tr></table></figure><hr><h6 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a>ProvidePlugin</h6><p>ProvidePlugin是webpack的内置插件，可以通过webpack.ProvidePlugin直接引用。</p><p>主要用于自动加载模块，不必到处import或require</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">new webpack.ProvidePlugin(&#123;</div><div class="line">  identifier: &apos;module&apos;,</div><div class="line">  // ...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">new webpack.ProvidePlugin(&#123;</div><div class="line">  identifier: [&apos;module&apos;, &apos;property&apos;], // 即引用 module 下的 property，类似 import &#123; property &#125; from &apos;module&apos;</div><div class="line">  // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>任何时候，当identifier被当作未赋值的变量时，module就会自动被加载，并且identifier会被这个module输出的内容所赋值。</p><p>注：如果是ES的default export，那么你需要指定模块的default属性：identifier: [‘module’, ‘default’]。</p><hr><h6 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h6><p>IgnorePlugin是webpack的内置插件，可以通过webpack.IgnorePlugin直接引用。</p><p>主要用于忽略某些特定的模块，让webpack不把这些指定的模块打包进去。</p><p>配置参数：匹配引入模块路径的正则表达式，匹配模块的上下文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;webpack是一个现代JavaScript应用程序的静态模块打包器，在webpack处理应用程序时，它会在内部创建一个依赖图，用于映射到项目需要的每个模块，然后将所有这些依赖生成到一个或多个bundle。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
  </entry>
  
  <entry>

    <title>Node-npm常用操作指令</title>
    <link href="http://yoursite.com/2017/06/15/Node-npm%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/06/15/Node-npm常用操作指令/</id>
    <published>2017-06-15T08:06:52.000Z</published>
    <updated>2018-11-27T04:17:05.326Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>NPM，全程Node Package Manager，即Node.js模块管理工具。</p></blockquote><a id="more"></a><h2 id="NPM常用操作指令列表"><a href="#NPM常用操作指令列表" class="headerlink" title="NPM常用操作指令列表"></a>NPM常用操作指令列表</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>npm install</td><td>安装模块</td></tr><tr><td>npm uninstall</td><td>卸载模块</td></tr><tr><td>npm update</td><td>更新模块</td></tr><tr><td>npm outdated</td><td>检查模块是否已经过时</td></tr><tr><td>npm ls</td><td>查看安装的模块</td></tr><tr><td>npm init</td><td>初始化项目的package.json</td></tr><tr><td>npm help</td><td>查看命令的详细帮助</td></tr><tr><td>npm root</td><td>查看包的安装路径</td></tr><tr><td>npm config</td><td>查看npm的配置路径</td></tr><tr><td>npm cache</td><td>管理模块的缓存</td></tr><tr><td>npm start</td><td>启动模块</td></tr><tr><td>npm stop</td><td>停止模块</td></tr><tr><td>npm restart</td><td>重启模块</td></tr><tr><td>npm view</td><td>查看模块的注册信息</td></tr><tr><td>npm version</td><td>查看模块版本</td></tr><tr><td>npm test</td><td>测试模块</td></tr><tr><td>npm adduser</td><td>添加用户</td></tr><tr><td>npm publish</td><td>发布模块</td></tr><tr><td>npm access</td><td>在发布的包上设置访问级别</td></tr></tbody></table>]]></content>
=======
    <title>Linux-常用命令</title>
    <link href="http://yoursite.com/2017/10/03/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/10/03/Linux-常用命令/</id>
    <published>2017-10-03T08:41:00.000Z</published>
    <updated>2018-12-11T14:03:41.511Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>这篇文章主要是为了使用Linux系统服务器做开发，总结的一些常用命令。</p></blockquote><a id="more"></a><h3 id="Linux常用操作指令列表"><a href="#Linux常用操作指令列表" class="headerlink" title="Linux常用操作指令列表"></a>Linux常用操作指令列表</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ssh username@ip</td><td>连接服务器</td></tr><tr><td>cd path</td><td>跳转到路径对应的目录下</td></tr><tr><td>rm filename</td><td>删除文件</td></tr><tr><td>rm -rf path</td><td>删除目录及目录下的所有文件</td></tr><tr><td>ls [-a]</td><td>查看当前目录下的文件和目录(-a：查看所有文件，包括隐藏文件)</td></tr><tr><td>ll</td><td>查看当前目录下的文件详情(文件权限)</td></tr><tr><td>pwd</td><td>查看当前路径的完整路径</td></tr><tr><td>which name</td><td>默认位置查找该名字</td></tr><tr><td>mkdir dirname</td><td>创建空目录</td></tr><tr><td>cat path</td><td>查看文件内容</td></tr><tr><td>cp origin target</td><td>复制一个文件到另一个地方</td></tr><tr><td>mv origin target</td><td>移动一个文件到另一个地方</td></tr><tr><td>ps -aux</td><td>显示当前进程</td></tr><tr><td>kill -9 processid</td><td>结束进程</td></tr><tr><td>tar -zxvf filename</td><td>解压文件</td></tr><tr><td>tar -zcvf filename</td><td>压缩文件</td></tr><tr><td>vi path</td><td>进入文件编辑模式</td></tr><tr><td>vi编辑文件，按下i进入编辑模式</td></tr><tr><td>vi退出文件，esc+:wq或esc+:x保存退出</td></tr><tr><td>vi退出文件，esc+:q或esc+:q!强制退出</td></tr></tbody></table>]]></content>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;

&lt;p&gt;NPM，全程Node Package Manager，即Node.js模块管理工具。&lt;/p&gt;
=======
&lt;p&gt;这篇文章主要是为了使用Linux系统服务器做开发，总结的一些常用命令。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>小程序-全栈开发(mpvue+koa2+mysql)</title>
    <link href="http://yoursite.com/2017/09/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91(mpvue+koa2+mysql)/"/>
    <id>http://yoursite.com/2017/09/02/小程序-全栈开发(mpvue+koa2+mysql)/</id>
    <published>2017-09-02T08:06:52.000Z</published>
    <updated>2018-12-11T14:03:41.518Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>接触小程序并做了一些项目之后，又开始了Vue的旅程，受其核心思想的影响，对数据/状态管理、组件化、跨平台等都有较高的追求，mpvue 是一个使用 Vue.js开发小程序的前端框架，由此开始了mpvue踩坑之旅，想在提高代码可读性的同时，也增加一点Vue.js的开发体验。</p></blockquote><a id="more"></a><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><hr><p>前端： 微信小程序、mpvue、 eslint、sass、ES6、ES7<br>后端：koa2、Koa-Router、Knex、腾讯云Wafer2<br>数据库：Mysql<br>数据库可视化工具：Navicate Premium</p><hr><h2 id="小程序介绍"><a href="#小程序介绍" class="headerlink" title="小程序介绍"></a>小程序介绍</h2><p>一个功能简单的小程序，包含了个人中心、图书列表、个人评论列表三个tab页，后端的数据定义、分类、和存取等，各有其色。</p><hr><h3 id="成果分享"><a href="#成果分享" class="headerlink" title="成果分享"></a>成果分享</h3><p>个人中心：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/user1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>个人中心：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/user2.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图书列表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/home1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图书详情：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/home1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>评论列表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/list-01.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/naotu.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>*全局安装vue-cli</p><p>$npm install –global vue-cli</p><p>*创建基于mpvue-quickstart模板的新项目，一路回车。</p><p>$vue init mpvue/mpvue-quickstart koa-wx</p><p>*安装依赖</p><p>$cd koa-wx</p><p>$npm install</p><p>$npm run dev</p><hr><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">├── build           // 构建相关  </div><div class="line">├── config           // 配置相关</div><div class="line">├── dist            // 编译后静态文件 </div><div class="line">├── node_modules        // 依赖相关</div><div class="line">├── server            // 服务端源代码</div><div class="line">│  ├── controllers     </div><div class="line">│  ├── middlewares    </div><div class="line">│  ├── node_modules    </div><div class="line">│  ├── routes    </div><div class="line">│  ├── tools     </div><div class="line">│  ├── .eslintrc.js </div><div class="line">│  ├── .eslintrc.json  </div><div class="line">│  ├── app.js     </div><div class="line">│  ├── config.js   </div><div class="line">│  ├── nodemon.json   </div><div class="line">│  ├── package.json    </div><div class="line">│  ├── process.prod.json   </div><div class="line">│  ├── qcloud.js   </div><div class="line">│  ├── README.md    </div><div class="line">│  ├── tools.md  </div><div class="line">├── src            // 前端源代码</div><div class="line">│  ├── components     </div><div class="line">│  ├── config    </div><div class="line">│  ├── mock     </div><div class="line">│  ├── pages     </div><div class="line">│  ├── styles     </div><div class="line">│  ├── utils       </div><div class="line">│  ├── App.vue        </div><div class="line">│  ├── main.js       </div><div class="line">│  ├── store.js      </div><div class="line">│  ├── weui.css    </div><div class="line">├── static          </div><div class="line">├── .babelrc         </div><div class="line">├── .editorconfig      </div><div class="line">├── .eslintignore    </div><div class="line">├── .eslintrc.js       </div><div class="line">├── .postcssrc.js      </div><div class="line">├── index.html        </div><div class="line">└── package.json      </div><div class="line">└── package-lock.json </div><div class="line">└── project.config.json </div><div class="line">└── README.md</div></pre></td></tr></table></figure><hr><h3 id="搭建后端本地开发环境"><a href="#搭建后端本地开发环境" class="headerlink" title="搭建后端本地开发环境"></a>搭建后端本地开发环境</h3><p>打开 server/config.js添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const CONF = &#123;</div><div class="line">      // 其他配置 ...</div><div class="line">    serverHost: &apos;localhost&apos;,</div><div class="line">    tunnelServerUrl: &apos;&apos;,</div><div class="line">    tunnelSignatureKey: &apos;27fb7d1c161b7ca52d73cce0f1d833f9f5b5ec89&apos;,</div><div class="line">      // 腾讯云相关配置可以查看云 API 秘钥控制台：https://console.cloud.tencent.com/capi</div><div class="line">    qcloudAppId: &apos;您的腾讯云 AppID&apos;,</div><div class="line">    qcloudSecretId: &apos;您的腾讯云 SecretId&apos;,</div><div class="line">    qcloudSecretKey: &apos;您的腾讯云 SecretKey&apos;,</div><div class="line">    wxMessageToken: &apos;weixinmsgtoken&apos;,</div><div class="line">    networkTimeout: 30000</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>并修改 MySQL 相关的配置为本地的 MySQL 数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql: &#123;</div><div class="line">    host: &apos;localhost&apos;,</div><div class="line">    port: 3306,</div><div class="line">    user: &apos;root&apos;,</div><div class="line">    db: &apos;cAuth&apos;,</div><div class="line">    pass: &apos;******&apos;,</div><div class="line">    char: &apos;utf8mb4&apos;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p>*切换到服务端代码目录<br>$cd server</p><p>*安装依赖<br>$npm install</p><p>*安装全局依赖<br>$npm install -g nodemon</p><p>$npm run dev</p><p>初始化数据库 - 打开 terminal 输入如下命令：</p><p>$node tools/initdb.js</p><p>进入Mysql选中刚才创建的数据库，输入 show tables; 可以看到初始化时创建了一个名叫 cSessionInfo 的表。说明本地环境已经搭建成功。</p><hr><h3 id="部署到腾讯云环境"><a href="#部署到腾讯云环境" class="headerlink" title="部署到腾讯云环境"></a>部署到腾讯云环境</h3><p>当本地本地开发出一版时，可以部署到腾讯云的开发环境，这样就可以在线上访问该项目。</p><p>首先修改项目根目录的 project.config.json 文件，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;qcloudRoot&quot;: &quot;./server/&quot;,</div></pre></td></tr></table></figure><p>然后将本地开发时添加到 server/config.js 的配置删除，在 mysql.pass 那里填上自己的 APPID。</p><p>接着进入小程序开发工具，点击右上角的 腾讯云，上传测试代码，弹出如图选项。第一次部署如下选择，之后再次上传选择 智能上传 即可。部署成功会有提示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://static.imkk.xin/blog/photo/uploadToTecentCloud.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>###上传前端代码</p><p>在小程序开发工具右上角找到 上传 选项，填写版本信息，上传后进入开发者控制台，开发管理页面，将该小程序设置为体验版本。</p><p>然后在用户身份 ==&gt; 成员管理中，添加项目成员，配置权限，这样好友也可以体验该小程序了。</p><p>项目地址：<a href="https://github.com/wangqian2017/mpvue-koa2" target="_blank" rel="external">https://github.com/wangqian2017/mpvue-koa2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;接触小程序并做了一些项目之后，又开始了Vue的旅程，受其核心思想的影响，对数据/状态管理、组件化、跨平台等都有较高的追求，mpvue 是一个使用 Vue.js开发小程序的前端框架，由此开始了mpvue踩坑之旅，想在提高代码可读性的同时，也增加一点Vue.js的开发体验。&lt;/p&gt;
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    

      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
=======
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
  </entry>
  
  <entry>

    <title>JS-精心收集的48个JavaScript代码片段</title>
    <link href="http://yoursite.com/2017/05/11/JS-%E7%B2%BE%E5%BF%83%E6%94%B6%E9%9B%86%E7%9A%8448%E4%B8%AAJavaScript%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://yoursite.com/2017/05/11/JS-精心收集的48个JavaScript代码片段/</id>
    <published>2017-05-11T13:06:52.000Z</published>
    <updated>2018-11-27T04:17:01.137Z</updated>
=======
    <title>Vue-移动端自动转换px为rem(postcss-pxtorem)</title>
    <link href="http://yoursite.com/2017/08/25/Vue-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2px%E4%B8%BArem(postcss-pxtorem)/"/>
    <id>http://yoursite.com/2017/08/25/Vue-移动端自动转换px为rem(postcss-pxtorem)/</id>
    <published>2017-08-25T09:41:00.000Z</published>
    <updated>2018-12-11T14:03:41.583Z</updated>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>前端在开发移动端webapp还原设计稿的重要性母庸质疑，目前来说应用最多的应该是rem。然而很多前端开发依然选择要么自己去计算rem值，要么依靠编辑器安装插件转换。</p></blockquote><a id="more"></a><p>其实，通过一系列的配置后，我们在开发中可以直接使用设计图的尺寸，它为我们自动编译，转换成rem。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><hr><ul><li>vue-cli@3.0: 脚手架工具创建项目</li><li>postcss-pxtorem: 转换px为rem的依赖包</li></ul><p>只需以下几步，就可以愉快地开发了😊。</p><hr><h3 id="创建rem-js文件"><a href="#创建rem-js文件" class="headerlink" title="创建rem.js文件"></a>创建rem.js文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 基准大小</div><div class="line">const baseSize = 32</div><div class="line">// 设置 rem 函数</div><div class="line">function setRem() &#123;</div><div class="line">  // 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。</div><div class="line">  const scale = document.documentElement.clientWidth / 750</div><div class="line">  // 设置页面根节点字体大小</div><div class="line">  document.documentElement.style.fontSize = baseSize * Math.min(scale, 2) + &apos;px&apos;</div><div class="line">&#125;</div><div class="line">// 初始化</div><div class="line">setRem()</div><div class="line">// 改变窗口大小时重新设置 rem</div><div class="line">window.onresize = function() &#123;</div><div class="line">  setRem()</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="main-js中引入rem-js"><a href="#main-js中引入rem-js" class="headerlink" title="main.js中引入rem.js"></a>main.js中引入rem.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &apos;./utils/rem&apos;</div></pre></td></tr></table></figure><p>引入文件后，可以看到页面的html节点，被自动添加 font-size</p><hr><h3 id="安装并配置postcss-pxtoren"><a href="#安装并配置postcss-pxtoren" class="headerlink" title="安装并配置postcss-pxtoren"></a>安装并配置postcss-pxtoren</h3><h4 id="安装postcss-pxtorem"><a href="#安装postcss-pxtorem" class="headerlink" title="安装postcss-pxtorem"></a>安装postcss-pxtorem</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install postcss-pxtorem -D</div></pre></td></tr></table></figure><hr><h4 id="修改跟目录postcss-config-js"><a href="#修改跟目录postcss-config-js" class="headerlink" title="修改跟目录postcss.config.js"></a>修改跟目录postcss.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  plugins: &#123;</div><div class="line">    autoprefixer: &#123;</div><div class="line">      browsers: [&apos;Android &gt;= 4.0&apos;, &apos;iOS &gt;= 7&apos;]</div><div class="line">    &#125;,</div><div class="line">    &apos;postcss-pxtorem&apos;: &#123;</div><div class="line">      rootValue: 32, // The root element font size</div><div class="line">      propList: [&apos;*&apos;], // The properties that can change from px to rem.</div><div class="line">      minPixelValue: 20, // Set the minimum pixel value to replace.</div><div class="line">      selectorBlackList: [</div><div class="line">        &apos;.weui-&apos;,</div><div class="line">        &apos;.ig-&apos;,</div><div class="line">        &apos;.vux-&apos;,</div><div class="line">        &apos;.scroller-&apos;,</div><div class="line">        &apos;.dp-&apos;,</div><div class="line">        &apos;.mt-&apos;,</div><div class="line">        &apos;.mint-&apos;,</div><div class="line">        &apos;.range&apos;</div><div class="line">      ] //  The selectors to ignore and leave as px.</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>按上述完成配置后，即可在开发中直接使用px单位开发。</p><p>举个🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line"> width: 750px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>转换后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line"> width: 23.4375rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前端在开发移动端webapp还原设计稿的重要性母庸质疑，目前来说应用最多的应该是rem。然而很多前端开发依然选择要么自己去计算rem值，要么依靠编辑器安装插件转换。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>

    <title>HTML5-必知必会特性</title>
    <link href="http://yoursite.com/2017/04/17/HTML5-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2017/04/17/HTML5-必知必会特性/</id>
    <published>2017-04-17T09:41:00.000Z</published>
    <updated>2018-11-27T04:16:56.610Z</updated>
=======
    <title>Vue-小技巧总结[转]</title>
    <link href="http://yoursite.com/2017/07/03/Vue-%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/07/03/Vue-小技巧总结/</id>
    <published>2017-07-03T09:41:00.000Z</published>
    <updated>2018-12-11T14:03:41.514Z</updated>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>HTML5-拥有更加丰富的标签，对微数据、微结构有着非常友好的支持，赋予网页更好的意义和结构等等…</p></blockquote><a id="more"></a><h3 id="HTML5新的语义"><a href="#HTML5新的语义" class="headerlink" title="HTML5新的语义"></a>HTML5新的语义</h3><p>HTML5出现之前，通常使用DIV+CSS来表述元素语义，但语义本身的意义在于让机器能够读懂页面的含义。HTML5的出现，赋予网页更好的意义和结构。</p><hr><h4 id="新元素的到来"><a href="#新元素的到来" class="headerlink" title="新元素的到来"></a>新元素的到来</h4><p>部分新元素一览表：</p><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>header</td><td>可表示介绍内容的容器或一组导航链接</td></tr><tr><td>nav</td><td>导航</td></tr><tr><td>article</td><td>标识页面中的主体内容</td></tr><tr><td>section</td><td>标记页面上重要的内容</td></tr><tr><td>aside</td><td>和页面内容相关，但不是页面的一部分</td></tr><tr><td>footer</td><td>文章或章节的页脚</td></tr><tr><td>address</td><td>地址</td></tr><tr><td>time</td><td>日期</td></tr></tbody></table><p>…</p><hr><h5 id="表单的增强作用"><a href="#表单的增强作用" class="headerlink" title="表单的增强作用"></a>表单的增强作用</h5><ul><li>input元素的Type属性扩展</li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>search</td><td>搜索框</td></tr><tr><td>tel</td><td>电话号码，pattern，maxlength</td></tr><tr><td>url</td><td>输入url地址</td></tr><tr><td>email</td><td>输入电子邮件地址</td></tr><tr><td>date</td><td>输入日期</td></tr><tr><td>color</td><td>输入颜色</td></tr><tr><td>number</td><td>输入数字</td></tr><tr><td>range</td><td>滑块，min，max，step</td></tr></tbody></table><p>…</p><ul><li>input通过属性进行表单验证</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>必填</td></tr><tr><td>pattern</td><td>正则表达式验证表单输入</td></tr><tr><td>title</td><td>校验失败的提示信息</td></tr></tbody></table><p>…</p><ul><li>input元素的其它属性</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>autofocus</td><td>自动获取焦点</td></tr><tr><td>form</td><td>绑定form表单</td></tr><tr><td>placeholder</td><td>占位符</td></tr></tbody></table><p>…</p><ul><li>表单新元素</li></ul><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>progress</td><td>进度条，max，min</td></tr><tr><td>meter</td><td>标尺，max，min，value</td></tr></tbody></table><p>…</p><hr><h5 id="音频视频"><a href="#音频视频" class="headerlink" title="音频视频"></a>音频视频</h5><ul><li>音频-Audio</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;audio controls&gt;</div><div class="line">    &lt;source src=&quot;vincent.ogg&quot;/&gt;</div><div class="line">    &lt;source src=&quot;vincent.mp3&quot;/&gt;</div><div class="line">    你的浏览器不支持Audio标记</div><div class="line">&lt;/audio&gt;</div></pre></td></tr></table></figure><p>audio属性一览表：</p><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>controls</td><td>是否显示标准的音频空间</td></tr><tr><td>autoplay</td><td>是否自动播放</td></tr><tr><td>loop</td><td>是否循环播放</td></tr><tr><td>preload</td><td>预加载方式，none（不预加载）、metadata（只加载元数据）、auto（预加载整个音频）</td></tr><tr><td>volum</td><td>值0-1之间</td></tr></tbody></table><p>…</p><p>常用api：audio.play()，audio.pause()</p><ul><li>视频-Video</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;video width=&quot;400&quot; height=&quot;500&quot; controls&gt;</div><div class="line">    &lt;source src=&quot;dizzy.mp4&quot; type=&quot;video/mp4&quot;/&gt;</div><div class="line">    &lt;source src=&quot;dizzy.webm&quot; type=&quot;video/webm&quot;/&gt;</div><div class="line">    &lt;source src=&quot;dizzy.ogg&quot; type=&quot;video/ogg&quot;/&gt;</div><div class="line">    你的浏览器不支持Video标记</div><div class="line">&lt;/video&gt;</div></pre></td></tr></table></figure><p>常用属性：currentTime（播放时间位置）</p><hr><h5 id="访问你的设备"><a href="#访问你的设备" class="headerlink" title="访问你的设备"></a>访问你的设备</h5><ul><li>定位当前物理位置</li></ul><p>HTML5提供了Geolocation API来构建基于地理位置的应用。</p><p>各浏览器对Geolocation的支持情况一览表：</p><table><thead><tr><th>浏览器</th><th>版本</th><th>只支持HTTPS版本</th></tr></thead><tbody><tr><td>IE</td><td>9+</td><td>-</td></tr><tr><td>Edge</td><td>12+</td><td>-</td></tr><tr><td>Firefox</td><td>3.5+</td><td>-</td></tr><tr><td>Chrome</td><td>5+</td><td>50+</td></tr><tr><td>Safari</td><td>5+</td><td>39+</td></tr><tr><td>ios Safari</td><td>3.2+</td><td>10.2+</td></tr><tr><td>Android Browser</td><td>2.1+</td><td>56+</td></tr><tr><td>Chrome for Android</td><td>57+</td><td>57+</td></tr><tr><td>UC Browser fro Android</td><td>11.4+</td><td>-</td></tr></tbody></table><p>（<em> 出于安全考虑，部分最新的浏览器只允许通过HTTPS协议使用Geolocation API。）<br>（</em> 在开发阶段，127.0.0.1等本地域在两种协议下均可使用。）</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;HTML5-拥有更加丰富的标签，对微数据、微结构有着非常友好的支持，赋予网页更好的意义和结构等等…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>

    <title>ES6-Airbnb JavaScript（ES6）代码规范</title>
    <link href="http://yoursite.com/2017/03/12/ES6-Airbnb%20JavaScript%EF%BC%88ES6%EF%BC%89%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/03/12/ES6-Airbnb JavaScript（ES6）代码规范/</id>
    <published>2017-03-12T08:06:52.000Z</published>
    <updated>2018-11-15T12:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>本文摘自—Airbnb JavaScript（ES6）代码规范。</p></blockquote><a id="more"></a><h2 id="声明变量的新姿势"><a href="#声明变量的新姿势" class="headerlink" title="声明变量的新姿势"></a>声明变量的新姿势</h2><h3 id="用let不用var"><a href="#用let不用var" class="headerlink" title="用let不用var"></a>用let不用var</h3><p>ES6之前我们使用var声明一个变量，但是它有很多弊病：</p><ul><li>无块级作用域变量，很容易声明全局变量。</li><li>变量提升。</li><li>可重复声明。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 10</div><div class="line">a[7](); // 10</div><div class="line">a[8](); // 10</div><div class="line">a[9](); // 10</div></pre></td></tr></table></figure><p>所以，你有什么理由不用let?</p><hr><h3 id="某些场景，const比let更好"><a href="#某些场景，const比let更好" class="headerlink" title="某些场景，const比let更好"></a>某些场景，const比let更好</h3><p>const和let的唯一区别就是，const不可以被更改，所以当声明变量的时候，尤其是在声明容易被更改的全局变量的时候，尽量使用const。</p><ul><li>更好的代码语义化，一眼看到就是常量。</li><li>另一个原因是因为JavaScript 编译器对const的优化要比let好，多使用const，有利于提高程序的运行效率。</li><li>所有的函数都应该设置为常量。</li></ul><hr><h2 id="动态字符串"><a href="#动态字符串" class="headerlink" title="动态字符串"></a>动态字符串</h2><p>不要使用“双引号”，一律用单引号或反引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &quot;foobar&quot;;</div><div class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</div><div class="line"></div><div class="line">// best</div><div class="line">const a = &apos;foobar&apos;;</div><div class="line">const b = `foo$&#123;a&#125;bar`;</div><div class="line">const c = &apos;foobar&apos;;</div></pre></td></tr></table></figure><hr><h2 id="解构赋值的骚操作"><a href="#解构赋值的骚操作" class="headerlink" title="解构赋值的骚操作"></a>解构赋值的骚操作</h2><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>在用到数组成员对变量赋值时，尽量使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line"></div><div class="line">// low</div><div class="line">const first = arr[0];</div><div class="line">const second = arr[1];</div><div class="line"></div><div class="line">// good</div><div class="line">const [first, second] = arr;</div></pre></td></tr></table></figure><hr><h3 id="函数传对象"><a href="#函数传对象" class="headerlink" title="函数传对象"></a>函数传对象</h3><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function getFullName(user) &#123;</div><div class="line">  const firstName = user.firstName;</div><div class="line">  const lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function processInput(input) &#123;</div><div class="line">  return [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function processInput(input) &#123;</div><div class="line">  return &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure><hr><h3 id="关于对象的细节"><a href="#关于对象的细节" class="headerlink" title="关于对象的细节"></a>关于对象的细节</h3><h4 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h4><p>单行定义的对象结尾不要逗号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &#123; k1: v1, k2: v2, &#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; k1: v1, k2: v2 &#125;;</div></pre></td></tr></table></figure><p>多行定义的对象要保留逗号：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><h4 id="一次性初始化完全"><a href="#一次性初始化完全" class="headerlink" title="一次性初始化完全"></a>一次性初始化完全</h4><p>不要声明之后又给对象添加新属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &#123;&#125;;</div><div class="line">a.x = 3;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; x: null &#125;;</div><div class="line">a.x = 3;</div></pre></td></tr></table></figure><p>如果一定非要加请使用Object.assign：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const a = &#123;&#125;;</div><div class="line">Object.assign(a, &#123; x: 3 &#125;);</div></pre></td></tr></table></figure><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/ low</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">&#125;;</div><div class="line">obj[getKey(&apos;enabled&apos;)] = true;</div><div class="line"></div><div class="line">// good</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">[getKey(&apos;enabled&apos;)]: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="在简洁一点"><a href="#在简洁一点" class="headerlink" title="在简洁一点"></a>在简洁一点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var ref = &apos;some value&apos;;</div><div class="line"></div><div class="line">// low</div><div class="line">const atom = &#123;</div><div class="line">  ref: ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue: function (value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const atom = &#123;</div><div class="line">  ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="扩展运算符…"><a href="#扩展运算符…" class="headerlink" title="扩展运算符…"></a>扩展运算符…</h3><p>使用扩展运算符（…）拷贝数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 还在用for i 你就太low了</div><div class="line">const len = items.length;</div><div class="line">const itemsCopy = [];</div><div class="line">let i;</div><div class="line"></div><div class="line">for (i = 0; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// cool !</div><div class="line">const itemsCopy = [...items];</div></pre></td></tr></table></figure><hr><h3 id="Array-form（）"><a href="#Array-form（）" class="headerlink" title="Array.form（）"></a>Array.form（）</h3><p>用 Array.from 方法，将类似数组的对象转为数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</div><div class="line">const nodes = Array.from(foo);</div></pre></td></tr></table></figure><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title="箭头函数=&gt;"></a>箭头函数=&gt;</h3><p>立即执行函数可以写成箭头函数的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(() =&gt; &#123;</div><div class="line">  console.log(&apos;Welcome to the Internet.&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>尽量写箭头函数使你的代码看起来简洁优雅：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">[1, 2, 3].map(function (x) &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// cool !</div><div class="line">[1, 2, 3].map(x =&gt; x * x);</div></pre></td></tr></table></figure><hr><h3 id="别再用arguments（类数组）了！"><a href="#别再用arguments（类数组）了！" class="headerlink" title="别再用arguments（类数组）了！"></a>别再用arguments（类数组）了！</h3><p>使用 rest 运算符（…）代替，rest 运算符可以提供一个真正的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function concatenateAll() &#123;</div><div class="line">  const args = Array.prototype.slice.call(arguments);</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function concatenateAll(...args) &#123;</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="传参时试试设置默认值"><a href="#传参时试试设置默认值" class="headerlink" title="传参时试试设置默认值"></a>传参时试试设置默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function handleThings(opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function handleThings(opts = &#123;&#125;) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Object？Map！"><a href="#Object？Map！" class="headerlink" title="Object？Map！"></a>Object？Map！</h2><h3 id="简单的键值对优先Map"><a href="#简单的键值对优先Map" class="headerlink" title="简单的键值对优先Map"></a>简单的键值对优先Map</h3><p>如果只是简单的key: value结构，建议优先使用Map，因为Map提供方便的遍历机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let map = new Map(arr);</div><div class="line">// 遍历key值</div><div class="line">for (let key of map.keys()) &#123;</div><div class="line">  console.log(key);</div><div class="line">&#125;</div><div class="line">// 遍历value值</div><div class="line">for (let value of map.values()) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line">// 遍历key和value值</div><div class="line">for (let item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="class语法"><a href="#class语法" class="headerlink" title="class语法"></a>class语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function Queue(contents = []) &#123;</div><div class="line">  this._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = function() &#123;</div><div class="line">  const value = this._queue[0];</div><div class="line">  this._queue.splice(0, 1);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class Queue &#123;</div><div class="line">  constructor(contents = []) &#123;</div><div class="line">    this._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    const value = this._queue[0];</div><div class="line">    this._queue.splice(0, 1);</div><div class="line">    return value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><p>使用import取代require，因为Module是Javascript模块的标准写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const moduleA = require(&apos;moduleA&apos;);</div><div class="line">const func1 = moduleA.func1;</div><div class="line">const func2 = moduleA.func2;</div><div class="line"></div><div class="line">// good</div><div class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</div></pre></td></tr></table></figure><hr><h3 id="输出模块"><a href="#输出模块" class="headerlink" title="输出模块"></a>输出模块</h3><p>使用export输出变量，拒绝module.exports:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">class Breadcrumbs extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default Breadcrumbs;</div></pre></td></tr></table></figure><ul><li>输出单个值，使用export default。</li><li>输出多个值，使用export。</li><li>export default与普通的export不要同时使用。</li></ul><hr><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p>模块输出一个函数，首字母应该小写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function getData() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default getData;</div></pre></td></tr></table></figure>]]></content>
=======
    <title>Node-npm常用操作指令</title>
    <link href="http://yoursite.com/2017/06/15/Node-npm%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/06/15/Node-npm常用操作指令/</id>
    <published>2017-06-15T08:06:52.000Z</published>
    <updated>2018-12-11T14:03:41.512Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>NPM，全程Node Package Manager，即Node.js模块管理工具。</p></blockquote><a id="more"></a><h2 id="NPM常用操作指令列表"><a href="#NPM常用操作指令列表" class="headerlink" title="NPM常用操作指令列表"></a>NPM常用操作指令列表</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>npm install</td><td>安装模块</td></tr><tr><td>npm uninstall</td><td>卸载模块</td></tr><tr><td>npm update</td><td>更新模块</td></tr><tr><td>npm outdated</td><td>检查模块是否已经过时</td></tr><tr><td>npm ls</td><td>查看安装的模块</td></tr><tr><td>npm init</td><td>初始化项目的package.json</td></tr><tr><td>npm help</td><td>查看命令的详细帮助</td></tr><tr><td>npm root</td><td>查看包的安装路径</td></tr><tr><td>npm config</td><td>查看npm的配置路径</td></tr><tr><td>npm cache</td><td>管理模块的缓存</td></tr><tr><td>npm start</td><td>启动模块</td></tr><tr><td>npm stop</td><td>停止模块</td></tr><tr><td>npm restart</td><td>重启模块</td></tr><tr><td>npm view</td><td>查看模块的注册信息</td></tr><tr><td>npm version</td><td>查看模块版本</td></tr><tr><td>npm test</td><td>测试模块</td></tr><tr><td>npm adduser</td><td>添加用户</td></tr><tr><td>npm publish</td><td>发布模块</td></tr><tr><td>npm access</td><td>在发布的包上设置访问级别</td></tr></tbody></table>]]></content>
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;

&lt;p&gt;本文摘自—Airbnb JavaScript（ES6）代码规范。&lt;/p&gt;
=======
&lt;p&gt;NPM，全程Node Package Manager，即Node.js模块管理工具。&lt;/p&gt;
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    

=======
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>JS-精心收集的48个JavaScript代码片段</title>
    <link href="http://yoursite.com/2017/05/11/JS-%E7%B2%BE%E5%BF%83%E6%94%B6%E9%9B%86%E7%9A%8448%E4%B8%AAJavaScript%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://yoursite.com/2017/05/11/JS-精心收集的48个JavaScript代码片段/</id>
    <published>2017-05-11T13:06:52.000Z</published>
    <updated>2018-12-11T14:03:41.511Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>该文章摘自Github用户Chalarangelo，目前已在Github上获得了5K多个star，精心收集了多达48个有用的JavaScript代码片段。</p></blockquote><a id="more"></a><h2 id="Anagrams-of-string-带有重复项"><a href="#Anagrams-of-string-带有重复项" class="headerlink" title="Anagrams of string(带有重复项)"></a>Anagrams of string(带有重复项)</h2><p>使用递归，对于给定字符串中的每个字母，为字母创建字谜。使用map()将字母与每部分字谜结合，然后使用reduce()将所有字谜组合到一个数据中，最基本情况是字符串长度等于2或1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const anagrams = str =&gt; &#123;</div><div class="line">    if (str.length &lt;= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];</div><div class="line">    return str.split(&apos;&apos;).reduce((acc, letter, i) =&gt; &#123;</div><div class="line">        acc.concat(anagrams(str.slice(0, 1) + str.slice(i + 1)).map(val =&gt; letter + val))&#125;, []);</div><div class="line">&#125;;</div><div class="line">// anagrams(&apos;abc&apos;) -&gt; [&apos;abc&apos;,&apos;acb&apos;,&apos;bac&apos;,&apos;bca&apos;,&apos;cab&apos;,&apos;cba&apos;]</div></pre></td></tr></table></figure><hr><h2 id="数组平均值"><a href="#数组平均值" class="headerlink" title="数组平均值"></a>数组平均值</h2><p>使用reduce()将每个值添加到累加器，初始值为0，总和除以数组长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const average = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0) / arr.length;</div><div class="line">// avarage([1, 2, 3]) -&gt; 2</div></pre></td></tr></table></figure><hr><h2 id="大写每个单词的首字母"><a href="#大写每个单词的首字母" class="headerlink" title="大写每个单词的首字母"></a>大写每个单词的首字母</h2><p>使用replace()匹配每个单词的第一个字符，并使用toUpperCase()来将其大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const capitalizeEveryWord = str =&gt; str.replace(/\b[a-z]/g, char =&gt; char.toUpperCase());</div><div class="line">// capitalizeEveryWord(&apos;hello world!&apos;) -&gt; &apos;Hello World!&apos;</div></pre></td></tr></table></figure><hr><h2 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h2><p>使用slice (0,1)和toUpperCase ()大写第一个字母，slice (1)获取字符串的其余部分。省略lowerRest参数以保持字符串的其余部分不变，或将其设置为true以转换为小写。(注：这和上一示例不是同一件事情)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const capitalize = (str, lowerRest = false) =&gt; &#123;</div><div class="line">    str.slice(0, 1).toUpperCase() + (lowerRest ? str.slice(1).toLowerCase() : str.slice(1));</div><div class="line">&#125;</div><div class="line">// capitalize(&apos;myName&apos;, true) -&gt; &apos;Myname&apos;</div></pre></td></tr></table></figure><hr><h2 id="检查回文"><a href="#检查回文" class="headerlink" title="检查回文"></a>检查回文</h2><p>将字符串转换为toLowerCase ()，并使用replace ()从中删除非字母的字符串。然后，将其转换为toLowerCase ()，将(‘’)拆分为单独字符，reverse ()，join (‘’)，与原始的非反转字符串进行比较，然后将其转换为toLowerCase ()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const palindrome = str =&gt; &#123;</div><div class="line">    const s = str.toLowerCase().replace(/[\W_]/g, &apos;&apos;);</div><div class="line">    return s === s.split(&apos;&apos;).reverse().join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line">// palindrome(&apos;taco cat&apos;) -&gt; true</div></pre></td></tr></table></figure><hr><h2 id="计算数组中值的出现次数"><a href="#计算数组中值的出现次数" class="headerlink" title="计算数组中值的出现次数"></a>计算数组中值的出现次数</h2><p>每次遇到数组中的特别值时，使用reduce()来递增计数器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const countOccurrences = (arr, value) =&gt; arr.reduce((a, v) =&gt; v === value ? a + 1:a + 0, 0);</div><div class="line">// countOccurrences([1, 1, 2, 1, 2, 3], 1) -&gt; 3</div></pre></td></tr></table></figure><hr><h2 id="当前URL"><a href="#当前URL" class="headerlink" title="当前URL"></a>当前URL</h2><p>使用windows.location.href来获取当前URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const currentUrl = () =&gt; return window.location.href;</div><div class="line">// currentUrl() -&gt; &apos;https://google.com&apos;</div></pre></td></tr></table></figure><hr><h2 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h2><p>使用递归。如果提供的参数(args)数量足够，则调用传递函数f，否则返回一个curried函数f。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const curry = (fn, arity = fn.length, ...args) =&gt; &#123;</div><div class="line">    arity &lt;= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);</div><div class="line">&#125;</div><div class="line">// curry(Math.pow)(2)(10) -&gt; 1024</div><div class="line">// curry(Math.min, 3)(10)(50)(2) -&gt; 2</div></pre></td></tr></table></figure><hr><h2 id="Deep-flatten-array"><a href="#Deep-flatten-array" class="headerlink" title="Deep flatten array"></a>Deep flatten array</h2><p>使用递归，使用reduce()来获取所有不是数组的元素，flatten每个元素都是数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const deepFlatten = arr =&gt; &#123;</div><div class="line">    arr.reduce((a, v) =&gt; a.concat(Array.isArray(v) ? deepFlatten(v) : v), []);</div><div class="line">&#125;</div><div class="line">// deepFlatten([1, [2], [[3], 4], 5]) -&gt; [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure><hr><h2 id="数组之间的区别"><a href="#数组之间的区别" class="headerlink" title="数组之间的区别"></a>数组之间的区别</h2><p>从b创建一个Set，然后在a上使用Array.filter()，只保留b中不包含的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const difference = (a, b) =&gt; &#123;</div><div class="line">    const s = new Set(b);</div><div class="line">    return a.filter(x =&gt; !s.has(x))</div><div class="line">&#125;</div><div class="line">// difference([1, 2, 3], [1, 2]) -&gt; [3]</div></pre></td></tr></table></figure><hr><h2 id="两点之间的距离"><a href="#两点之间的距离" class="headerlink" title="两点之间的距离"></a>两点之间的距离</h2><p>使用Math.hypot()计算两点之间的欧几里德距离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const distance = (x0, y0, x1, y1) =&gt; Math.hypot(x1 - x0, y1 - y0);</div><div class="line">// distance(1,1, 2,3) -&gt; 2.23606797749979</div></pre></td></tr></table></figure><hr><h2 id="可以按数字整除"><a href="#可以按数字整除" class="headerlink" title="可以按数字整除"></a>可以按数字整除</h2><p>使用模运算符(%)来检查余数是否等于0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const isDivisible = (dividend, divisor) =&gt; dividend % divisor === 0;</div><div class="line">// isDivisible(6, 3) -&gt; true</div></pre></td></tr></table></figure><hr><h2 id="转义正则表达式"><a href="#转义正则表达式" class="headerlink" title="转义正则表达式"></a>转义正则表达式</h2><p>使用replace()来转义特殊字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const escapeRegExp = str =&gt; str.replace(/[.*+?^$&#123;&#125;()|[\]\\]/g, &apos;\\$&amp;&apos;);</div><div class="line">// escapeRegExp(&apos;(test)&apos;) -&gt; \\(test\\)</div></pre></td></tr></table></figure><hr><h2 id="偶数或奇数"><a href="#偶数或奇数" class="headerlink" title="偶数或奇数"></a>偶数或奇数</h2><p>使用Math.abs()将逻辑扩展为负数，使用模(%)运算符进行检查。如果数字是偶数，则返回true；如果数字是奇数，则返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const isEven = num =&gt; Math.abs(num) % 2 === 0;</div><div class="line">// isEven(3) -&gt; false</div></pre></td></tr></table></figure><hr><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><p>使用递归。如果n小于或等于1，则返回1。否则返回n和n-1的阶乘的乘积。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const factorial = n =&gt; n &lt;=1 ? 1 : n * factorial(n - 1);</div><div class="line">// factorial(6) -&gt; 720</div></pre></td></tr></table></figure><hr><h2 id="斐波那契数组生成器"><a href="#斐波那契数组生成器" class="headerlink" title="斐波那契数组生成器"></a>斐波那契数组生成器</h2><p>创建一个特定长度的空数组，初始化前两个值(0和1)。使用Array.reduce()向数组中添加值，后面的一个数等于前面两个数相加之和(前两个除外)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const fibonacci = n =&gt;</div><div class="line">  Array(n).fill(0).reduce((acc, val, i) =&gt; acc.concat(i &gt; 1 ? acc[i - 1] + acc[i - 2] : i), []);</div><div class="line">// fibonacci(5) -&gt; [0,1,1,2,3]</div></pre></td></tr></table></figure><hr><h2 id="过滤数组中的非唯一值"><a href="#过滤数组中的非唯一值" class="headerlink" title="过滤数组中的非唯一值"></a>过滤数组中的非唯一值</h2><p>将Array.filter() 用于仅包含唯一值得数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const filterNonUnique = arr =&gt; arr.filter(i =&gt; arr.indexOf(i) === arr.lastIndexOf(i));</div><div class="line">// filterNonUnique([1, 2, 3, 2, 4, 4, 5]) -&gt; [1, 3, 5]</div></pre></td></tr></table></figure><hr><h2 id="Flatten数组"><a href="#Flatten数组" class="headerlink" title="Flatten数组"></a>Flatten数组</h2><p>使用reduce()来获取数组中的所有元素，并使用concat()来使它们flatten。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const flatten = arr =&gt; arr.reduce((a, v) =&gt; a.concat(v), []);</div><div class="line">// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</div></pre></td></tr></table></figure><hr><h2 id="从数组中获取最大值"><a href="#从数组中获取最大值" class="headerlink" title="从数组中获取最大值"></a>从数组中获取最大值</h2><p>用Math.max()与spread运算符(…)结合得到数组中的最大值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const arrayMax = arr =&gt; Math.max(...arr);</div><div class="line">// arrayMax([10, 1, 5]) -&gt; 10</div></pre></td></tr></table></figure><hr><h2 id="从数组中获取最小值"><a href="#从数组中获取最小值" class="headerlink" title="从数组中获取最小值"></a>从数组中获取最小值</h2><p>使用Math.min()与spread运算符(…)结合得到数组中的最小值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const arrayMin = arr =&gt; Math.min(...arr);</div><div class="line">// arrayMin([10, 1, 5]) -&gt; 1</div></pre></td></tr></table></figure><hr><h2 id="获取滚动位置"><a href="#获取滚动位置" class="headerlink" title="获取滚动位置"></a>获取滚动位置</h2><p>如果已定义，请使用pageXOffset和pageYOffset，否则使用scrollLeft和scrollTop，可以省略el来使用window的默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const getScrollPos = (el = window) =&gt;</div><div class="line">  (&#123;x: (el.pageXOffset !== undefined) ? el.pageXOffset : el.scrollLeft,</div><div class="line">    y: (el.pageYOffset !== undefined) ? el.pageYOffset : el.scrollTop&#125;);</div><div class="line">// getScrollPos() -&gt; &#123;x: 0, y: 200&#125;</div></pre></td></tr></table></figure><hr><h2 id="最大公约数-GCD"><a href="#最大公约数-GCD" class="headerlink" title="最大公约数(GCD)"></a>最大公约数(GCD)</h2><p>使用递归。基本情况是当y等于0时。在这种情况下，返回x。否则，返回y的GCD和x / y的其余部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const gcd = (x, y) =&gt; !y ? x : gcd(y, x % y);</div><div class="line">// gcd (8, 36) -&gt; 4</div></pre></td></tr></table></figure><hr><h2 id="Head-of-list"><a href="#Head-of-list" class="headerlink" title="Head of list"></a>Head of list</h2><p>返回ARR[0]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const head = arr =&gt; arr[0];</div><div class="line">// head([1,2,3]) -&gt; 1</div></pre></td></tr></table></figure><hr><h2 id="list初始化"><a href="#list初始化" class="headerlink" title="list初始化"></a>list初始化</h2><p>返回arr.slice(0，-1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const initial = arr =&gt; arr.slice(0, -1);</div><div class="line">// initial([1,2,3]) -&gt; [1,2]</div></pre></td></tr></table></figure><hr><h2 id="用range初始化数组"><a href="#用range初始化数组" class="headerlink" title="用range初始化数组"></a>用range初始化数组</h2><p>使用Array(end-start)创建所需长度的数组，使用map()来填充范围内的所需值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const initializeArrayRange = (end, start = 0) =&gt;</div><div class="line">  Array.apply(null, Array(end - start)).map((v, i) =&gt; i + start);</div><div class="line">// initializeArrayRange(5) -&gt; [0,1,2,3,4]</div></pre></td></tr></table></figure><hr><h2 id="用值初始化数组"><a href="#用值初始化数组" class="headerlink" title="用值初始化数组"></a>用值初始化数组</h2><p>使用Array(n)创建所需长度的数组，fill(v)以填充所需的值，可以忽略value使用默认值0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const initializeArray = (n, value = 0) =&gt; Array(n).fill(value);</div><div class="line">// initializeArray(5, 2) -&gt; [2,2,2,2,2]</div></pre></td></tr></table></figure><hr><h2 id="列表的最后"><a href="#列表的最后" class="headerlink" title="列表的最后"></a>列表的最后</h2><p>返回arr.slice(-1)[0]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const last = arr =&gt; arr.slice(-1)[0];</div><div class="line">// last([1,2,3]) -&gt; 3</div></pre></td></tr></table></figure><hr><h2 id="测试功能所花费的时间"><a href="#测试功能所花费的时间" class="headerlink" title="测试功能所花费的时间"></a>测试功能所花费的时间</h2><p>使用performance.now()获取函数的开始和结束时间，console.log()所花费的时间。第一个参数是函数名，随后的参数传递给函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const timeTaken = callback =&gt; &#123;</div><div class="line">    console.time(&apos;timeTaken&apos;);</div><div class="line">    const r = callback();</div><div class="line">    console.timeEnd(&apos;timeTaken&apos;);</div><div class="line">    return r;</div><div class="line">&#125;;</div><div class="line">// timeTaken(() =&gt; Math.pow(2, 10)) -&gt; 1024</div><div class="line">// (logged): timeTaken: 0.02099609375ms</div></pre></td></tr></table></figure><hr><h2 id="来自键值对的对象"><a href="#来自键值对的对象" class="headerlink" title="来自键值对的对象"></a>来自键值对的对象</h2><p>使用Array.reduce()来创建和组合键值对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const objectFromPairs = arr.reduce((a, v) =&gt; (a[v[0]] =v[1], a), &#123;&#125;);</div><div class="line">// objectFromPairs([[&apos;a&apos;,1],[&apos;b&apos;,2]]) -&gt; &#123;a: 1, b: 2&#125;</div></pre></td></tr></table></figure><hr><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>使用Array.reduce()通过函数传递值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const pipe = (...funcs) =&gt; arg =&gt; funcs.reduce((acc, func) =&gt; func(acc), arg);</div><div class="line">// pipe(btoa, x =&gt; x.toUpperCase())(&quot;Test&quot;) -&gt; &quot;VGVZDA==&quot;</div></pre></td></tr></table></figure><hr><h2 id="Powerset"><a href="#Powerset" class="headerlink" title="Powerset"></a>Powerset</h2><p>使用reduce()与map()结合来遍历元素，并将其组合成包含所有组合的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const powerset = arr =&gt; arr.reduce((a, v) =&gt; a.concat(a.map(r =&gt; [v].concat(r))), [[]]);</div><div class="line">// powerset([1,2]) -&gt; [[], [1], [2], [2,1]]</div></pre></td></tr></table></figure><hr><h2 id="范围内的随机整数"><a href="#范围内的随机整数" class="headerlink" title="范围内的随机整数"></a>范围内的随机整数</h2><p>使用Math.random()生成一个随机数并将其映射到所需的范围，使用Math.floor()使其成为一个整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const randomIntegerInRange = (min, max) =&gt; Math.floor(Math.random() * (max - min + 1)) + min;</div><div class="line">// randomIntegerInRange(0, 5) -&gt; 2</div></pre></td></tr></table></figure><hr><h2 id="范围内的随机数"><a href="#范围内的随机数" class="headerlink" title="范围内的随机数"></a>范围内的随机数</h2><p>使用Math.random()生成一个随机值，使用乘法将其映射到所需的范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const randomInRange = (min, max) =&gt; Math.random() * (max - min) + min;</div><div class="line">// randomInRange(2,10) -&gt; 6.0211363285087005</div></pre></td></tr></table></figure><hr><h2 id="随机化数组的顺序"><a href="#随机化数组的顺序" class="headerlink" title="随机化数组的顺序"></a>随机化数组的顺序</h2><p>使用sort()重新排序元素，使用Math.random()来随机排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const shuffle = arr =&gt; arr.sort(() =&gt; Math.random() - 0.5);</div><div class="line">// shuffle([1,2,3]) -&gt; [2,3,1]</div></pre></td></tr></table></figure><hr><h2 id="重定向到URL"><a href="#重定向到URL" class="headerlink" title="重定向到URL"></a>重定向到URL</h2><p>使用window.location.href或window.location.replace()重定向到url。传递第二个参数来模拟链接点击(true-default)或HTTP重定向(false)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const redirect = (url, asLink = true) =&gt; asLink ? window.location.href = url : window.location.replace(url);</div><div class="line">// redirect(&apos;https://google.com&apos;)</div></pre></td></tr></table></figure><hr><h2 id="反转一个字符串"><a href="#反转一个字符串" class="headerlink" title="反转一个字符串"></a>反转一个字符串</h2><p>使用数组解构和Array.reverse()来颠倒字符串中的字符顺序。合并字符以使用join(‘’)获取字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const reverseString = str =&gt; [...str].reverse().join(&apos;&apos;);</div><div class="line">// reverseString(&apos;foobar&apos;) -&gt; &apos;raboof&apos;</div></pre></td></tr></table></figure><hr><h2 id="RGB到十六进制"><a href="#RGB到十六进制" class="headerlink" title="RGB到十六进制"></a>RGB到十六进制</h2><p>使用按位左移运算符(&lt;&lt;)和toString(16)，然后padStart(6，“0”)将给定的RGB参数转换为十六进制字符串以获得6位十六进制值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const rgbToHex = (r, g, b) =&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, &apos;0&apos;);</div><div class="line">// rgbToHex(255, 165, 1) -&gt; &apos;ffa501&apos;</div></pre></td></tr></table></figure><hr><h2 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h2><p>使用document.documentElement.scrollTop或document.body.scrollTop获取到顶部的距离。<br>从顶部滚动一小部分距离。</p><p>使用window.requestAnimationFrame()来滚动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const scrollToTop = _ =&gt; &#123;</div><div class="line">const c = document.documentElement.scrollTop || document.body.scrollTop;</div><div class="line">  if (c &gt; 0) &#123;</div><div class="line">    window.requestAnimationFrame(scrollToTop);</div><div class="line">    window.scrollTo(0, c - c / 8);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">// scrollToTop()</div></pre></td></tr></table></figure><hr><h2 id="随机数组值"><a href="#随机数组值" class="headerlink" title="随机数组值"></a>随机数组值</h2><p>使用Array.map()和Math.random()创建一个随机值的数组。使用Array.sort()根据随机值对原始数组的元素进行排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const shuffle = arr =&gt; &#123;</div><div class="line">let r = arr.map(Math.random);</div><div class="line">return arr.sort((a,b) =&gt; r[a] - r[b]);</div><div class="line">&#125;</div><div class="line">// shuffle([1, 2, 3]) -&gt; [2, 1, 3]</div></pre></td></tr></table></figure><hr><h2 id="数组之间的相似性"><a href="#数组之间的相似性" class="headerlink" title="数组之间的相似性"></a>数组之间的相似性</h2><p>使用filter()移除不是values的一部分值，使用includes()确定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const similarity = (arr, values) =&gt; arr.filter(v =&gt; values.includes(v));</div><div class="line">// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</div></pre></td></tr></table></figure><hr><h2 id="按字符串排序-按字母顺序排序"><a href="#按字符串排序-按字母顺序排序" class="headerlink" title="按字符串排序(按字母顺序排序)"></a>按字符串排序(按字母顺序排序)</h2><p>使用split(‘’)分割字符串，sort()使用localeCompare()，使用join(‘’)重新组合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const sortCharactersInString = str =&gt; str.split(&apos;&apos;).sort((a, b) =&gt; a.localeCompare(b)).join(&apos;&apos;);</div><div class="line">// sortCharactersInString(&apos;cabbage&apos;) -&gt; &apos;aabbceg&apos;</div></pre></td></tr></table></figure><hr><h2 id="数组总和"><a href="#数组总和" class="headerlink" title="数组总和"></a>数组总和</h2><p>使用reduce()将每个值添加到累加器，初始化值为0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const sum = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0);</div><div class="line">// sum([1,2,3,4]) -&gt; 10</div></pre></td></tr></table></figure><hr><h2 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h2><p>使用数组解构来交换两个变量之间的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[varA, varB] = [varB, varA]</div><div class="line">// [x, y] = [y, x]</div></pre></td></tr></table></figure><hr><h2 id="列表的tail"><a href="#列表的tail" class="headerlink" title="列表的tail"></a>列表的tail</h2><p>返回arr.slice(1)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const tail = arr =&gt; arr.length &gt; 1 ? arr.slice(1) : arr;</div><div class="line">// tail([1,2,3]) -&gt; [2,3]</div><div class="line">// tail([1]) -&gt; [1]</div></pre></td></tr></table></figure><hr><h2 id="数组唯一值"><a href="#数组唯一值" class="headerlink" title="数组唯一值"></a>数组唯一值</h2><p>使用ES6 Set和…rest操作符去掉所有重复值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const unique = arr =&gt; [...new Set(arr)];</div><div class="line">// unique([1, 2, 2, 3, 4, 4, 5]) -&gt; [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure><hr><h2 id="URL参数"><a href="#URL参数" class="headerlink" title="URL参数"></a>URL参数</h2><p>使用match()与适当的正则表达式来获得所有键值对，适当的map()。使用Object.assign()和spread运算符(…)将所有键值对组合到一个对象中，将location.search()作为参数传递给当前url。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const getUrlParameters = url =&gt; url.match(/([^?=&amp;]+)(=([^&amp;]*))/g).reduce((a, v) =&gt; (a[v.slice(0, v.indexOf(&apos;=&apos;))] = v.slice(v.indexOf(&apos;=&apos;) + 1), a), &#123;&#125;);</div><div class="line">// getUrlParameters(&apos;http://url.com/page?name=Adam&amp;surname=Smith&apos;) -&gt; &#123;name: &apos;Adam&apos;, surname: &apos;Smith&apos;&#125;</div></pre></td></tr></table></figure><hr><h2 id="UUID生成器"><a href="#UUID生成器" class="headerlink" title="UUID生成器"></a>UUID生成器</h2><p>使用crypto API生成符合RFC4122版本4的UUID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const uuid = _ =&gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =&gt; (c ^ crypto.getRandomValues(new Uint8Array(1))[0] &amp; 15 &gt;&gt; c / 4).toString(16));</div><div class="line">// uuid() -&gt; &apos;7982fcfe-5721-4632-bede-6000885be57d&apos;</div></pre></td></tr></table></figure><hr><h2 id="验证数字"><a href="#验证数字" class="headerlink" title="验证数字"></a>验证数字</h2><p>使用！isNaN和parseFloat（）来检查参数是否是一个数字，使用isFinite（）来检查数字是否是有限的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const validateNumber = n =&gt; !isNaN(parseFloat(n)) &amp;&amp; isFinite(n) &amp;&amp; Number(n) == n;</div><div class="line">// validateNumber(&apos;10&apos;) -&gt; true</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;该文章摘自Github用户Chalarangelo，目前已在Github上获得了5K多个star，精心收集了多达48个有用的JavaScript代码片段。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Airbnb JavaScript（ES6）代码规范</title>
    <link href="http://yoursite.com/2017/03/12/ES6-Airbnb%20JavaScript%EF%BC%88ES6%EF%BC%89%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/03/12/ES6-Airbnb JavaScript（ES6）代码规范/</id>
    <published>2017-03-12T08:06:52.000Z</published>
    <updated>2018-11-15T12:39:23.826Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>本文摘自—Airbnb JavaScript（ES6）代码规范。</p></blockquote><a id="more"></a><h2 id="声明变量的新姿势"><a href="#声明变量的新姿势" class="headerlink" title="声明变量的新姿势"></a>声明变量的新姿势</h2><h3 id="用let不用var"><a href="#用let不用var" class="headerlink" title="用let不用var"></a>用let不用var</h3><p>ES6之前我们使用var声明一个变量，但是它有很多弊病：</p><ul><li>无块级作用域变量，很容易声明全局变量。</li><li>变量提升。</li><li>可重复声明。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 10</div><div class="line">a[7](); // 10</div><div class="line">a[8](); // 10</div><div class="line">a[9](); // 10</div></pre></td></tr></table></figure><p>所以，你有什么理由不用let?</p><hr><h3 id="某些场景，const比let更好"><a href="#某些场景，const比let更好" class="headerlink" title="某些场景，const比let更好"></a>某些场景，const比let更好</h3><p>const和let的唯一区别就是，const不可以被更改，所以当声明变量的时候，尤其是在声明容易被更改的全局变量的时候，尽量使用const。</p><ul><li>更好的代码语义化，一眼看到就是常量。</li><li>另一个原因是因为JavaScript 编译器对const的优化要比let好，多使用const，有利于提高程序的运行效率。</li><li>所有的函数都应该设置为常量。</li></ul><hr><h2 id="动态字符串"><a href="#动态字符串" class="headerlink" title="动态字符串"></a>动态字符串</h2><p>不要使用“双引号”，一律用单引号或反引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &quot;foobar&quot;;</div><div class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</div><div class="line"></div><div class="line">// best</div><div class="line">const a = &apos;foobar&apos;;</div><div class="line">const b = `foo$&#123;a&#125;bar`;</div><div class="line">const c = &apos;foobar&apos;;</div></pre></td></tr></table></figure><hr><h2 id="解构赋值的骚操作"><a href="#解构赋值的骚操作" class="headerlink" title="解构赋值的骚操作"></a>解构赋值的骚操作</h2><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>在用到数组成员对变量赋值时，尽量使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line"></div><div class="line">// low</div><div class="line">const first = arr[0];</div><div class="line">const second = arr[1];</div><div class="line"></div><div class="line">// good</div><div class="line">const [first, second] = arr;</div></pre></td></tr></table></figure><hr><h3 id="函数传对象"><a href="#函数传对象" class="headerlink" title="函数传对象"></a>函数传对象</h3><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function getFullName(user) &#123;</div><div class="line">  const firstName = user.firstName;</div><div class="line">  const lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function processInput(input) &#123;</div><div class="line">  return [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function processInput(input) &#123;</div><div class="line">  return &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure><hr><h3 id="关于对象的细节"><a href="#关于对象的细节" class="headerlink" title="关于对象的细节"></a>关于对象的细节</h3><h4 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h4><p>单行定义的对象结尾不要逗号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &#123; k1: v1, k2: v2, &#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; k1: v1, k2: v2 &#125;;</div></pre></td></tr></table></figure><p>多行定义的对象要保留逗号：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><h4 id="一次性初始化完全"><a href="#一次性初始化完全" class="headerlink" title="一次性初始化完全"></a>一次性初始化完全</h4><p>不要声明之后又给对象添加新属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &#123;&#125;;</div><div class="line">a.x = 3;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; x: null &#125;;</div><div class="line">a.x = 3;</div></pre></td></tr></table></figure><p>如果一定非要加请使用Object.assign：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const a = &#123;&#125;;</div><div class="line">Object.assign(a, &#123; x: 3 &#125;);</div></pre></td></tr></table></figure><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/ low</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">&#125;;</div><div class="line">obj[getKey(&apos;enabled&apos;)] = true;</div><div class="line"></div><div class="line">// good</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">[getKey(&apos;enabled&apos;)]: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="在简洁一点"><a href="#在简洁一点" class="headerlink" title="在简洁一点"></a>在简洁一点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var ref = &apos;some value&apos;;</div><div class="line"></div><div class="line">// low</div><div class="line">const atom = &#123;</div><div class="line">  ref: ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue: function (value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const atom = &#123;</div><div class="line">  ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="扩展运算符…"><a href="#扩展运算符…" class="headerlink" title="扩展运算符…"></a>扩展运算符…</h3><p>使用扩展运算符（…）拷贝数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 还在用for i 你就太low了</div><div class="line">const len = items.length;</div><div class="line">const itemsCopy = [];</div><div class="line">let i;</div><div class="line"></div><div class="line">for (i = 0; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// cool !</div><div class="line">const itemsCopy = [...items];</div></pre></td></tr></table></figure><hr><h3 id="Array-form（）"><a href="#Array-form（）" class="headerlink" title="Array.form（）"></a>Array.form（）</h3><p>用 Array.from 方法，将类似数组的对象转为数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</div><div class="line">const nodes = Array.from(foo);</div></pre></td></tr></table></figure><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title="箭头函数=&gt;"></a>箭头函数=&gt;</h3><p>立即执行函数可以写成箭头函数的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(() =&gt; &#123;</div><div class="line">  console.log(&apos;Welcome to the Internet.&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>尽量写箭头函数使你的代码看起来简洁优雅：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">[1, 2, 3].map(function (x) &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// cool !</div><div class="line">[1, 2, 3].map(x =&gt; x * x);</div></pre></td></tr></table></figure><hr><h3 id="别再用arguments（类数组）了！"><a href="#别再用arguments（类数组）了！" class="headerlink" title="别再用arguments（类数组）了！"></a>别再用arguments（类数组）了！</h3><p>使用 rest 运算符（…）代替，rest 运算符可以提供一个真正的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function concatenateAll() &#123;</div><div class="line">  const args = Array.prototype.slice.call(arguments);</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function concatenateAll(...args) &#123;</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="传参时试试设置默认值"><a href="#传参时试试设置默认值" class="headerlink" title="传参时试试设置默认值"></a>传参时试试设置默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function handleThings(opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function handleThings(opts = &#123;&#125;) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Object？Map！"><a href="#Object？Map！" class="headerlink" title="Object？Map！"></a>Object？Map！</h2><h3 id="简单的键值对优先Map"><a href="#简单的键值对优先Map" class="headerlink" title="简单的键值对优先Map"></a>简单的键值对优先Map</h3><p>如果只是简单的key: value结构，建议优先使用Map，因为Map提供方便的遍历机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let map = new Map(arr);</div><div class="line">// 遍历key值</div><div class="line">for (let key of map.keys()) &#123;</div><div class="line">  console.log(key);</div><div class="line">&#125;</div><div class="line">// 遍历value值</div><div class="line">for (let value of map.values()) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line">// 遍历key和value值</div><div class="line">for (let item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="class语法"><a href="#class语法" class="headerlink" title="class语法"></a>class语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function Queue(contents = []) &#123;</div><div class="line">  this._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = function() &#123;</div><div class="line">  const value = this._queue[0];</div><div class="line">  this._queue.splice(0, 1);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class Queue &#123;</div><div class="line">  constructor(contents = []) &#123;</div><div class="line">    this._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    const value = this._queue[0];</div><div class="line">    this._queue.splice(0, 1);</div><div class="line">    return value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><p>使用import取代require，因为Module是Javascript模块的标准写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const moduleA = require(&apos;moduleA&apos;);</div><div class="line">const func1 = moduleA.func1;</div><div class="line">const func2 = moduleA.func2;</div><div class="line"></div><div class="line">// good</div><div class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</div></pre></td></tr></table></figure><hr><h3 id="输出模块"><a href="#输出模块" class="headerlink" title="输出模块"></a>输出模块</h3><p>使用export输出变量，拒绝module.exports:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">class Breadcrumbs extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default Breadcrumbs;</div></pre></td></tr></table></figure><ul><li>输出单个值，使用export default。</li><li>输出多个值，使用export。</li><li>export default与普通的export不要同时使用。</li></ul><hr><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p>模块输出一个函数，首字母应该小写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function getData() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default getData;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;本文摘自—Airbnb JavaScript（ES6）代码规范。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
>>>>>>> 47275d326d6e1de1fdb683a794ba30a2e53cea8a
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
