<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W | 个人博客 | web前端</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-25T12:13:31.897Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangxiaobai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue移动端自动转换px为rem(postcss-pxtorem)</title>
    <link href="http://yoursite.com/2018/10/25/Vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2px%E4%B8%BArem(postcss-pxtorem)/"/>
    <id>http://yoursite.com/2018/10/25/Vue移动端自动转换px为rem(postcss-pxtorem)/</id>
    <published>2018-10-25T09:41:00.000Z</published>
    <updated>2018-10-25T12:13:31.897Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>前端在开发移动端webapp还原设计稿的重要性母庸质疑，目前来说应用最多的应该是rem。然而很多前端开发依然选择要么自己去计算rem值，要么依靠编辑器安装插件转换。</p></blockquote><a id="more"></a><p>其实，通过一系列的配置后，我们在开发中可以直接使用设计图的尺寸，它为我们自动编译，转换成rem。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><hr><ul><li>vue-cli@3.0: 脚手架工具创建项目</li><li>postcss-pxtorem: 转换px为rem的依赖包</li></ul><p>只需以下几步，就可以愉快地开发了😊。</p><hr><h3 id="创建rem-js文件"><a href="#创建rem-js文件" class="headerlink" title="创建rem.js文件"></a>创建rem.js文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 基准大小</div><div class="line">const baseSize = 32</div><div class="line">// 设置 rem 函数</div><div class="line">function setRem() &#123;</div><div class="line">  // 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。</div><div class="line">  const scale = document.documentElement.clientWidth / 750</div><div class="line">  // 设置页面根节点字体大小</div><div class="line">  document.documentElement.style.fontSize = baseSize * Math.min(scale, 2) + &apos;px&apos;</div><div class="line">&#125;</div><div class="line">// 初始化</div><div class="line">setRem()</div><div class="line">// 改变窗口大小时重新设置 rem</div><div class="line">window.onresize = function() &#123;</div><div class="line">  setRem()</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="main-js中引入rem-js"><a href="#main-js中引入rem-js" class="headerlink" title="main.js中引入rem.js"></a>main.js中引入rem.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &apos;./utils/rem&apos;</div></pre></td></tr></table></figure><p>引入文件后，可以看到页面的html节点，被自动添加 font-size</p><hr><h3 id="安装并配置postcss-pxtoren"><a href="#安装并配置postcss-pxtoren" class="headerlink" title="安装并配置postcss-pxtoren"></a>安装并配置postcss-pxtoren</h3><h4 id="安装postcss-pxtorem"><a href="#安装postcss-pxtorem" class="headerlink" title="安装postcss-pxtorem"></a>安装postcss-pxtorem</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install postcss-pxtorem -D</div></pre></td></tr></table></figure><hr><h4 id="修改跟目录postcss-config-js"><a href="#修改跟目录postcss-config-js" class="headerlink" title="修改跟目录postcss.config.js"></a>修改跟目录postcss.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  plugins: &#123;</div><div class="line">    autoprefixer: &#123;</div><div class="line">      browsers: [&apos;Android &gt;= 4.0&apos;, &apos;iOS &gt;= 7&apos;]</div><div class="line">    &#125;,</div><div class="line">    &apos;postcss-pxtorem&apos;: &#123;</div><div class="line">      rootValue: 32, // The root element font size</div><div class="line">      propList: [&apos;*&apos;], // The properties that can change from px to rem.</div><div class="line">      minPixelValue: 20, // Set the minimum pixel value to replace.</div><div class="line">      selectorBlackList: [</div><div class="line">        &apos;.weui-&apos;,</div><div class="line">        &apos;.ig-&apos;,</div><div class="line">        &apos;.vux-&apos;,</div><div class="line">        &apos;.scroller-&apos;,</div><div class="line">        &apos;.dp-&apos;,</div><div class="line">        &apos;.mt-&apos;,</div><div class="line">        &apos;.mint-&apos;,</div><div class="line">        &apos;.range&apos;</div><div class="line">      ] //  The selectors to ignore and leave as px.</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>按上述完成配置后，即可在开发中直接使用px单位开发。</p><p>举个🌰：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line"> width: 750px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>转换后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line"> width: 23.4375rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前端在开发移动端webapp还原设计稿的重要性母庸质疑，目前来说应用最多的应该是rem。然而很多前端开发依然选择要么自己去计算rem值，要么依靠编辑器安装插件转换。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Node-npm常用操作指令</title>
    <link href="http://yoursite.com/2017/03/15/Node-npm%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/03/15/Node-npm常用操作指令/</id>
    <published>2017-03-15T08:06:52.000Z</published>
    <updated>2018-11-15T12:39:57.061Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>NPM，全程Node Package Manager，即Node.js模块管理工具。</p></blockquote><a id="more"></a><h2 id="NPM常用操作指令列表"><a href="#NPM常用操作指令列表" class="headerlink" title="NPM常用操作指令列表"></a>NPM常用操作指令列表</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>npm install</td><td>安装模块</td></tr><tr><td>npm uninstall</td><td>卸载模块</td></tr><tr><td>npm update</td><td>更新模块</td></tr><tr><td>npm outdated</td><td>检查模块是否已经过时</td></tr><tr><td>npm ls</td><td>查看安装的模块</td></tr><tr><td>npm init</td><td>初始化项目的package.json</td></tr><tr><td>npm help</td><td>查看命令的详细帮助</td></tr><tr><td>npm root</td><td>查看包的安装路径</td></tr><tr><td>npm config</td><td>查看npm的配置路径</td></tr><tr><td>npm cache</td><td>管理模块的缓存</td></tr><tr><td>npm start</td><td>启动模块</td></tr><tr><td>npm stop</td><td>停止模块</td></tr><tr><td>npm restart</td><td>重启模块</td></tr><tr><td>npm view</td><td>查看模块的注册信息</td></tr><tr><td>npm version</td><td>查看模块版本</td></tr><tr><td>npm test</td><td>测试模块</td></tr><tr><td>npm adduser</td><td>添加用户</td></tr><tr><td>npm publish</td><td>发布模块</td></tr><tr><td>npm access</td><td>在发布的包上设置访问级别</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;NPM，全程Node Package Manager，即Node.js模块管理工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>ES6-如何写好.babelrc?</title>
    <link href="http://yoursite.com/2017/03/14/ES6-%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD.babelrc%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/03/14/ES6-如何写好.babelrc？/</id>
    <published>2017-03-14T06:06:52.000Z</published>
    <updated>2018-11-15T12:49:11.611Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>Babel-The compiler for writing next generation Javascript. 下一代JavaScript 语法的编译器。</p></blockquote><a id="more"></a><h2 id="什么是Babel？"><a href="#什么是Babel？" class="headerlink" title="什么是Babel？"></a>什么是Babel？</h2><p>作为前端开发，由于浏览器的版本和兼容性等问题，很多JS的新的方法都不能使用，等到可以大胆使用的时候，可能已经过去很久。Babel就因此而生，它可以让你放心使用大部分的JS的新的标准的方法，然后编译成兼容绝大多数的主流浏览器的代码。</p><p>在升级到Babel6.X版本之后，所有的插件都是可插拔的，这也意味着你安装了Babel之后，是不能工作的，需要配置对应的.babelrc文件才能发挥完整的作用。</p><hr><h2 id="预设（presets）"><a href="#预设（presets）" class="headerlink" title="预设（presets）"></a>预设（presets）</h2><p>使用时需要安装对应的插件，对应babel-preset-xxx。例如下配置，需要npm i babel-preset-es2015。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [&quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [&quot;env&quot;, options]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="新增选项，有以下options选择。"><a href="#新增选项，有以下options选择。" class="headerlink" title="新增选项，有以下options选择。"></a>新增选项，有以下options选择。</h4><h5 id="targets-string-number-，默认"><a href="#targets-string-number-，默认" class="headerlink" title="targets: {[string]: number}，默认{}"></a>targets: {[string]: number}，默认{}</h5><p>需要支持的环境，可选例如：chrome，edge，firefox，safari等，甚至可以指定版本，如node：6.5。也使用node：current代表使用当前的版本。</p><h5 id="browsers-array-string，默认"><a href="#browsers-array-string，默认" class="headerlink" title="browsers: array | string，默认[]"></a>browsers: array | string，默认[]</h5><p>浏览器列表，使用的是browserslist，可选例如：last 2 versions, &gt; 5%。</p><h5 id="loose-boolean，默认false"><a href="#loose-boolean，默认false" class="headerlink" title="loose: boolean，默认false"></a>loose: boolean，默认false</h5><p>是否使用宽松模式，如果设置为true，plugins里的插件如果允许，都会采用宽松模式。</p><h5 id="debug-boolean，默认false"><a href="#debug-boolean，默认false" class="headerlink" title="debug: boolean，默认false"></a>debug: boolean，默认false</h5><p>编译是否会去掉console.log。</p><h5 id="whitelist-array，默认"><a href="#whitelist-array，默认" class="headerlink" title="whitelist: array，默认[]"></a>whitelist: array，默认[]</h5><p>设置一直引入的plugins列表。<br>es2015/es2016/es2017/latest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [&quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h6 id="es2015"><a href="#es2015" class="headerlink" title="es2015"></a>es2015</h6><p>使用es2015，简单翻译如下，更多细节可以参看文档。</p><ul><li><p>check-es2015-constants // 检验const常量是否被重新赋值。</p></li><li><p>transform-es2015-arrow-functions // 编译箭头函数。</p></li><li><p>transform-es2015-block-scoped-functions // 函数声明在作用域内。</p></li><li><p>transform-es2015-block-scoping // 编译const和let。</p></li><li><p>transform-es2015-classes // 编译class。</p></li><li><p>transform-es2015-computed-properties // 编译计算对象属性。</p></li><li><p>transform-es2015-destructuring // 编译解构赋值。</p></li><li><p>transform-es2015-duplicate-keys // 编译对象中重复的key，其实是转换成计算对象属性。</p></li><li><p>transform-es2015-for-of // 编译for…of。</p></li><li><p>transform-es2015-function-name // 将function.name语义应用于所有的function。</p></li><li><p>transform-es2015-literals // 编译整数(8进制/16进制)和unicode。</p></li><li><p>transform-es2015-modules-commonjs // 将modules编译成commonjs。</p></li><li><p>transform-es2015-object-super // 编译super。</p></li><li><p>transform-es2015-parameters // 编译参数，包括默认参数，不定参数和解构参数。</p></li><li><p>transform-es2015-shorthand-properties // 编译属性缩写。</p></li><li><p>transform-es2015-spread // 编译展开运算符。</p></li><li><p>transform-es2015-sticky-regex // 正则添加sticky属性。</p></li><li><p>transform-es2015-template-literals // 编译模版字符串。</p></li><li><p>transform-es2015-typeof-symbol // 编译Symbol类型。</p></li><li><p>transform-es2015-unicode-regex // 正则添加unicode模式。</p></li><li><p>transform-regenerator // 编译generator函数。</p></li></ul><hr><h6 id="es2016"><a href="#es2016" class="headerlink" title="es2016"></a>es2016</h6><p>使用es2016，更多细节可以参看文档。</p><ul><li>transform-exponentiation-operator // 编译幂运算符</li></ul><hr><h6 id="es2017"><a href="#es2017" class="headerlink" title="es2017"></a>es2017</h6><p>使用es2017的相关插件，更多细节可以参看文档。</p><ul><li><p>syntax-trailing-function-commas // function最后一个参数允许使用逗号。</p></li><li><p>transform-async-to-generator // 把async函数转化成generator函数。</p></li></ul><hr><h6 id="latest"><a href="#latest" class="headerlink" title="latest"></a>latest</h6><p>latest是一个特殊的presets，包括了es2015，es2016，es2017的插件（目前为止，以后有es2018也会包括进去）。</p><hr><h6 id="react"><a href="#react" class="headerlink" title="react"></a>react</h6><p>react是一个比较特别的官方推荐的presets，大概是因为比较火吧。加入了flow，jsx等语法，具体可以看文档。</p><hr><h6 id="stage-x-stage-0-1-2-3-4"><a href="#stage-x-stage-0-1-2-3-4" class="headerlink" title="stage-x(stage-0/1/2/3/4)"></a>stage-x(stage-0/1/2/3/4)</h6><p>stage-x和上面的es2015等有些类似，但是它是按照JavaScript的提案阶段区分的，一共有5个阶段。而数字越小，阶段越靠后，存在依赖关系。也就是说stage-0是包括stage-1的，以此类推。</p><hr><h6 id="stage-4"><a href="#stage-4" class="headerlink" title="stage-4"></a>stage-4</h6><p>已完成的提案，与年度发布的release有关，包含2015年到明年正式发布的内容。例如，现在是2016年，stage-4应该是包括es2015，es2016，es2017。经过测试，babel-preset-stage-4这个npm包是不存在的，如果你单纯的需要stage-4的相关方法，需要引入es2015~es2017的presets。</p><hr><h6 id="stage-3"><a href="#stage-3" class="headerlink" title="stage-3"></a>stage-3</h6><p>除了stage-4的内容，还包括以下插件，更多细节请看文档。</p><ul><li><p>transform-object-rest-spread // 编译对象的解构赋值和不定参数。</p></li><li><p>transform-async-generator-functions // 将async generator function和for await编译为es2015的generator。</p></li></ul><hr><h6 id="stage-2"><a href="#stage-2" class="headerlink" title="stage-2"></a>stage-2</h6><p>除了stage-3的内容，还包括以下插件，更多细节请看文档。</p><ul><li>transform-class-properties // 编译静态属性(es2015)和属性初始化语法声明的属性(es2016)。</li></ul><hr><h6 id="stage-1"><a href="#stage-1" class="headerlink" title="stage-1"></a>stage-1</h6><p>除了stage-2的内容，还包括以下插件，更多细节请看文档。</p><ul><li><p>transform-class-constructor-call // 编译class中的constructor，在Babel7中会被移除。</p></li><li><p>transform-export-extensions // 编译额外的export语法，如export * as ns from “mod”。</p></li></ul><hr><h6 id="stage-0"><a href="#stage-0" class="headerlink" title="stage-0"></a>stage-0</h6><p>除了stage-1的内容，还包括以下插件，更多细节请看文档。</p><ul><li><p>transform-do-expressions // 编译do表达式。</p></li><li><p>transform-function-bind // 编译bind运算符，也就是::。</p></li></ul><hr><h2 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h2><p>其实看了上面的应该也明白了，presets，也就是一堆plugins的预设，起到方便的作用。如果你不采用presets，完全可以单独引入某个功能，比如以下的设置就会引入编译箭头函数的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;plugins&quot;: [&quot;transform-es2015-arrow-functions&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>还有一些方法是presets中不提供的，这时候就需要单独引入了，介绍几个常见的插件。</p><h3 id="transform-runtime"><a href="#transform-runtime" class="headerlink" title="transform-runtime"></a>transform-runtime</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;plugins&quot;: [&quot;transform-es2015-arrow-functions&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>主要有以下options选择。</p><ul><li><p>helpers: boolean // 默认为true，使用babel的helper函数。</p></li><li><p>polyfill: boolean // 默认为true，使用babel的polyfill，但不能完全取代bebel-polyfill。</p></li><li><p>regenerator: boolean // 默认为true，使用babel的regenerator。</p></li><li><p>noduleName: string // 默认babel-runtime，使用对应module处理。</p></li></ul><p>options一般不用自己设置，使用默认的即可。这个插件的作用主要是：</p><ul><li><p>解决编译中产生的重复的工具函数，减小代码体积</p></li><li><p>非实例方法的poly-fill，如Object.assign，但是实例方法不支持，如”foobar”.includes(“foo”)，这时候需要单独引入babel-polyfill。</p></li></ul><p>更多细节参见文档。</p><hr><h3 id="transform-remove-console"><a href="#transform-remove-console" class="headerlink" title="transform-remove-console"></a>transform-remove-console</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;plugins&quot;: [&quot;transform-remove-console&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用这个插件，编译后的代码都会移除console.*，妈妈再也不用担心线上代码有多余的console.log了。当然很多时候，我们如果使用webpack，会在webpack中配置。</p><p>这也告诉我们，Babel不仅仅是编译代码的工具，还能对代码进行压缩，也许有一天，你不再需要代码压缩的插件了，因为你有了Babel！</p><hr><h2 id="自定义预设或插件"><a href="#自定义预设或插件" class="headerlink" title="自定义预设或插件"></a>自定义预设或插件</h2><p>Babel支持自定义的预设(presets)或插件(plugins)。如果你的插件在npm上，可以直接采用这种方式”plugins”: [“babel-plugin-myPlugin”]，当然，你也可以缩写，它和”plugins”: [“myPlugin”]是等价的。此外，你还可以采用本地的相对路径引入插件，比如”plugins”: [“./node_modules/asdf/plugin”]。</p><p>presets同理。</p><hr><h2 id="plugins-presets排序"><a href="#plugins-presets排序" class="headerlink" title="plugins/presets排序"></a>plugins/presets排序</h2><p>也许你会问，plugins和presets编译，也许会有相同的功能，或者有联系的功能，按照怎么的顺序进行编译？答案是会按照一定的顺序。</p><ul><li><p>具体而言，plugins优先于presets进行编译。</p></li><li><p>plugins按照数组的index增序(从数组第一个到最后一个)进行编译。</p></li><li><p>presets按照数组的index倒序(从数组最后一个到第一个)进行编译。因为作者认为大部分会把presets写成[“es2015”, “stage-0”]。具体细节可以看这个。</p></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    [<span class="string">"env"</span>, &#123;</div><div class="line">      <span class="string">"modules"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="string">"targets"</span>: &#123;</div><div class="line">        <span class="string">"browsers"</span>: [<span class="string">"&gt; 1%"</span>, <span class="string">"last 2 versions"</span>, <span class="string">"not ie &lt;= 8"</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;],</div><div class="line">    <span class="string">"stage-2"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>, <span class="string">"transform-vue-jsx"</span>],</div><div class="line">  <span class="string">"comments"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>强烈推荐使用transform-runtime。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Babel-The compiler for writing next generation Javascript. 下一代JavaScript 语法的编译器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Airbnb JavaScript（ES6）代码规范</title>
    <link href="http://yoursite.com/2017/03/12/ES6-Airbnb%20JavaScript%EF%BC%88ES6%EF%BC%89%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/03/12/ES6-Airbnb JavaScript（ES6）代码规范/</id>
    <published>2017-03-12T08:06:52.000Z</published>
    <updated>2018-11-15T12:39:23.826Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>本文摘自—Airbnb JavaScript（ES6）代码规范。</p></blockquote><a id="more"></a><h2 id="声明变量的新姿势"><a href="#声明变量的新姿势" class="headerlink" title="声明变量的新姿势"></a>声明变量的新姿势</h2><h3 id="用let不用var"><a href="#用let不用var" class="headerlink" title="用let不用var"></a>用let不用var</h3><p>ES6之前我们使用var声明一个变量，但是它有很多弊病：</p><ul><li>无块级作用域变量，很容易声明全局变量。</li><li>变量提升。</li><li>可重复声明。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 10</div><div class="line">a[7](); // 10</div><div class="line">a[8](); // 10</div><div class="line">a[9](); // 10</div></pre></td></tr></table></figure><p>所以，你有什么理由不用let?</p><hr><h3 id="某些场景，const比let更好"><a href="#某些场景，const比let更好" class="headerlink" title="某些场景，const比let更好"></a>某些场景，const比let更好</h3><p>const和let的唯一区别就是，const不可以被更改，所以当声明变量的时候，尤其是在声明容易被更改的全局变量的时候，尽量使用const。</p><ul><li>更好的代码语义化，一眼看到就是常量。</li><li>另一个原因是因为JavaScript 编译器对const的优化要比let好，多使用const，有利于提高程序的运行效率。</li><li>所有的函数都应该设置为常量。</li></ul><hr><h2 id="动态字符串"><a href="#动态字符串" class="headerlink" title="动态字符串"></a>动态字符串</h2><p>不要使用“双引号”，一律用单引号或反引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &quot;foobar&quot;;</div><div class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</div><div class="line"></div><div class="line">// best</div><div class="line">const a = &apos;foobar&apos;;</div><div class="line">const b = `foo$&#123;a&#125;bar`;</div><div class="line">const c = &apos;foobar&apos;;</div></pre></td></tr></table></figure><hr><h2 id="解构赋值的骚操作"><a href="#解构赋值的骚操作" class="headerlink" title="解构赋值的骚操作"></a>解构赋值的骚操作</h2><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>在用到数组成员对变量赋值时，尽量使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line"></div><div class="line">// low</div><div class="line">const first = arr[0];</div><div class="line">const second = arr[1];</div><div class="line"></div><div class="line">// good</div><div class="line">const [first, second] = arr;</div></pre></td></tr></table></figure><hr><h3 id="函数传对象"><a href="#函数传对象" class="headerlink" title="函数传对象"></a>函数传对象</h3><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function getFullName(user) &#123;</div><div class="line">  const firstName = user.firstName;</div><div class="line">  const lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function processInput(input) &#123;</div><div class="line">  return [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function processInput(input) &#123;</div><div class="line">  return &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure><hr><h3 id="关于对象的细节"><a href="#关于对象的细节" class="headerlink" title="关于对象的细节"></a>关于对象的细节</h3><h4 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h4><p>单行定义的对象结尾不要逗号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &#123; k1: v1, k2: v2, &#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; k1: v1, k2: v2 &#125;;</div></pre></td></tr></table></figure><p>多行定义的对象要保留逗号：：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><h4 id="一次性初始化完全"><a href="#一次性初始化完全" class="headerlink" title="一次性初始化完全"></a>一次性初始化完全</h4><p>不要声明之后又给对象添加新属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">const a = &#123;&#125;;</div><div class="line">a.x = 3;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; x: null &#125;;</div><div class="line">a.x = 3;</div></pre></td></tr></table></figure><p>如果一定非要加请使用Object.assign：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const a = &#123;&#125;;</div><div class="line">Object.assign(a, &#123; x: 3 &#125;);</div></pre></td></tr></table></figure><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/ low</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">&#125;;</div><div class="line">obj[getKey(&apos;enabled&apos;)] = true;</div><div class="line"></div><div class="line">// good</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">[getKey(&apos;enabled&apos;)]: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="在简洁一点"><a href="#在简洁一点" class="headerlink" title="在简洁一点"></a>在简洁一点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var ref = &apos;some value&apos;;</div><div class="line"></div><div class="line">// low</div><div class="line">const atom = &#123;</div><div class="line">  ref: ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue: function (value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const atom = &#123;</div><div class="line">  ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="扩展运算符…"><a href="#扩展运算符…" class="headerlink" title="扩展运算符…"></a>扩展运算符…</h3><p>使用扩展运算符（…）拷贝数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 还在用for i 你就太low了</div><div class="line">const len = items.length;</div><div class="line">const itemsCopy = [];</div><div class="line">let i;</div><div class="line"></div><div class="line">for (i = 0; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// cool !</div><div class="line">const itemsCopy = [...items];</div></pre></td></tr></table></figure><hr><h3 id="Array-form（）"><a href="#Array-form（）" class="headerlink" title="Array.form（）"></a>Array.form（）</h3><p>用 Array.from 方法，将类似数组的对象转为数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</div><div class="line">const nodes = Array.from(foo);</div></pre></td></tr></table></figure><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title="箭头函数=&gt;"></a>箭头函数=&gt;</h3><p>立即执行函数可以写成箭头函数的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(() =&gt; &#123;</div><div class="line">  console.log(&apos;Welcome to the Internet.&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>尽量写箭头函数使你的代码看起来简洁优雅：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">[1, 2, 3].map(function (x) &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// cool !</div><div class="line">[1, 2, 3].map(x =&gt; x * x);</div></pre></td></tr></table></figure><hr><h3 id="别再用arguments（类数组）了！"><a href="#别再用arguments（类数组）了！" class="headerlink" title="别再用arguments（类数组）了！"></a>别再用arguments（类数组）了！</h3><p>使用 rest 运算符（…）代替，rest 运算符可以提供一个真正的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function concatenateAll() &#123;</div><div class="line">  const args = Array.prototype.slice.call(arguments);</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function concatenateAll(...args) &#123;</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="传参时试试设置默认值"><a href="#传参时试试设置默认值" class="headerlink" title="传参时试试设置默认值"></a>传参时试试设置默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function handleThings(opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function handleThings(opts = &#123;&#125;) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Object？Map！"><a href="#Object？Map！" class="headerlink" title="Object？Map！"></a>Object？Map！</h2><h3 id="简单的键值对优先Map"><a href="#简单的键值对优先Map" class="headerlink" title="简单的键值对优先Map"></a>简单的键值对优先Map</h3><p>如果只是简单的key: value结构，建议优先使用Map，因为Map提供方便的遍历机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let map = new Map(arr);</div><div class="line">// 遍历key值</div><div class="line">for (let key of map.keys()) &#123;</div><div class="line">  console.log(key);</div><div class="line">&#125;</div><div class="line">// 遍历value值</div><div class="line">for (let value of map.values()) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line">// 遍历key和value值</div><div class="line">for (let item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="class语法"><a href="#class语法" class="headerlink" title="class语法"></a>class语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// low</div><div class="line">function Queue(contents = []) &#123;</div><div class="line">  this._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = function() &#123;</div><div class="line">  const value = this._queue[0];</div><div class="line">  this._queue.splice(0, 1);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class Queue &#123;</div><div class="line">  constructor(contents = []) &#123;</div><div class="line">    this._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    const value = this._queue[0];</div><div class="line">    this._queue.splice(0, 1);</div><div class="line">    return value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><p>使用import取代require，因为Module是Javascript模块的标准写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const moduleA = require(&apos;moduleA&apos;);</div><div class="line">const func1 = moduleA.func1;</div><div class="line">const func2 = moduleA.func2;</div><div class="line"></div><div class="line">// good</div><div class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</div></pre></td></tr></table></figure><hr><h3 id="输出模块"><a href="#输出模块" class="headerlink" title="输出模块"></a>输出模块</h3><p>使用export输出变量，拒绝module.exports:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">class Breadcrumbs extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default Breadcrumbs;</div></pre></td></tr></table></figure><ul><li>输出单个值，使用export default。</li><li>输出多个值，使用export。</li><li>export default与普通的export不要同时使用。</li></ul><hr><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p>模块输出一个函数，首字母应该小写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function getData() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default getData;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;本文摘自—Airbnb JavaScript（ES6）代码规范。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>精心收集的48个JavaScript代码片段</title>
    <link href="http://yoursite.com/2017/03/11/JS-%E7%B2%BE%E5%BF%83%E6%94%B6%E9%9B%86%E7%9A%8448%E4%B8%AAJavaScript%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://yoursite.com/2017/03/11/JS-精心收集的48个JavaScript代码片段/</id>
    <published>2017-03-11T13:06:52.000Z</published>
    <updated>2018-11-15T12:39:08.282Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>该文章摘自Github用户Chalarangelo，目前已在Github上获得了5K多个star，精心收集了多达48个有用的JavaScript代码片段。</p></blockquote><a id="more"></a><h2 id="Anagrams-of-string-带有重复项"><a href="#Anagrams-of-string-带有重复项" class="headerlink" title="Anagrams of string(带有重复项)"></a>Anagrams of string(带有重复项)</h2><p>使用递归，对于给定字符串中的每个字母，为字母创建字谜。使用map()将字母与每部分字谜结合，然后使用reduce()将所有字谜组合到一个数据中，最基本情况是字符串长度等于2或1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const anagrams = str =&gt; &#123;</div><div class="line">    if (str.length &lt;= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];</div><div class="line">    return str.split(&apos;&apos;).reduce((acc, letter, i) =&gt; &#123;</div><div class="line">        acc.concat(anagrams(str.slice(0, 1) + str.slice(i + 1)).map(val =&gt; letter + val))&#125;, []);</div><div class="line">&#125;;</div><div class="line">// anagrams(&apos;abc&apos;) -&gt; [&apos;abc&apos;,&apos;acb&apos;,&apos;bac&apos;,&apos;bca&apos;,&apos;cab&apos;,&apos;cba&apos;]</div></pre></td></tr></table></figure><hr><h2 id="数组平均值"><a href="#数组平均值" class="headerlink" title="数组平均值"></a>数组平均值</h2><p>使用reduce()将每个值添加到累加器，初始值为0，总和除以数组长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const average = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0) / arr.length;</div><div class="line">// avarage([1, 2, 3]) -&gt; 2</div></pre></td></tr></table></figure><hr><h2 id="大写每个单词的首字母"><a href="#大写每个单词的首字母" class="headerlink" title="大写每个单词的首字母"></a>大写每个单词的首字母</h2><p>使用replace()匹配每个单词的第一个字符，并使用toUpperCase()来将其大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const capitalizeEveryWord = str =&gt; str.replace(/\b[a-z]/g, char =&gt; char.toUpperCase());</div><div class="line">// capitalizeEveryWord(&apos;hello world!&apos;) -&gt; &apos;Hello World!&apos;</div></pre></td></tr></table></figure><hr><h2 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h2><p>使用slice (0,1)和toUpperCase ()大写第一个字母，slice (1)获取字符串的其余部分。省略lowerRest参数以保持字符串的其余部分不变，或将其设置为true以转换为小写。(注：这和上一示例不是同一件事情)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const capitalize = (str, lowerRest = false) =&gt; &#123;</div><div class="line">    str.slice(0, 1).toUpperCase() + (lowerRest ? str.slice(1).toLowerCase() : str.slice(1));</div><div class="line">&#125;</div><div class="line">// capitalize(&apos;myName&apos;, true) -&gt; &apos;Myname&apos;</div></pre></td></tr></table></figure><hr><h2 id="检查回文"><a href="#检查回文" class="headerlink" title="检查回文"></a>检查回文</h2><p>将字符串转换为toLowerCase ()，并使用replace ()从中删除非字母的字符串。然后，将其转换为toLowerCase ()，将(‘’)拆分为单独字符，reverse ()，join (‘’)，与原始的非反转字符串进行比较，然后将其转换为toLowerCase ()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const palindrome = str =&gt; &#123;</div><div class="line">    const s = str.toLowerCase().replace(/[\W_]/g, &apos;&apos;);</div><div class="line">    return s === s.split(&apos;&apos;).reverse().join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line">// palindrome(&apos;taco cat&apos;) -&gt; true</div></pre></td></tr></table></figure><hr><h2 id="计算数组中值的出现次数"><a href="#计算数组中值的出现次数" class="headerlink" title="计算数组中值的出现次数"></a>计算数组中值的出现次数</h2><p>每次遇到数组中的特别值时，使用reduce()来递增计数器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const countOccurrences = (arr, value) =&gt; arr.reduce((a, v) =&gt; v === value ? a + 1:a + 0, 0);</div><div class="line">// countOccurrences([1, 1, 2, 1, 2, 3], 1) -&gt; 3</div></pre></td></tr></table></figure><hr><h2 id="当前URL"><a href="#当前URL" class="headerlink" title="当前URL"></a>当前URL</h2><p>使用windows.location.href来获取当前URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const currentUrl = () =&gt; return window.location.href;</div><div class="line">// currentUrl() -&gt; &apos;https://google.com&apos;</div></pre></td></tr></table></figure><hr><h2 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h2><p>使用递归。如果提供的参数(args)数量足够，则调用传递函数f，否则返回一个curried函数f。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const curry = (fn, arity = fn.length, ...args) =&gt; &#123;</div><div class="line">    arity &lt;= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);</div><div class="line">&#125;</div><div class="line">// curry(Math.pow)(2)(10) -&gt; 1024</div><div class="line">// curry(Math.min, 3)(10)(50)(2) -&gt; 2</div></pre></td></tr></table></figure><hr><h2 id="Deep-flatten-array"><a href="#Deep-flatten-array" class="headerlink" title="Deep flatten array"></a>Deep flatten array</h2><p>使用递归，使用reduce()来获取所有不是数组的元素，flatten每个元素都是数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const deepFlatten = arr =&gt; &#123;</div><div class="line">    arr.reduce((a, v) =&gt; a.concat(Array.isArray(v) ? deepFlatten(v) : v), []);</div><div class="line">&#125;</div><div class="line">// deepFlatten([1, [2], [[3], 4], 5]) -&gt; [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure><hr><h2 id="数组之间的区别"><a href="#数组之间的区别" class="headerlink" title="数组之间的区别"></a>数组之间的区别</h2><p>从b创建一个Set，然后在a上使用Array.filter()，只保留b中不包含的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const difference = (a, b) =&gt; &#123;</div><div class="line">    const s = new Set(b);</div><div class="line">    return a.filter(x =&gt; !s.has(x))</div><div class="line">&#125;</div><div class="line">// difference([1, 2, 3], [1, 2]) -&gt; [3]</div></pre></td></tr></table></figure><hr><h2 id="两点之间的距离"><a href="#两点之间的距离" class="headerlink" title="两点之间的距离"></a>两点之间的距离</h2><p>使用Math.hypot()计算两点之间的欧几里德距离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const distance = (x0, y0, x1, y1) =&gt; Math.hypot(x1 - x0, y1 - y0);</div><div class="line">// distance(1,1, 2,3) -&gt; 2.23606797749979</div></pre></td></tr></table></figure><hr><h2 id="可以按数字整除"><a href="#可以按数字整除" class="headerlink" title="可以按数字整除"></a>可以按数字整除</h2><p>使用模运算符(%)来检查余数是否等于0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const isDivisible = (dividend, divisor) =&gt; dividend % divisor === 0;</div><div class="line">// isDivisible(6, 3) -&gt; true</div></pre></td></tr></table></figure><hr><h2 id="转义正则表达式"><a href="#转义正则表达式" class="headerlink" title="转义正则表达式"></a>转义正则表达式</h2><p>使用replace()来转义特殊字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const escapeRegExp = str =&gt; str.replace(/[.*+?^$&#123;&#125;()|[\]\\]/g, &apos;\\$&amp;&apos;);</div><div class="line">// escapeRegExp(&apos;(test)&apos;) -&gt; \\(test\\)</div></pre></td></tr></table></figure><hr><h2 id="偶数或奇数"><a href="#偶数或奇数" class="headerlink" title="偶数或奇数"></a>偶数或奇数</h2><p>使用Math.abs()将逻辑扩展为负数，使用模(%)运算符进行检查。如果数字是偶数，则返回true；如果数字是奇数，则返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const isEven = num =&gt; Math.abs(num) % 2 === 0;</div><div class="line">// isEven(3) -&gt; false</div></pre></td></tr></table></figure><hr><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><p>使用递归。如果n小于或等于1，则返回1。否则返回n和n-1的阶乘的乘积。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const factorial = n =&gt; n &lt;=1 ? 1 : n * factorial(n - 1);</div><div class="line">// factorial(6) -&gt; 720</div></pre></td></tr></table></figure><hr><h2 id="斐波那契数组生成器"><a href="#斐波那契数组生成器" class="headerlink" title="斐波那契数组生成器"></a>斐波那契数组生成器</h2><p>创建一个特定长度的空数组，初始化前两个值(0和1)。使用Array.reduce()向数组中添加值，后面的一个数等于前面两个数相加之和(前两个除外)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const fibonacci = n =&gt;</div><div class="line">  Array(n).fill(0).reduce((acc, val, i) =&gt; acc.concat(i &gt; 1 ? acc[i - 1] + acc[i - 2] : i), []);</div><div class="line">// fibonacci(5) -&gt; [0,1,1,2,3]</div></pre></td></tr></table></figure><hr><h2 id="过滤数组中的非唯一值"><a href="#过滤数组中的非唯一值" class="headerlink" title="过滤数组中的非唯一值"></a>过滤数组中的非唯一值</h2><p>将Array.filter() 用于仅包含唯一值得数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const filterNonUnique = arr =&gt; arr.filter(i =&gt; arr.indexOf(i) === arr.lastIndexOf(i));</div><div class="line">// filterNonUnique([1, 2, 3, 2, 4, 4, 5]) -&gt; [1, 3, 5]</div></pre></td></tr></table></figure><hr><h2 id="Flatten数组"><a href="#Flatten数组" class="headerlink" title="Flatten数组"></a>Flatten数组</h2><p>使用reduce()来获取数组中的所有元素，并使用concat()来使它们flatten。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const flatten = arr =&gt; arr.reduce((a, v) =&gt; a.concat(v), []);</div><div class="line">// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</div></pre></td></tr></table></figure><hr><h2 id="从数组中获取最大值"><a href="#从数组中获取最大值" class="headerlink" title="从数组中获取最大值"></a>从数组中获取最大值</h2><p>用Math.max()与spread运算符(…)结合得到数组中的最大值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const arrayMax = arr =&gt; Math.max(...arr);</div><div class="line">// arrayMax([10, 1, 5]) -&gt; 10</div></pre></td></tr></table></figure><hr><h2 id="从数组中获取最小值"><a href="#从数组中获取最小值" class="headerlink" title="从数组中获取最小值"></a>从数组中获取最小值</h2><p>使用Math.min()与spread运算符(…)结合得到数组中的最小值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const arrayMin = arr =&gt; Math.min(...arr);</div><div class="line">// arrayMin([10, 1, 5]) -&gt; 1</div></pre></td></tr></table></figure><hr><h2 id="获取滚动位置"><a href="#获取滚动位置" class="headerlink" title="获取滚动位置"></a>获取滚动位置</h2><p>如果已定义，请使用pageXOffset和pageYOffset，否则使用scrollLeft和scrollTop，可以省略el来使用window的默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const getScrollPos = (el = window) =&gt;</div><div class="line">  (&#123;x: (el.pageXOffset !== undefined) ? el.pageXOffset : el.scrollLeft,</div><div class="line">    y: (el.pageYOffset !== undefined) ? el.pageYOffset : el.scrollTop&#125;);</div><div class="line">// getScrollPos() -&gt; &#123;x: 0, y: 200&#125;</div></pre></td></tr></table></figure><hr><h2 id="最大公约数-GCD"><a href="#最大公约数-GCD" class="headerlink" title="最大公约数(GCD)"></a>最大公约数(GCD)</h2><p>使用递归。基本情况是当y等于0时。在这种情况下，返回x。否则，返回y的GCD和x / y的其余部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const gcd = (x, y) =&gt; !y ? x : gcd(y, x % y);</div><div class="line">// gcd (8, 36) -&gt; 4</div></pre></td></tr></table></figure><hr><h2 id="Head-of-list"><a href="#Head-of-list" class="headerlink" title="Head of list"></a>Head of list</h2><p>返回ARR[0]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const head = arr =&gt; arr[0];</div><div class="line">// head([1,2,3]) -&gt; 1</div></pre></td></tr></table></figure><hr><h2 id="list初始化"><a href="#list初始化" class="headerlink" title="list初始化"></a>list初始化</h2><p>返回arr.slice(0，-1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const initial = arr =&gt; arr.slice(0, -1);</div><div class="line">// initial([1,2,3]) -&gt; [1,2]</div></pre></td></tr></table></figure><hr><h2 id="用range初始化数组"><a href="#用range初始化数组" class="headerlink" title="用range初始化数组"></a>用range初始化数组</h2><p>使用Array(end-start)创建所需长度的数组，使用map()来填充范围内的所需值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const initializeArrayRange = (end, start = 0) =&gt;</div><div class="line">  Array.apply(null, Array(end - start)).map((v, i) =&gt; i + start);</div><div class="line">// initializeArrayRange(5) -&gt; [0,1,2,3,4]</div></pre></td></tr></table></figure><hr><h2 id="用值初始化数组"><a href="#用值初始化数组" class="headerlink" title="用值初始化数组"></a>用值初始化数组</h2><p>使用Array(n)创建所需长度的数组，fill(v)以填充所需的值，可以忽略value使用默认值0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const initializeArray = (n, value = 0) =&gt; Array(n).fill(value);</div><div class="line">// initializeArray(5, 2) -&gt; [2,2,2,2,2]</div></pre></td></tr></table></figure><hr><h2 id="列表的最后"><a href="#列表的最后" class="headerlink" title="列表的最后"></a>列表的最后</h2><p>返回arr.slice(-1)[0]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const last = arr =&gt; arr.slice(-1)[0];</div><div class="line">// last([1,2,3]) -&gt; 3</div></pre></td></tr></table></figure><hr><h2 id="测试功能所花费的时间"><a href="#测试功能所花费的时间" class="headerlink" title="测试功能所花费的时间"></a>测试功能所花费的时间</h2><p>使用performance.now()获取函数的开始和结束时间，console.log()所花费的时间。第一个参数是函数名，随后的参数传递给函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const timeTaken = callback =&gt; &#123;</div><div class="line">    console.time(&apos;timeTaken&apos;);</div><div class="line">    const r = callback();</div><div class="line">    console.timeEnd(&apos;timeTaken&apos;);</div><div class="line">    return r;</div><div class="line">&#125;;</div><div class="line">// timeTaken(() =&gt; Math.pow(2, 10)) -&gt; 1024</div><div class="line">// (logged): timeTaken: 0.02099609375ms</div></pre></td></tr></table></figure><hr><h2 id="来自键值对的对象"><a href="#来自键值对的对象" class="headerlink" title="来自键值对的对象"></a>来自键值对的对象</h2><p>使用Array.reduce()来创建和组合键值对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const objectFromPairs = arr.reduce((a, v) =&gt; (a[v[0]] =v[1], a), &#123;&#125;);</div><div class="line">// objectFromPairs([[&apos;a&apos;,1],[&apos;b&apos;,2]]) -&gt; &#123;a: 1, b: 2&#125;</div></pre></td></tr></table></figure><hr><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>使用Array.reduce()通过函数传递值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const pipe = (...funcs) =&gt; arg =&gt; funcs.reduce((acc, func) =&gt; func(acc), arg);</div><div class="line">// pipe(btoa, x =&gt; x.toUpperCase())(&quot;Test&quot;) -&gt; &quot;VGVZDA==&quot;</div></pre></td></tr></table></figure><hr><h2 id="Powerset"><a href="#Powerset" class="headerlink" title="Powerset"></a>Powerset</h2><p>使用reduce()与map()结合来遍历元素，并将其组合成包含所有组合的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const powerset = arr =&gt; arr.reduce((a, v) =&gt; a.concat(a.map(r =&gt; [v].concat(r))), [[]]);</div><div class="line">// powerset([1,2]) -&gt; [[], [1], [2], [2,1]]</div></pre></td></tr></table></figure><hr><h2 id="范围内的随机整数"><a href="#范围内的随机整数" class="headerlink" title="范围内的随机整数"></a>范围内的随机整数</h2><p>使用Math.random()生成一个随机数并将其映射到所需的范围，使用Math.floor()使其成为一个整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const randomIntegerInRange = (min, max) =&gt; Math.floor(Math.random() * (max - min + 1)) + min;</div><div class="line">// randomIntegerInRange(0, 5) -&gt; 2</div></pre></td></tr></table></figure><hr><h2 id="范围内的随机数"><a href="#范围内的随机数" class="headerlink" title="范围内的随机数"></a>范围内的随机数</h2><p>使用Math.random()生成一个随机值，使用乘法将其映射到所需的范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const randomInRange = (min, max) =&gt; Math.random() * (max - min) + min;</div><div class="line">// randomInRange(2,10) -&gt; 6.0211363285087005</div></pre></td></tr></table></figure><hr><h2 id="随机化数组的顺序"><a href="#随机化数组的顺序" class="headerlink" title="随机化数组的顺序"></a>随机化数组的顺序</h2><p>使用sort()重新排序元素，使用Math.random()来随机排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const shuffle = arr =&gt; arr.sort(() =&gt; Math.random() - 0.5);</div><div class="line">// shuffle([1,2,3]) -&gt; [2,3,1]</div></pre></td></tr></table></figure><hr><h2 id="重定向到URL"><a href="#重定向到URL" class="headerlink" title="重定向到URL"></a>重定向到URL</h2><p>使用window.location.href或window.location.replace()重定向到url。传递第二个参数来模拟链接点击(true-default)或HTTP重定向(false)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const redirect = (url, asLink = true) =&gt; asLink ? window.location.href = url : window.location.replace(url);</div><div class="line">// redirect(&apos;https://google.com&apos;)</div></pre></td></tr></table></figure><hr><h2 id="反转一个字符串"><a href="#反转一个字符串" class="headerlink" title="反转一个字符串"></a>反转一个字符串</h2><p>使用数组解构和Array.reverse()来颠倒字符串中的字符顺序。合并字符以使用join(‘’)获取字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const reverseString = str =&gt; [...str].reverse().join(&apos;&apos;);</div><div class="line">// reverseString(&apos;foobar&apos;) -&gt; &apos;raboof&apos;</div></pre></td></tr></table></figure><hr><h2 id="RGB到十六进制"><a href="#RGB到十六进制" class="headerlink" title="RGB到十六进制"></a>RGB到十六进制</h2><p>使用按位左移运算符(&lt;&lt;)和toString(16)，然后padStart(6，“0”)将给定的RGB参数转换为十六进制字符串以获得6位十六进制值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const rgbToHex = (r, g, b) =&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, &apos;0&apos;);</div><div class="line">// rgbToHex(255, 165, 1) -&gt; &apos;ffa501&apos;</div></pre></td></tr></table></figure><hr><h2 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h2><p>使用document.documentElement.scrollTop或document.body.scrollTop获取到顶部的距离。<br>从顶部滚动一小部分距离。</p><p>使用window.requestAnimationFrame()来滚动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const scrollToTop = _ =&gt; &#123;</div><div class="line">const c = document.documentElement.scrollTop || document.body.scrollTop;</div><div class="line">  if (c &gt; 0) &#123;</div><div class="line">    window.requestAnimationFrame(scrollToTop);</div><div class="line">    window.scrollTo(0, c - c / 8);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">// scrollToTop()</div></pre></td></tr></table></figure><hr><h2 id="随机数组值"><a href="#随机数组值" class="headerlink" title="随机数组值"></a>随机数组值</h2><p>使用Array.map()和Math.random()创建一个随机值的数组。使用Array.sort()根据随机值对原始数组的元素进行排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const shuffle = arr =&gt; &#123;</div><div class="line">let r = arr.map(Math.random);</div><div class="line">return arr.sort((a,b) =&gt; r[a] - r[b]);</div><div class="line">&#125;</div><div class="line">// shuffle([1, 2, 3]) -&gt; [2, 1, 3]</div></pre></td></tr></table></figure><hr><h2 id="数组之间的相似性"><a href="#数组之间的相似性" class="headerlink" title="数组之间的相似性"></a>数组之间的相似性</h2><p>使用filter()移除不是values的一部分值，使用includes()确定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const similarity = (arr, values) =&gt; arr.filter(v =&gt; values.includes(v));</div><div class="line">// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</div></pre></td></tr></table></figure><hr><h2 id="按字符串排序-按字母顺序排序"><a href="#按字符串排序-按字母顺序排序" class="headerlink" title="按字符串排序(按字母顺序排序)"></a>按字符串排序(按字母顺序排序)</h2><p>使用split(‘’)分割字符串，sort()使用localeCompare()，使用join(‘’)重新组合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const sortCharactersInString = str =&gt; str.split(&apos;&apos;).sort((a, b) =&gt; a.localeCompare(b)).join(&apos;&apos;);</div><div class="line">// sortCharactersInString(&apos;cabbage&apos;) -&gt; &apos;aabbceg&apos;</div></pre></td></tr></table></figure><hr><h2 id="数组总和"><a href="#数组总和" class="headerlink" title="数组总和"></a>数组总和</h2><p>使用reduce()将每个值添加到累加器，初始化值为0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const sum = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0);</div><div class="line">// sum([1,2,3,4]) -&gt; 10</div></pre></td></tr></table></figure><hr><h2 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h2><p>使用数组解构来交换两个变量之间的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[varA, varB] = [varB, varA]</div><div class="line">// [x, y] = [y, x]</div></pre></td></tr></table></figure><hr><h2 id="列表的tail"><a href="#列表的tail" class="headerlink" title="列表的tail"></a>列表的tail</h2><p>返回arr.slice(1)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const tail = arr =&gt; arr.length &gt; 1 ? arr.slice(1) : arr;</div><div class="line">// tail([1,2,3]) -&gt; [2,3]</div><div class="line">// tail([1]) -&gt; [1]</div></pre></td></tr></table></figure><hr><h2 id="数组唯一值"><a href="#数组唯一值" class="headerlink" title="数组唯一值"></a>数组唯一值</h2><p>使用ES6 Set和…rest操作符去掉所有重复值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const unique = arr =&gt; [...new Set(arr)];</div><div class="line">// unique([1, 2, 2, 3, 4, 4, 5]) -&gt; [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure><hr><h2 id="URL参数"><a href="#URL参数" class="headerlink" title="URL参数"></a>URL参数</h2><p>使用match()与适当的正则表达式来获得所有键值对，适当的map()。使用Object.assign()和spread运算符(…)将所有键值对组合到一个对象中，将location.search()作为参数传递给当前url。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const getUrlParameters = url =&gt; url.match(/([^?=&amp;]+)(=([^&amp;]*))/g).reduce((a, v) =&gt; (a[v.slice(0, v.indexOf(&apos;=&apos;))] = v.slice(v.indexOf(&apos;=&apos;) + 1), a), &#123;&#125;);</div><div class="line">// getUrlParameters(&apos;http://url.com/page?name=Adam&amp;surname=Smith&apos;) -&gt; &#123;name: &apos;Adam&apos;, surname: &apos;Smith&apos;&#125;</div></pre></td></tr></table></figure><hr><h2 id="UUID生成器"><a href="#UUID生成器" class="headerlink" title="UUID生成器"></a>UUID生成器</h2><p>使用crypto API生成符合RFC4122版本4的UUID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const uuid = _ =&gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =&gt; (c ^ crypto.getRandomValues(new Uint8Array(1))[0] &amp; 15 &gt;&gt; c / 4).toString(16));</div><div class="line">// uuid() -&gt; &apos;7982fcfe-5721-4632-bede-6000885be57d&apos;</div></pre></td></tr></table></figure><hr><h2 id="验证数字"><a href="#验证数字" class="headerlink" title="验证数字"></a>验证数字</h2><p>使用！isNaN和parseFloat（）来检查参数是否是一个数字，使用isFinite（）来检查数字是否是有限的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const validateNumber = n =&gt; !isNaN(parseFloat(n)) &amp;&amp; isFinite(n) &amp;&amp; Number(n) == n;</div><div class="line">// validateNumber(&apos;10&apos;) -&gt; true</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;该文章摘自Github用户Chalarangelo，目前已在Github上获得了5K多个star，精心收集了多达48个有用的JavaScript代码片段。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Chrome插件开发实录[转]</title>
    <link href="http://yoursite.com/2017/03/10/Vue-Chrome%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E5%BD%95%5B%E8%BD%AC%5D/"/>
    <id>http://yoursite.com/2017/03/10/Vue-Chrome 插件开发实录[转]/</id>
    <published>2017-03-10T13:06:52.000Z</published>
    <updated>2018-11-15T12:38:53.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>开发一个Chrome插件就跟我们平时做web开发流程没多大的区别，就是先搭好基本的页面，然后使用js来写交互逻辑等功能。</p></blockquote><a id="more"></a><h2 id="Chrome插件开发基本知识"><a href="#Chrome插件开发基本知识" class="headerlink" title="Chrome插件开发基本知识"></a>Chrome插件开发基本知识</h2><p>在应用商店中下载下来的插件基本上都是以.crx为文件后缀，该文件其实就是一个压缩包，包括插件所需要的html、css、javascript、图片资源等等文件。</p><p>开发一个插件就跟我们平时做web开发流程没多大的区别，就是先搭好基本的页面，然后使用js来写交互逻辑等功能。</p><p>比如我这个插件的目录文件如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%85%A8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="manifest-json文件"><a href="#manifest-json文件" class="headerlink" title="manifest.json文件"></a>manifest.json文件</h2><p>文件中需要注意一下的mainfest.json这个文件，这个json文件的作用是提供插件的各种信息，例如插件能够做的事情，以及插件的文件配置等等信息。下面是一个清单文件的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;manifest_version&quot;: 2,</div><div class="line">  &quot;name&quot;: &quot;One-click Kittens&quot;,</div><div class="line">  &quot;description&quot;: &quot;This extension demonstrates a browser action with kittens.&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0&quot;,</div><div class="line">  &quot;permissions&quot;: [</div><div class="line">    &quot;https://secure.flickr.com/&quot;</div><div class="line">  ],</div><div class="line">  &quot;browser_action&quot;: &#123;</div><div class="line">    &quot;default_icon&quot;: &quot;icon.png&quot;,</div><div class="line">    &quot;default_popup&quot;: &quot;popup.html&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第一行声明我们使用清单文件格式的版本 2，必须包含（版本 1 是旧的，已弃用，不建议使用）。</p><p>接下来的部分定义扩展程序的名称、描述与版本。这些都会在 Chrome 浏览器中使用，向用户显示已安装的扩展程序，同时在 Chrome 网上应用店中向潜在的新用户显示您的扩展程序。名称应该简练，描述不要比一句话左右还长（后面将会有更多的空间用于更详细的描述）。</p><p>最后一部分首先请求权限，用于访问 <a href="https://secure.flickr.com/" target="_blank" rel="external">https://secure.flickr.com/</a> 上的数据，并声明该扩展程序实现了一个浏览器按钮，同时在这一过程中为它指定一个默认图标与弹出窗口。</p><p>定义浏览器按钮时指向了两个资源文件：icon.png 与 popup.html。这两个资源都必须在扩展程序包中存在，图片是扩展的显示，html是扩展具体运行的基础文件。</p><p>具体详细的开发教程可以看看官方的这个文档，非常简明的入门教程。</p><hr><h2 id="功能实现-Vuejs实践"><a href="#功能实现-Vuejs实践" class="headerlink" title="功能实现-Vuejs实践"></a>功能实现-Vuejs实践</h2><p>整个插件的核心交互功能非常简单，如文章开头的动图所示，用户选择对齐方式，代码区域显示对应的代码。这种简单数据交互使用vuejs再适合不过了，vuejs基础知识这里就不再细说了。</p><p>这里需要注意的一点是，chrome 扩展的运行环境有一些特殊要求，称为 Content Security Policy (CSP)，使得通常的 vue 不能被正常使用。如果用的是 vue 1.x，那么可以下载 csp 版本，在 这里。如果是 2.x 版本，请参考官网文档的这一段。</p><p>核心代码如下所示。</p><p>HTML：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;!-- 引入样式 --&gt;</div><div class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;mystique.css&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">      &lt;h1 class=&quot;title-box&quot;&gt;flexbox对齐就是这么简单&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div id=&quot;type-select&quot;&gt;</div><div class="line">      &lt;select v-model=&quot;selected&quot;&gt;</div><div class="line">        &lt;option v-for=&quot;option in options&quot; v-bind:value=&quot;option.value&quot;&gt;</div><div class="line">          &#123;&#123; option.text &#125;&#125;</div><div class="line">        &lt;/option&gt;</div><div class="line">      &lt;/select&gt;</div><div class="line">      &lt;!-- &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/span&gt; --&gt;</div><div class="line">      &lt;div class=&quot;resule-preview&quot;&gt;</div><div class="line">        &lt;div v-bind:class=&quot;selected&quot; class=&quot;cols&quot;&gt;</div><div class="line">          &lt;div class=&quot;col col-3&quot;&gt;</div><div class="line">              &lt;p&gt;对齐&lt;/p&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">          &lt;div class=&quot;col col-3&quot;&gt;</div><div class="line">            &lt;p&gt;对齐&lt;/p&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">          &lt;div class=&quot;col col-3&quot;&gt;</div><div class="line">            &lt;p&gt;对齐&lt;/p&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;resule-code&quot;&gt;</div><div class="line">        &lt;pre class=&quot;code-display&quot;&gt;</div><div class="line">            &lt;code class=&quot;code-lang&quot;&gt;</div><div class="line">               &#123;&#123; cssMsg &#125;&#125;</div><div class="line">            &lt;/code&gt;</div><div class="line">        &lt;/pre&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;!-- 先引入 Vue --&gt;</div><div class="line">    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;!-- 引入组件库 --&gt;</div><div class="line">    &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;&lt;!-- 引入样式 --&gt;</div></pre></td></tr></table></figure><p>CSS就不列出来了，可以在源代码中查看。</p><p>下面来使用vuejs来实现插件的功能。</p><hr><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>使用 v-for 指令根据一组数组的选项列表进行渲染。 v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。</p><p>而下拉框（select）列表的渲染，就可以使用vue中的v-for方法来渲染下拉列表选项，下拉选项数据写在js中的data对象中的options中。用v-bind方法来绑定option的value值，代码如下所示：</p><p>XHTML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select v-model=&quot;selected&quot;&gt;</div><div class="line">  &lt;option v-for=&quot;option in options&quot; v-bind:value=&quot;option.value&quot;&gt;</div><div class="line">    &#123;&#123; option.text &#125;&#125;</div><div class="line">  &lt;/option&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><p>在vuejs中可以用 v-model 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。这里在select中使用v-model方法来监听选中的值。</p><p>为了能预览不同对齐的效果，先在CSS中写好和下拉框中值相同的对应的类名样式，这样当用户选中不同的值的时候能显示不同的效果。这里我们使用v-bind方法来实现这个功能，它主要用于属性绑定，我们可以给v-bind:class一个对象，以动态地切换class。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;selected&quot; class=&quot;cols&quot;&gt;</div><div class="line">  &lt;div class=&quot;col col-3&quot;&gt;</div><div class="line">    &lt;p&gt;对齐&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;col col-3&quot;&gt;</div><div class="line">    &lt;p&gt;对齐&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;col col-3&quot;&gt;</div><div class="line">    &lt;p&gt;对齐&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>下拉框这块功能就这样，简简单单几行代码就实现了。想想要是用jquery或者是原生的js来实现同样的功能，不仅代码量要大而且写起来也没有vuejs这么舒服。</p><p>接下来是代码同步功能，即在代码区域显示对应flex对齐的CSS代码。</p><p>开始之前先讲讲vuejs中的computed属性方法，可计算属性 (computed properties) 就是不存在于原始数据中，而是在运行时实时计算出来的属性。</p><p>对应到我们这个实例，就是当用户选择flexbox不同的对齐方式的时候，及时同步对应的CSS代码到代码预览区域。简单起见，直接把几个不同的代码写到js中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">    selected: &apos;cols-center&apos;,</div><div class="line">      cssText: &#123;</div><div class="line">      &apos;cols-center&apos; : &apos;nr-webkit-justify-content: center;nr-ms-flex-pack: center;nrjustify-content: center;&apos;,</div><div class="line">      &apos;cols-space-between&apos; : &apos;nr-webkit-justify-content: space-between;nr-ms-flex-pack: justify;nrjustify-content: space-between;&apos;,</div><div class="line">      &apos;cols-space-around&apos; : &apos;nr-webkit-justify-content: space-around;nr-ms-flex-pack: distribute;nrjustify-content: space-around;&apos;</div><div class="line">    &#125;,</div><div class="line">    options: [</div><div class="line">      &#123; text: &apos;居中对齐&apos;, value: &apos;cols-center&apos;&#125;,</div><div class="line">      &#123; text: &apos;两端对齐&apos;, value: &apos;cols-space-between&apos;&#125;,</div><div class="line">      &#123; text: &apos;间隔相等&apos;, value: &apos;cols-space-around&apos;&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>根据不同的名字对应不同的CSS代码。然后使用computed方法来根据用户选取的值实时取出对应的CSS代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">computed:&#123;</div><div class="line">   cssMsg:function()&#123;</div><div class="line">   console.log(this)</div><div class="line">   return this.cssText[this.selected];</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var typeSelect = new Vue(&#123;</div><div class="line">  el: &apos;body&apos;,</div><div class="line">  data: &#123;</div><div class="line">    selected: &apos;cols-center&apos;,</div><div class="line">    cssText:&#123;</div><div class="line">    &apos;cols-center&apos; : &apos;nr-webkit-justify-content: center;nr-ms-flex-pack: center;nrjustify-content: center;&apos;,</div><div class="line">    &apos;cols-space-between&apos; : &apos;nr-webkit-justify-content: space-between;nr-ms-flex-pack: justify;nrjustify-content: space-between;&apos;,</div><div class="line">    &apos;cols-space-around&apos; : &apos;nr-webkit-justify-content: space-around;nr-ms-flex-pack: distribute;nrjustify-content: space-around;&apos;</div><div class="line">    &#125;,</div><div class="line">    options: [</div><div class="line">      &#123; text: &apos;居中对齐&apos;, value: &apos;cols-center&apos;&#125;,</div><div class="line">      &#123; text: &apos;两端对齐&apos;, value: &apos;cols-space-between&apos;&#125;,</div><div class="line">      &#123; text: &apos;间隔相等&apos;, value: &apos;cols-space-around&apos;&#125;</div><div class="line">     ]</div><div class="line">    &#125;,</div><div class="line">    computed:&#123;</div><div class="line">    cssMsg:function()&#123;</div><div class="line">    console.log(this)</div><div class="line">    return this.cssText[this.selected];</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>最后在html中绑定通过computed方法得到数据也就是CSS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;resule-code&quot;&gt;</div><div class="line"> &lt;pre class=&quot;code-display&quot;&gt;</div><div class="line">   &lt;code class=&quot;code-lang&quot;&gt;</div><div class="line">     &#123;&#123; cssMsg &#125;&#125;</div><div class="line">   &lt;/code&gt;</div><div class="line"> &lt;/pre&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>插件代码下载（<a href="https://share.weiyun.com/d51b9e473e12f8c43e7eaafc9e2f11a7）" target="_blank" rel="external">https://share.weiyun.com/d51b9e473e12f8c43e7eaafc9e2f11a7）</a></p><p>开发好之后，可以直接在chrome中运行来调试。打开扩展面板，勾选开发者模式，然后加载刚开发扩展所在的目录就可以直接运行了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/670.jpeg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>一个简单的插件就完成了，通过这一个简单的chrome插件就可以体验到vuejs在web开发中简单、优雅的魅力，还有什么理由不用起来呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;开发一个Chrome插件就跟我们平时做web开发流程没多大的区别，就是先搭好基本的页面，然后使用js来写交互逻辑等功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli中Webpack配置基础文件详解</title>
    <link href="http://yoursite.com/2017/03/09/Vue-cli%E4%B8%ADWebpack%E9%85%8D%E7%BD%AE%E5%9F%BA%E7%A1%80%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/03/09/Vue-cli中Webpack配置基础文件详解/</id>
    <published>2017-03-09T12:06:52.000Z</published>
    <updated>2018-11-15T12:38:44.285Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>Vue-cli是构建Vue单页应用的脚手架，输入一串指定的命令行从而自动生成Vue.js+Wepack的项目模板。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过Vue-cli生成的Vue.js+Webpack的项目模板，这其中webpack发挥了很大的作用，它使得我们的代码模块化，引入一些插件帮我们完善功能可以将文件打包压缩，图片转base64等。后期对项目的配置使得我们对于脚手架自动生成的代码的理解更为重要，接下来我们将基于webpack3.6.0版本结合文档将文件各个击破。</p><hr><h2 id="主体结构"><a href="#主体结构" class="headerlink" title="主体结构"></a>主体结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">├─build</div><div class="line">├─config</div><div class="line">├─dist</div><div class="line">├─node_modules</div><div class="line">├─src</div><div class="line">│ ├─assets</div><div class="line">│ ├─components</div><div class="line">│ ├─router</div><div class="line">│ ├─App.vue</div><div class="line">│ ├─main.js</div><div class="line">├─static</div><div class="line">├─.babelrc</div><div class="line">├─.editorconfig</div><div class="line">├─.gitignore</div><div class="line">├─.postcssrc.js</div><div class="line">├─index.html</div><div class="line">├─package-lock.json</div><div class="line">├─package.json</div><div class="line">└─README.md</div></pre></td></tr></table></figure><hr><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>项目作为一个大家庭，每个文件都各司其职。package.json来制定名单，需要哪些npm包来参与到项目中来，npm install命令根据这个配置文件增减来管理本地的安装包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  //从name到license都是package的配置信息，也就是我们在脚手架搭建中输入的项目描述</div><div class="line">  &quot;name&quot;: &quot;shou-fei-yun&quot;, // 项目名称</div><div class="line">  &quot;version&quot;: &quot;0.2.1&quot;, // 项目版本号</div><div class="line">  &quot;description&quot;: &quot;新疆公路收费&quot;, // 项目描述</div><div class="line">  &quot;author&quot;: &quot;ETVC &lt;etvcsoft.com&gt;&quot;, // 作者名字</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;, // 许可证标识</div><div class="line">  // scripts中的子项即是我们在控制台运行的脚本的缩写</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    // webpack-dev-server启动了http服务器，实现实时编译</div><div class="line">    // inline模式会在webpack.config.js入口配置中新增webpack-dev-server/client?http://localhost:8080/的入口</div><div class="line">    // progress显示打包的进度</div><div class="line">    &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;,</div><div class="line">    &quot;start&quot;: &quot;npm run dev&quot;, // 与npm run dev相同</div><div class="line">    &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;,</div><div class="line">    &quot;build&quot;: &quot;node build/build.js&quot;, // 使用node运行build文件</div><div class="line">    &quot;brwoser-sync&quot;: &quot;cd dist &amp;&amp; browser-sync start --server&quot;</div><div class="line">  &#125;,</div><div class="line">  // 项目依赖库：在安装时使用--save则写入到dependencies</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,</div><div class="line">    &quot;babel-runtime&quot;: &quot;^5.8.0&quot;,</div><div class="line">    &quot;countup.js&quot;: &quot;^1.8.1&quot;,</div><div class="line">    &quot;echarts&quot;: &quot;^3.3.2&quot;,</div><div class="line">    &quot;hideseek&quot;: &quot;^0.7.0&quot;,</div><div class="line">    &quot;http-server&quot;: &quot;^0.9.0&quot;,</div><div class="line">    &quot;jquery&quot;: &quot;^2.2.2&quot;,</div><div class="line">    &quot;moment&quot;: &quot;^2.18.1&quot;,</div><div class="line">    &quot;vue&quot;: &quot;^2.5.9&quot;,</div><div class="line">    &quot;vue-date-picker&quot;: &quot;^1.0.2&quot;,</div><div class="line">    &quot;vue-localstorage&quot;: &quot;^0.1.3&quot;,</div><div class="line">    &quot;vue-prism&quot;: &quot;^1.0.5&quot;,</div><div class="line">    &quot;vue-prism-component&quot;: &quot;^1.0.1&quot;,</div><div class="line">    &quot;vue-resource&quot;: &quot;^1.3.4&quot;,</div><div class="line">    &quot;vue-router&quot;: &quot;^2.8.1&quot;,</div><div class="line">    &quot;vue-scrollTo&quot;: &quot;^2.3.2&quot;,</div><div class="line">    &quot;vue-uweb&quot;: &quot;^0.1.0&quot;,</div><div class="line">    &quot;vuex&quot;: &quot;^2.1.1&quot;,</div><div class="line">    &quot;vuex-router-sync&quot;: &quot;^4.1.0&quot;,</div><div class="line">    &quot;waypoints&quot;: &quot;^4.0.1&quot;</div><div class="line">  &#125;,</div><div class="line">  // 开发依赖库：在安装时使用--save-dev将写入到devDependencies</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;@xkeshi/vue-qrcode&quot;: &quot;^0.3.0&quot;,</div><div class="line">    &quot;autoprefixer&quot;: &quot;^7.1.2&quot;, // autoprefixer作为postcss插件用来解析css补充前缀，例如 display: flex会补充为display:-webkit-box;display: -webkit-flex等</div><div class="line">    // 以下几个babel开头的都是针对es6解析的插件，用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本</div><div class="line">    &quot;babel-core&quot;: &quot;^6.22.1&quot;, // babel的核心，把js代码分析成ast，方便各个插件分析语法进行相应的处理</div><div class="line">    &quot;babel-eslint&quot;: &quot;^8.2.1&quot;,</div><div class="line">    &quot;babel-helper-vue-jsx-merge-props&quot;: &quot;^2.0.3&quot;, // 预制babel-template函数，提供给vue，jsx等使用</div><div class="line">    &quot;babel-loader&quot;: &quot;^7.1.1&quot;, // 使项目运行使用babel和webpack来传输js文件，使用babel-core提供的api进行转译</div><div class="line">    &quot;babel-plugin-component&quot;: &quot;^0.9.1&quot;,</div><div class="line">    &quot;babel-plugin-syntax-jsx&quot;: &quot;^6.18.0&quot;, // 支持jsx</div><div class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.0.0&quot;, // 避免编译输出中的重复，直接编译到build环境中</div><div class="line">    &quot;babel-plugin-transform-vue-jsx&quot;: &quot;^3.4.2&quot;, // babel转译过程中使用到的插件，避免重复</div><div class="line">    &quot;babel-preset-stage-2&quot;: &quot;^6.22.0&quot;, // ES第二阶段的规范</div><div class="line">    &quot;babel-register&quot;: &quot;^6.0.0&quot;,</div><div class="line">    &quot;chalk&quot;: &quot;^2.0.1&quot;, // 用来在命令行中输出不同颜色文字</div><div class="line">    &quot;clipboard&quot;: &quot;^1.7.1&quot;,</div><div class="line">    &quot;compression&quot;: &quot;^1.7.1&quot;,</div><div class="line">    &quot;connect-history-api-fallback&quot;: &quot;^1.5.0&quot;,</div><div class="line">    &quot;copy-webpack-plugin&quot;: &quot;^4.0.1&quot;, // 拷贝资源和文件</div><div class="line">    &quot;cross-spawn&quot;: &quot;^5.0.1&quot;,</div><div class="line">    &quot;css-loader&quot;: &quot;^0.28.0&quot;, // webpack先用css-loader加载器去解析后缀名为css的文件，在使用style-loader生成一个内容为最终解析完的css的style标签，放到head标签里</div><div class="line">    &quot;element-theme-chalk&quot;: &quot;^2.0.7&quot;,</div><div class="line">    &quot;element-ui&quot;: &quot;^2.4.0&quot;,</div><div class="line">    &quot;eslint&quot;: &quot;^3.7.1&quot;,</div><div class="line">    &quot;eslint-config-standard&quot;: &quot;^10.2.1&quot;,</div><div class="line">    &quot;eslint-friendly-formatter&quot;: &quot;^3.0.0&quot;,</div><div class="line">    &quot;eslint-loader&quot;: &quot;^1.7.1&quot;,</div><div class="line">    &quot;eslint-plugin-html&quot;: &quot;^1.3.0&quot;,</div><div class="line">    &quot;eslint-plugin-import&quot;: &quot;^2.8.0&quot;,</div><div class="line">    &quot;eslint-plugin-node&quot;: &quot;^5.2.1&quot;,</div><div class="line">    &quot;eslint-plugin-promise&quot;: &quot;3.4.0&quot;,</div><div class="line">    &quot;eslint-plugin-standard&quot;: &quot;^3.0.1&quot;,</div><div class="line">    &quot;eslint-plugin-vue&quot;: &quot;^4.2.0&quot;,</div><div class="line">    &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.0&quot;, // 将一个以上的包里面的文本提取到单独文件中</div><div class="line">    &quot;file-loader&quot;: &quot;^1.1.4&quot;, // 打包压缩文件，与url-loader用法类似</div><div class="line">    &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.6.1&quot;, // 识别某些类别的webpack错误和清理，聚合和优先排序，以提供更好的开发体验</div><div class="line">    &quot;function-bind&quot;: &quot;^1.0.2&quot;,</div><div class="line">    &quot;happypack&quot;: &quot;^4.0.0-beta.1&quot;,</div><div class="line">    &quot;highlight.js&quot;: &quot;^9.12.0&quot;,</div><div class="line">    &quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;, // 简化了HTML文件的创建，引入了外部资源，创建html的入口文件，可通过此项进行多页面的配置</div><div class="line">    &quot;http-proxy-middleware&quot;: &quot;^0.17.4&quot;,</div><div class="line">    &quot;imports-loader&quot;: &quot;^0.7.0&quot;,</div><div class="line">    &quot;inject-loader&quot;: &quot;^3.0.0&quot;,</div><div class="line">    &quot;isparta-loader&quot;: &quot;^2.0.0&quot;,</div><div class="line">    &quot;json-loader&quot;: &quot;^0.5.4&quot;,</div><div class="line">    &quot;lolex&quot;: &quot;^1.4.0&quot;,</div><div class="line">    &quot;mavon-editor&quot;: &quot;^2.2.6&quot;,</div><div class="line">    &quot;mocha&quot;: &quot;^3.1.0&quot;,</div><div class="line">    &quot;node-notifier&quot;: &quot;^5.1.2&quot;, // 支持使用node发送跨平台的本地通知</div><div class="line">    &quot;node-sass&quot;: &quot;^4.7.2&quot;,</div><div class="line">    &quot;opn&quot;: &quot;^4.0.2&quot;,</div><div class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^1.3.0&quot;, // 压缩提取出的css，并解决ExtractTextPlugin分离出的js重复问题(多个文件引入同一css文件)</div><div class="line">    &quot;ora&quot;: &quot;^0.3.0&quot;, // 加载的插件</div><div class="line">    &quot;portfinder&quot;: &quot;^1.0.13&quot;, // 查看进程端口</div><div class="line">    &quot;postcss-import&quot;: &quot;^11.0.0&quot;, // 可以消耗本地文件、节点模块或web_modules</div><div class="line">    &quot;postcss-loader&quot;: &quot;^2.0.8&quot;, // 用来兼容css的插件</div><div class="line">    &quot;postcss-url&quot;: &quot;^7.2.1&quot;, // URL上重新定位、内联或复制</div><div class="line">    &quot;prismjs&quot;: &quot;^1.9.0&quot;,</div><div class="line">    &quot;pug&quot;: &quot;^2.0.0-rc.4&quot;,</div><div class="line">    &quot;rimraf&quot;: &quot;^2.6.0&quot;, // 节点的UNIX命令RM—RF,强制删除文件或者目录的命令</div><div class="line">    &quot;sass-loader&quot;: &quot;^4.1.0&quot;,</div><div class="line">    &quot;semver&quot;: &quot;^5.3.0&quot;, // 用来对特定的版本号做判断的</div><div class="line">    &quot;shelljs&quot;: &quot;^0.7.6&quot;, // 使用它来消除shell脚本在UNIX上的依赖性，同时仍然保留其熟悉和强大的命令，即可执行Unix系统命令</div><div class="line">    &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.1.6&quot;, // 压缩js文件</div><div class="line">    &quot;url-loader&quot;: &quot;^0.5.8&quot;, // 压缩文件，可将图片转化为base64</div><div class="line">    &quot;vue-data-tables&quot;: &quot;^2.1.0&quot;,</div><div class="line">    &quot;vue-easytable&quot;: &quot;^1.7.0&quot;,</div><div class="line">    &quot;vue-loader&quot;: &quot;^13.3.0&quot;, // VUE单文件组件的WebPACK加载器</div><div class="line">    &quot;vue-style-loader&quot;: &quot;^3.0.1&quot;, // 类似于样式加载程序，您可以在CSS加载器之后将其链接，以将CSS动态地注入到文档中作为样式标签</div><div class="line">    &quot;vue-svg-icon&quot;: &quot;^1.2.9&quot;,</div><div class="line">    &quot;vue-template-compiler&quot;: &quot;^2.5.9&quot;, //这个包可以用来预编译VUE模板到渲染函数，以避免运行时编译开销和CSP限制</div><div class="line">    &quot;vue-waypoint&quot;: &quot;^2.1.0&quot;,</div><div class="line">    &quot;webpack&quot;: &quot;^3.6.0&quot;,</div><div class="line">    &quot;webpack-bundle-analyzer&quot;: &quot;^2.9.0&quot;, //可视化webpack输出文件的大小</div><div class="line">    &quot;webpack-dev-middleware&quot;: &quot;^1.12.1&quot;,</div><div class="line">    &quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;, // 提供一个提供实时重载的开发服务器</div><div class="line">    &quot;webpack-hot-middleware&quot;: &quot;^2.18.0&quot;,</div><div class="line">    &quot;webpack-merge&quot;: &quot;^4.1.0&quot; // 它将数组和合并对象创建一个新对象。如果遇到函数，它将执行它们，通过算法运行结果，然后再次将返回的值封装在函数中</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  // engines是引擎，指定node和npm版本</div><div class="line">  &quot;engines&quot;: &#123;</div><div class="line">    &quot;node&quot;: &quot;&gt;= 6.0.0&quot;,</div><div class="line">    &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;</div><div class="line">  &#125;,</div><div class="line">  // 限制了浏览器或者客户端需要什么版本才可运行</div><div class="line">  &quot;browserslist&quot;: [</div><div class="line">    &quot;&gt; 1%&quot;,</div><div class="line">    &quot;last 2 versions&quot;,</div><div class="line">    &quot;not ie &lt;= 8&quot;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>devDependencies和dependencies的区别： devDependencies里面的插件只用于开发环境，不用于生产环境，即辅助作用，打包的时候需要，打包完成就不需要了。而dependencies是需要发布到生产环境的，自始至终都在。比如wepack等只是在开发中使用的包就写入到devDependencies，而像vue这种项目全程依赖的包要写入到devDependencies。</p></li><li><p>file-loader和url-loader的区别：以图片为例，file-loader可对图片进行压缩，但是还是通过文件路径进行引入，当http请求增多时会降低页面性能，而url-loader通过设定limit参数，小于limit字节的图片会被转成base64的文件，大于limit字节的将进行图片压缩的操作。总而言之，url-loader是file-loader的上层封装。</p></li></ul><hr><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><p>该文件是es6解析的一个配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">// 制定转码的规则</div><div class="line">  &quot;presets&quot;: [</div><div class="line">  // env是使用babel-preset-env插件将js进行转码成es5，并且设置不转码的AMD,COMMONJS的模块文件，制定浏览器的兼容</div><div class="line">    [&quot;env&quot;, &#123;</div><div class="line">      &quot;modules&quot;: false,</div><div class="line">      &quot;targets&quot;: &#123;</div><div class="line">        &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot;]</div><div class="line">      &#125;</div><div class="line">    &#125;],</div><div class="line">    &quot;stage-2&quot;</div><div class="line">  ],</div><div class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;, &quot;transform-vue-jsx&quot;],</div><div class="line">  &quot;comments&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├─config</div><div class="line">│ ├─dev.env.js</div><div class="line">│ ├─index.js</div><div class="line">│ ├─prod.env.js</div></pre></td></tr></table></figure><hr><h3 id="config-dev-env-js"><a href="#config-dev-env-js" class="headerlink" title="config/dev.env.js"></a>config/dev.env.js</h3><p>config内的文件其实是服务于build的，大部分是定义一个变量export出去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos; // 使用严格模式</div><div class="line">const merge = require(&apos;webpack-merge&apos;)</div><div class="line">const prodEnv = require(&apos;./prod.env&apos;)</div><div class="line">//webpack-merge提供了一个合并函数，它将数组和合并对象创建一个新对象。</div><div class="line">//如果遇到函数，它将执行它们，通过算法运行结果，然后再次将返回的值封装在函数中.这边将dev和prod进行合并</div><div class="line">module.exports = merge(prodEnv, &#123;</div><div class="line">  NODE_ENV: &apos;&quot;development&quot;&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><hr><h3 id="config-prod-env-js"><a href="#config-prod-env-js" class="headerlink" title="config/prod.env.js"></a>config/prod.env.js</h3><p>当开发时调用dev.env.js的开发环境配置；<br>当发布时调用prod.env.js的生产环境配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">module.exports = &#123;</div><div class="line">  NODE_ENV: &apos;&quot;production&quot;&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="config-index-js"><a href="#config-index-js" class="headerlink" title="config/index.js"></a>config/index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">const path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  dev: &#123;</div><div class="line">    // 开发环境下的配置</div><div class="line">    assetsSubDirectory: &apos;static&apos;, // 子目录，一般存放css，js，image等文件</div><div class="line">    assetsPublicPath: &apos;/&apos;, // 根目录</div><div class="line">    proxyTable: &#123;&#125;, // 可利用该属性解决跨域问题</div><div class="line">    host: &apos;localhost&apos;, // 地址</div><div class="line">    port: 8080, // 端口号</div><div class="line">    autoOpenBrowser: false, // 是否在编译后打开http://localhost:8080/</div><div class="line">    errorOverlay: true, // 浏览器错误提示</div><div class="line">    notifyOnErrors: true, // 跨平台错误提示</div><div class="line">    poll: false, // 使用文件系统(file system)获取文件改动的通知devServer.watchOptions</div><div class="line">    useEslint: true,</div><div class="line">    showEslintErrorsInOverlay: false,</div><div class="line">    devtool: &apos;cheap-module-eval-source-map&apos;, // 增加调试，该属性为原始源代码（仅限行）不可在生产环境中使用</div><div class="line">    cacheBusting: true, // 使缓存失败</div><div class="line">    cssSourceMap: true // 代码压缩后进行调bug定位将非常困难，于是引入sourcemap记录压缩前后的位置信息记录，当产生错误时直接定位到未压缩前的位置，将大大的方便我们调试</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  build: &#123;</div><div class="line">    // 生产环境下的配置</div><div class="line">    index: path.resolve(__dirname, &apos;../dist/index.html&apos;), // index编译后生成的位置和名字，根据需要改变后缀，比如index.php</div><div class="line">    assetsRoot: path.resolve(__dirname, &apos;../dist&apos;), // 编译后存放生成环境代码的位置</div><div class="line">    assetsSubDirectory: &apos;static&apos;, // js,css,images存放文件夹名</div><div class="line">    assetsPublicPath: &apos;/&apos;, // 发布的根目录，通常本地打包dist后打开文件会报错，此处修改为./。如果是上线的文件，可根据文件存放位置进行更改路径</div><div class="line">    productionSourceMap: true,</div><div class="line">    devtool: &apos;#source-map&apos;,</div><div class="line">    productionGzip: false, //unit的gzip命令用来压缩文件，gzip模式下需要压缩的文件的扩展名有js和css</div><div class="line">    productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</div><div class="line">    bundleAnalyzerReport: process.env.npm_config_report</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">├─build</div><div class="line">│ ├─build.js</div><div class="line">│ ├─check-versions.js</div><div class="line">│ ├─utils.js</div><div class="line">│ ├─vue-loader.conf.js</div><div class="line">│ ├─webpack.base.conf.js</div><div class="line">│ ├─webpack.dev.conf.js</div><div class="line">│ ├─webpack.prod.conf.js</div></pre></td></tr></table></figure><hr><h3 id="build-build-js"><a href="#build-build-js" class="headerlink" title="build/build.js"></a>build/build.js</h3><p>该文件作用，即构建生产版本。package.json中的scripts的build就是node build/build.js，输入命令行npm run build对该文件进行编译生成生产环境的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">require(&apos;./check-versions&apos;)() // 调用检查版本的文件</div><div class="line"></div><div class="line">process.env.NODE_ENV = &apos;production&apos; // 设置当前是生产环境</div><div class="line">// 下面定义常量引入插件</div><div class="line">const ora = require(&apos;ora&apos;) // 加载动画</div><div class="line">const rm = require(&apos;rimraf&apos;)</div><div class="line">// 删除文件</div><div class="line">const path = require(&apos;path&apos;)</div><div class="line">const chalk = require(&apos;chalk&apos;)</div><div class="line">// 对文案输出的一个彩色设置</div><div class="line">const webpack = require(&apos;webpack&apos;)</div><div class="line">const config = require(&apos;../config&apos;) // 默认读取下面的index.js文件</div><div class="line">const webpackConfig = require(&apos;./webpack.prod.conf&apos;)</div><div class="line">// 调用start的方法实现加载动画，优化用户体验</div><div class="line">const spinner = ora(&apos;building for production...&apos;)</div><div class="line">spinner.start()</div><div class="line">// 先删除dist文件再生成新文件，因为有时候会使用hash来命名，删除整个文件可避免冗余</div><div class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</div><div class="line">  if (err) throw err</div><div class="line">  webpack(webpackConfig, (err, stats) =&gt; &#123;</div><div class="line">    spinner.stop()</div><div class="line">    if (err) throw err</div><div class="line">    process.stdout.write(stats.toString(&#123;</div><div class="line">      colors: true,</div><div class="line">      modules: false,</div><div class="line">      children: false, // If you are using ts-loader, setting this to true will make TypeScript errors show up during build.</div><div class="line">      chunks: false,</div><div class="line">      chunkModules: false</div><div class="line">    &#125;) + &apos;\n\n&apos;)</div><div class="line"></div><div class="line">    if (stats.hasErrors()) &#123;</div><div class="line">      console.log(chalk.red(&apos;  Build failed with errors.\n&apos;))</div><div class="line">      process.exit(1)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    console.log(chalk.cyan(&apos;  Build complete.\n&apos;))</div><div class="line">    console.log(chalk.yellow(</div><div class="line">      &apos;  Tip: built files are meant to be served over an HTTP server.\n&apos; +</div><div class="line">      &apos;  Opening index.html over file:// won\&apos;t work.\n&apos;</div><div class="line">    ))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><hr><h3 id="build-check-versions-js"><a href="#build-check-versions-js" class="headerlink" title="build/check-versions.js"></a>build/check-versions.js</h3><p>该文件用于检测node和npm版本，实现版本依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">const chalk = require(&apos;chalk&apos;)</div><div class="line">const semver = require(&apos;semver&apos;) // 对版本进行检查</div><div class="line">const packageConfig = require(&apos;../package.json&apos;)</div><div class="line">const shell = require(&apos;shelljs&apos;)</div><div class="line"></div><div class="line">function exec (cmd) &#123;</div><div class="line">// 返回通过child_process模块的新建子进程，执行 Unix 系统命令后转成没有空格的字符串</div><div class="line">  return require(&apos;child_process&apos;).execSync(cmd).toString().trim()</div><div class="line">&#125;</div><div class="line"></div><div class="line">const versionRequirements = [</div><div class="line">  &#123;</div><div class="line">    name: &apos;node&apos;,</div><div class="line">    currentVersion: semver.clean(process.version), // 使用semver格式化版本</div><div class="line">    versionRequirement: packageConfig.engines.node // 获取package.json中设置的node版本</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"></div><div class="line">if (shell.which(&apos;npm&apos;)) &#123;</div><div class="line">  versionRequirements.push(&#123;</div><div class="line">    name: &apos;npm&apos;,</div><div class="line">    currentVersion: exec(&apos;npm --version&apos;), // 自动调用npm --version命令，并且把参数返回给exec函数，从而获取纯净的版本号</div><div class="line">    versionRequirement: packageConfig.engines.npm</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = function () &#123;</div><div class="line">  const warnings = []</div><div class="line"></div><div class="line">  for (let i = 0; i &lt; versionRequirements.length; i++) &#123;</div><div class="line">    const mod = versionRequirements[i]</div><div class="line">// 如果版本号不符合package.json文件中指定的版本号，就执行下面错误提示的代码</div><div class="line">    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</div><div class="line">      warnings.push(mod.name + &apos;: &apos; +</div><div class="line">        chalk.red(mod.currentVersion) + &apos; should be &apos; +</div><div class="line">        chalk.green(mod.versionRequirement)</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (warnings.length) &#123;</div><div class="line">    console.log(&apos;&apos;)</div><div class="line">    console.log(chalk.yellow(&apos;To use this template, you must update following to modules:&apos;))</div><div class="line">    console.log()</div><div class="line"></div><div class="line">    for (let i = 0; i &lt; warnings.length; i++) &#123;</div><div class="line">      const warning = warnings[i]</div><div class="line">      console.log(&apos;  &apos; + warning)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    console.log()</div><div class="line">    process.exit(1)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="build-utils-js"><a href="#build-utils-js" class="headerlink" title="build/utils.js"></a>build/utils.js</h3><p>utils是工具的意思，是一个用来处理css的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">const path = require(&apos;path&apos;)</div><div class="line">const config = require(&apos;../config&apos;)</div><div class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class="line">const packageConfig = require(&apos;../package.json&apos;)</div><div class="line">// 导出文件的位置，根据环境判断开发环境和生产环境，为config文件中index.js文件中定义的build.assetsSubDirectory或dev.assetsSubDirectory</div><div class="line">exports.assetsPath = function (_path) &#123;</div><div class="line">  const assetsSubDirectory = process.env.NODE_ENV === &apos;production&apos;</div><div class="line">    ? config.build.assetsSubDirectory</div><div class="line">    : config.dev.assetsSubDirectory</div><div class="line"></div><div class="line">  return path.posix.join(assetsSubDirectory, _path)</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.cssLoaders = function (options) &#123;</div><div class="line">  options = options || &#123;&#125;</div><div class="line">// 使用了css-loader和postcssLoader，通过options.usePostCSS属性来判断是否使用postcssLoader中压缩等方法</div><div class="line">  const cssLoader = &#123;</div><div class="line">    loader: &apos;css-loader&apos;,</div><div class="line">    options: &#123;</div><div class="line">      sourceMap: options.sourceMap</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  const postcssLoader = &#123;</div><div class="line">    loader: &apos;postcss-loader&apos;,</div><div class="line">    options: &#123;</div><div class="line">      sourceMap: options.sourceMap</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  function generateLoaders (loader, loaderOptions) &#123;</div><div class="line">    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]</div><div class="line">    if (loader) &#123;</div><div class="line">      loaders.push(&#123;</div><div class="line">        loader: loader + &apos;-loader&apos;,</div><div class="line">        options: Object.assign(&#123;&#125;, loaderOptions, &#123;</div><div class="line">          sourceMap: options.sourceMap</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (options.extract) &#123;</div><div class="line">    // ExtractTextPlugin可提取出文本，代表首先使用上面处理的loaders，当未能正确引入时使用vue-style-loader</div><div class="line">      return ExtractTextPlugin.extract(&#123;</div><div class="line">        use: loaders,</div><div class="line">        fallback: &apos;vue-style-loader&apos;</div><div class="line">      &#125;)</div><div class="line">    &#125; else &#123;</div><div class="line">    // 返回vue-style-loader连接loaders的最终值</div><div class="line">      return [&apos;vue-style-loader&apos;].concat(loaders)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return &#123;</div><div class="line">    css: generateLoaders(), // 需要css-loader和vue-style-loader</div><div class="line">    postcss: generateLoaders(), // 需要css-loader和postcssLoader和 vue-style-loader</div><div class="line">    less: generateLoaders(&apos;less&apos;), // 需要less-loader和vue-style-loader</div><div class="line">    sass: generateLoaders(&apos;sass&apos;, &#123; indentedSyntax: true &#125;), // 需要sass-loader和vue-style-loader</div><div class="line">    scss: generateLoaders(&apos;sass&apos;), // 需要sass-loader和vue-style-loader</div><div class="line">    stylus: generateLoaders(&apos;stylus&apos;), // 需要stylus-loader和vue-style-loader</div><div class="line">    styl: generateLoaders(&apos;stylus&apos;) // 需要sass-loader和vue-style-loader</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.styleLoaders = function (options) &#123;</div><div class="line">  const output = []</div><div class="line">  const loaders = exports.cssLoaders(options)</div><div class="line">  // 将各种css,less,sass等综合在一起得出结果输出output</div><div class="line">  for (const extension in loaders) &#123;</div><div class="line">    const loader = loaders[extension]</div><div class="line">    output.push(&#123;</div><div class="line">      test: new RegExp(&apos;\\.&apos; + extension + &apos;$&apos;),</div><div class="line">      use: loader</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return output</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.createNotifierCallback = () =&gt; &#123;</div><div class="line">// 发送跨平台通知系统</div><div class="line">  const notifier = require(&apos;node-notifier&apos;)</div><div class="line"></div><div class="line">  return (severity, errors) =&gt; &#123;</div><div class="line">    if (severity !== &apos;error&apos;) return</div><div class="line">// 当报错时输出错误信息的标题，错误信息详情，副标题以及图标</div><div class="line">    const error = errors[0]</div><div class="line">    const filename = error.file &amp;&amp; error.file.split(&apos;!&apos;).pop()</div><div class="line"></div><div class="line">    notifier.notify(&#123;</div><div class="line">      title: packageConfig.name,</div><div class="line">      message: severity + &apos;: &apos; + error.name,</div><div class="line">      subtitle: filename || &apos;&apos;,</div><div class="line">      icon: path.join(__dirname, &apos;logo.png&apos;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>path.posix：提供对路径方法的POSIX（可移植性操作系统接口）特定实现的访问，即可跨平台，区别于win32。</p></li><li><p>path.join：用于连接路径，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\”</p></li></ul><hr><h3 id="build-vue-loader-conf-js"><a href="#build-vue-loader-conf-js" class="headerlink" title="build/vue-loader.conf.js"></a>build/vue-loader.conf.js</h3><p>该文件的主要作用就是处理.vue文件，解析这个文件中的每个语言块(template、script、style)，转换成可用的js模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">const utils = require(&apos;./utils&apos;)</div><div class="line">const config = require(&apos;../config&apos;)</div><div class="line">const isProduction = process.env.NODE_ENV === &apos;production&apos;</div><div class="line">const sourceMapEnabled = isProduction</div><div class="line">  ? config.build.productionSourceMap</div><div class="line">  : config.dev.cssSourceMap</div><div class="line">// 处理项目中的css文件，生产环境和测试环境默认是打开sourceMap，而extract中的提取样式到单独文件只有在生产环境中才需要</div><div class="line">module.exports = &#123;</div><div class="line">  loaders: utils.cssLoaders(&#123;</div><div class="line">    sourceMap: sourceMapEnabled,</div><div class="line">    extract: isProduction</div><div class="line">  &#125;),</div><div class="line">  cssSourceMap: sourceMapEnabled,</div><div class="line">  cacheBusting: config.dev.cacheBusting,</div><div class="line">  // 在模版编译过程中，编译器可以将某些属性，如 src 路径，转换为require调用，以便目标资源可以由 webpack 处理.</div><div class="line">  transformToRequire: &#123;</div><div class="line">    video: [&apos;src&apos;, &apos;poster&apos;],</div><div class="line">    source: &apos;src&apos;,</div><div class="line">    img: &apos;src&apos;,</div><div class="line">    image: &apos;xlink:href&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="build-webpack-base-conf-js"><a href="#build-webpack-base-conf-js" class="headerlink" title="build/webpack.base.conf.js"></a>build/webpack.base.conf.js</h3><p>webpack.base.conf.js是开发和生产共同使用提出来的基础配置文件，主要实现配置入口，配置输出环境，配置模块resolve和插件等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">const path = require(&apos;path&apos;)</div><div class="line">const utils = require(&apos;./utils&apos;)</div><div class="line">const config = require(&apos;../config&apos;)</div><div class="line">const vueLoaderConfig = require(&apos;./vue-loader.conf&apos;)</div><div class="line"></div><div class="line">function resolve (dir) &#123;</div><div class="line">// 拼接出绝对路径</div><div class="line">  return path.join(__dirname, &apos;..&apos;, dir)</div><div class="line">&#125;</div><div class="line"></div><div class="line">const createLintingRule = () =&gt; (&#123;</div><div class="line">  test: /\.(js|vue)$/,</div><div class="line">  loader: &apos;eslint-loader&apos;,</div><div class="line">  enforce: &apos;pre&apos;,</div><div class="line">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)],</div><div class="line">  options: &#123;</div><div class="line">    formatter: require(&apos;eslint-friendly-formatter&apos;),</div><div class="line">    emitWarning: !config.dev.showEslintErrorsInOverlay</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">// path.join将路径片段进行拼接，而path.resolve将以/开始的路径片段作为根目录，在此之前的路径将会被丢弃</div><div class="line">  context: path.resolve(__dirname, &apos;../&apos;),</div><div class="line">// 配置入口，默认为单页面所以只有app一个入口</div><div class="line">  entry: &#123;</div><div class="line">    app: &apos;./src/main.js&apos;</div><div class="line">  &#125;,</div><div class="line">  // 配置出口，默认是/dist作为目标文件夹的路径</div><div class="line">  output: &#123;</div><div class="line">    path: config.build.assetsRoot,</div><div class="line">    filename: &apos;[name].js&apos;,</div><div class="line">    publicPath: process.env.NODE_ENV === &apos;production&apos;</div><div class="line">      ? config.build.assetsPublicPath</div><div class="line">      : config.dev.assetsPublicPath // 公共存放路径</div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    // 自动的扩展后缀，比如一个js文件，则引用时书写可不要写.js</div><div class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</div><div class="line">    // 创建路径的别名，比如增加&apos;components&apos;: resolve(&apos;src/components&apos;)等</div><div class="line">    alias: &#123;</div><div class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</div><div class="line">      &apos;@&apos;: resolve(&apos;src&apos;),</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  // 使用插件配置相应文件的处理方法</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      ...(config.dev.useEslint ? [createLintingRule()] : []),</div><div class="line">      // 使用vue-loader将vue文件转化成js的模块</div><div class="line">      &#123;</div><div class="line">        test: /\.vue$/,</div><div class="line">        loader: &apos;vue-loader&apos;,</div><div class="line">        options: vueLoaderConfig</div><div class="line">      &#125;,</div><div class="line">      // js文件需要通过babel-loader进行编译成es5文件以及压缩等操作</div><div class="line">      &#123;</div><div class="line">        test: /\.js$/,</div><div class="line">        loader: &apos;babel-loader&apos;,</div><div class="line">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;), resolve(&apos;node_modules/webpack-dev-server/client&apos;)]</div><div class="line">      &#125;,</div><div class="line">      // 图片、音像、字体都使用url-loader进行处理，超过10000会编译成base64</div><div class="line">      &#123;</div><div class="line">        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</div><div class="line">        loader: &apos;url-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          limit: 10000,</div><div class="line">          name: utils.assetsPath(&apos;img/[name].[hash:7].[ext]&apos;)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,</div><div class="line">        loader: &apos;url-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          limit: 10000,</div><div class="line">          name: utils.assetsPath(&apos;media/[name].[hash:7].[ext]&apos;)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,</div><div class="line">        loader: &apos;url-loader&apos;,</div><div class="line">        options: &#123;</div><div class="line">          limit: 10000,</div><div class="line">          name: utils.assetsPath(&apos;fonts/[name].[hash:7].[ext]&apos;)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  node: &#123;</div><div class="line">    // 以下选项是Node.js全局变量或模块，这里主要是防止webpack注入一些Node.js的东西到vue中</div><div class="line">    dgram: &apos;empty&apos;,</div><div class="line">    fs: &apos;empty&apos;,</div><div class="line">    net: &apos;empty&apos;,</div><div class="line">    tls: &apos;empty&apos;,</div><div class="line">    child_process: &apos;empty&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="build-webpack-dev-conf-js"><a href="#build-webpack-dev-conf-js" class="headerlink" title="build/webpack.dev.conf.js"></a>build/webpack.dev.conf.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">const utils = require(&apos;./utils&apos;)</div><div class="line">const webpack = require(&apos;webpack&apos;)</div><div class="line">const config = require(&apos;../config&apos;)</div><div class="line">// 通过webpack-merge实现webpack.dev.conf.js对wepack.base.config.js的继承</div><div class="line">const merge = require(&apos;webpack-merge&apos;)</div><div class="line">const path = require(&apos;path&apos;)</div><div class="line">const baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</div><div class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</div><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class="line">// 美化webpack的错误信息和日志的插件</div><div class="line">const FriendlyErrorsPlugin = require(&apos;friendly-errors-webpack-plugin&apos;)</div><div class="line">const portfinder = require(&apos;portfinder&apos;) // 查看空闲端口位置，默认情况下搜索8000这个端口</div><div class="line">const HOST = process.env.HOST // processs为node的一个全局对象获取当前程序的环境变量，即host</div><div class="line">const PORT = process.env.PORT &amp;&amp; Number(process.env.PORT)</div><div class="line"></div><div class="line">const devWebpackConfig = merge(baseWebpackConfig, &#123;</div><div class="line">  module: &#123;</div><div class="line">    // 规则是工具utils中处理出来的styleLoaders，生成了css，less,postcss等规则</div><div class="line">    rules: utils.styleLoaders(&#123; sourceMap: config.dev.cssSourceMap, usePostCSS: true &#125;)</div><div class="line">  &#125;,</div><div class="line">  devtool: config.dev.devtool, // 增强调试，上文有提及</div><div class="line">  // 此处的配置都是在config的index.js中设定好了</div><div class="line">  devServer: &#123;</div><div class="line">    clientLogLevel: &apos;warning&apos;, // 控制台显示的选项有none, error, warning或者info</div><div class="line">    // 当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为index.html</div><div class="line">    historyApiFallback: &#123;</div><div class="line">      rewrites: [</div><div class="line">        &#123; from: /.*/, to: path.posix.join(config.dev.assetsPublicPath, &apos;index.html&apos;) &#125;,</div><div class="line">      ],</div><div class="line">    &#125;,</div><div class="line">    hot: true, // 热加载</div><div class="line">    contentBase: false, // since we use CopyWebpackPlugin.</div><div class="line">    compress: true, // 压缩</div><div class="line">    host: HOST || config.dev.host,</div><div class="line">    port: PORT || config.dev.port,</div><div class="line">    open: config.dev.autoOpenBrowser, // 调试时自动打开浏览器</div><div class="line">    overlay: config.dev.errorOverlay</div><div class="line">      ? &#123; warnings: false, errors: true &#125;</div><div class="line">      : false, // warning 和 error 都要显示</div><div class="line">    publicPath: config.dev.assetsPublicPath,</div><div class="line">    proxy: config.dev.proxyTable,</div><div class="line">    quiet: true, // 控制台是否禁止打印警告和错误,若用FriendlyErrorsPlugin 此处为 true</div><div class="line">    watchOptions: &#123;</div><div class="line">      poll: config.dev.poll, // 文件系统检测改动</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new webpack.DefinePlugin(&#123;</div><div class="line">      &apos;process.env&apos;: require(&apos;../config/dev.env&apos;)</div><div class="line">    &#125;),</div><div class="line">    new webpack.HotModuleReplacementPlugin(), // 模块热替换插件，修改模块时不需要刷新页面</div><div class="line">    new webpack.NamedModulesPlugin(), // 显示文件的正确名字</div><div class="line">    new webpack.NoEmitOnErrorsPlugin(), // 当webpack编译错误的时候，来中断打包进程，防止错误代码打包到文件中</div><div class="line">    // 该插件可自动生成一个 html5 文件或使用模板文件将编译好的代码注入进去</div><div class="line">    new HtmlWebpackPlugin(&#123;</div><div class="line">      filename: &apos;index.html&apos;,</div><div class="line">      template: &apos;index.html&apos;,</div><div class="line">      inject: true</div><div class="line">    &#125;),</div><div class="line">    // 复制插件</div><div class="line">    new CopyWebpackPlugin([</div><div class="line">      &#123;</div><div class="line">        from: path.resolve(__dirname, &apos;../static&apos;),</div><div class="line">        to: config.dev.assetsSubDirectory,</div><div class="line">        ignore: [&apos;.*&apos;]</div><div class="line">      &#125;</div><div class="line">    ])</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line">module.exports = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  portfinder.basePort = process.env.PORT || config.dev.port</div><div class="line">  // 查找端口号</div><div class="line">  portfinder.getPort((err, port) =&gt; &#123;</div><div class="line">    if (err) &#123;</div><div class="line">      reject(err)</div><div class="line">    &#125; else &#123;</div><div class="line">      // 端口被占用时就重新设置env和devServer的端口</div><div class="line">      process.env.PORT = port</div><div class="line">      devWebpackConfig.devServer.port = port</div><div class="line">      // Add FriendlyErrorsPlugin</div><div class="line">      devWebpackConfig.plugins.push(new FriendlyErrorsPlugin(&#123;</div><div class="line">        compilationSuccessInfo: &#123;</div><div class="line">          messages: [`Your application is running here: http://$&#123;devWebpackConfig.devServer.host&#125;:$&#123;port&#125;`],</div><div class="line">        &#125;,</div><div class="line">        onErrors: config.dev.notifyOnErrors</div><div class="line">        ? utils.createNotifierCallback()</div><div class="line">        : undefined</div><div class="line">      &#125;))</div><div class="line">      resolve(devWebpackConfig)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><hr><h3 id="build-webpack-prod-conf-js"><a href="#build-webpack-prod-conf-js" class="headerlink" title="build/webpack.prod.conf.js"></a>build/webpack.prod.conf.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">const path = require(&apos;path&apos;)</div><div class="line">const utils = require(&apos;./utils&apos;)</div><div class="line">const webpack = require(&apos;webpack&apos;)</div><div class="line">const config = require(&apos;../config&apos;)</div><div class="line">const merge = require(&apos;webpack-merge&apos;)</div><div class="line">const baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</div><div class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</div><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</div><div class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</div><div class="line">const OptimizeCSSPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</div><div class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;)</div><div class="line"></div><div class="line">const env = require(&apos;../config/prod.env&apos;)</div><div class="line"></div><div class="line">const webpackConfig = merge(baseWebpackConfig, &#123;</div><div class="line">  module: &#123;</div><div class="line">  // 调用utils.styleLoaders的方法</div><div class="line">    rules: utils.styleLoaders(&#123;</div><div class="line">      sourceMap: config.build.productionSourceMap, // 开启调试的模式。默认为true</div><div class="line">      extract: true,</div><div class="line">      usePostCSS: true</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  devtool: config.build.productionSourceMap ? config.build.devtool : false,</div><div class="line">  output: &#123;</div><div class="line">    path: config.build.assetsRoot,</div><div class="line">    filename: utils.assetsPath(&apos;js/[name].[chunkhash].js&apos;),</div><div class="line">    chunkFilename: utils.assetsPath(&apos;js/[id].[chunkhash].js&apos;)</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new webpack.DefinePlugin(&#123;</div><div class="line">      &apos;process.env&apos;: env</div><div class="line">    &#125;),</div><div class="line">    new UglifyJsPlugin(&#123;</div><div class="line">      uglifyOptions: &#123;</div><div class="line">        compress: &#123; // 压缩</div><div class="line">          warnings: false, // 警告：true保留警告，false不保留</div><div class="line">          drop_console: true</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      sourceMap: config.build.productionSourceMap,</div><div class="line">      parallel: true</div><div class="line">    &#125;),</div><div class="line">    // 抽取文本。比如打包之后的index页面有style插入，就是这个插件抽取出来的，减少请求</div><div class="line">    new ExtractTextPlugin(&#123;</div><div class="line">      filename: utils.assetsPath(&apos;css/[name].[contenthash].css&apos;),</div><div class="line">      allChunks: true,</div><div class="line">    &#125;),</div><div class="line">    // 优化css插件</div><div class="line">    new OptimizeCSSPlugin(&#123;</div><div class="line">      cssProcessorOptions: config.build.productionSourceMap</div><div class="line">        ? &#123; safe: true, map: &#123; inline: false &#125; &#125;</div><div class="line">        : &#123; safe: true &#125;</div><div class="line">    &#125;),</div><div class="line">    // html打包</div><div class="line">    new HtmlWebpackPlugin(&#123;</div><div class="line">      filename: config.build.index,</div><div class="line">      template: &apos;index.html&apos;,</div><div class="line">      inject: true,</div><div class="line">      minify: &#123;</div><div class="line">        removeComments: true, // 删除注释</div><div class="line">        collapseWhitespace: true, // 删除空格</div><div class="line">        removeAttributeQuotes: true // 删除属性的引号</div><div class="line">      &#125;,</div><div class="line">      chunksSortMode: &apos;dependency&apos; // 模块排序，按照我们需要的顺序排序</div><div class="line">    &#125;),</div><div class="line">    new webpack.HashedModuleIdsPlugin(),</div><div class="line">    new webpack.optimize.ModuleConcatenationPlugin(),</div><div class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      name: &apos;vendor&apos;,</div><div class="line">      minChunks (module) &#123;</div><div class="line">        return (</div><div class="line">          module.resource &amp;&amp;</div><div class="line">          /\.js$/.test(module.resource) &amp;&amp;</div><div class="line">          module.resource.indexOf(</div><div class="line">            path.join(__dirname, &apos;../node_modules&apos;)</div><div class="line">          ) === 0</div><div class="line">        )</div><div class="line">      &#125;</div><div class="line">    &#125;),</div><div class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      name: &apos;manifest&apos;,</div><div class="line">      minChunks: Infinity</div><div class="line">    &#125;),</div><div class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      name: &apos;app&apos;,</div><div class="line">      async: &apos;vendor-async&apos;,</div><div class="line">      children: true,</div><div class="line">      minChunks: 3</div><div class="line">    &#125;),</div><div class="line">    // 复制，比如打包完之后需要把打包的文件复制到dist里面</div><div class="line">    new CopyWebpackPlugin([</div><div class="line">      &#123;</div><div class="line">        from: path.resolve(__dirname, &apos;../static&apos;),</div><div class="line">        to: config.build.assetsSubDirectory,</div><div class="line">        ignore: [&apos;.*&apos;]</div><div class="line">      &#125;</div><div class="line">    ]),</div><div class="line">    new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line">if (config.build.productionGzip) &#123;</div><div class="line">  const CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;)</div><div class="line">  webpackConfig.plugins.push(</div><div class="line">    new CompressionWebpackPlugin(&#123;</div><div class="line">      asset: &apos;[path].gz[query]&apos;,</div><div class="line">      algorithm: &apos;gzip&apos;,</div><div class="line">      test: new RegExp(</div><div class="line">        &apos;\\.(&apos; +</div><div class="line">        config.build.productionGzipExtensions.join(&apos;|&apos;) +</div><div class="line">        &apos;)$&apos;</div><div class="line">      ),</div><div class="line">      threshold: 10240,</div><div class="line">      minRatio: 0.8</div><div class="line">    &#125;)</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (config.build.bundleAnalyzerReport) &#123;</div><div class="line">  const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin</div><div class="line">  webpackConfig.plugins.push(new BundleAnalyzerPlugin())</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = webpackConfig</div></pre></td></tr></table></figure><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文将vue本身自带的英文注释删除了，但英文注释非常有用可以仔细阅读，希望对大家学习vue和webpack都有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Vue-cli是构建Vue单页应用的脚手架，输入一串指定的命令行从而自动生成Vue.js+Wepack的项目模板。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli配置环境变量[转]</title>
    <link href="http://yoursite.com/2017/03/06/Vue-cli%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%5B%E8%BD%AC%5D/"/>
    <id>http://yoursite.com/2017/03/06/Vue-cli配置环境变量[转]/</id>
    <published>2017-03-06T14:19:00.000Z</published>
    <updated>2018-11-15T12:38:21.614Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>vue-cli环境下，默认已经配置了一个NODE_ENV的环境变量，有时我们可能觉得光是只有一个开发环境和生产环境还不够，比如我们还想来一个测试坏境，这时候就需要自己定义了。</p></blockquote><a id="more"></a><p>在实际项目开发中，经常会碰到需要环境变量的情景，在vue-cli的环境下，默认已经配置了一个NODE_ENV的环境变量，当npm run dev的时候这个是development， 当npm run build 的时候这个是production.用过vue-cli开发的通常对这个都不陌生，用这个最多的基本就是我们配置ajax请求的域名头了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (process.env.NODE_ENV === &apos;production&apos;) &#123;</div><div class="line">  axios.defaults.baseURL = &apos;http://customer.medsci.cn&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>通常会有测试服务器和正式服务器环境之分，我们请求的域名也得区分，所以通过proces.env.NODE_ENV来区分环境变量，通过这个能够全局访问的参数，我们可以处理很多需要环境处理不同的操作。</p><p>上面的process.env.NODE_ENV是vue-cli默认配置的，有时候我们可能觉得光是只有一个开发环境和生产环境还不够，比如我们还想来一个测试坏境，这时候就需要自己定义了。以下以windows坏境为例，mac环境类似。</p><p>首先可以安装cross-env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install cross-env --save-dev</div></pre></td></tr></table></figure><p>vue-cli的配置本质就是webpack的配置，当我们运行npm run dev 的时候，其实执行的是package.json 中的scripts 的dev中 ，即build/dev-server.js 这里面一系列的配置启动整个服务。</p><p>我们只想加一个环境变量，可以复制一份，在dev下加一个devtest命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;devtest&quot;: &quot;cross-env TESTING=true  node build/dev-server.js&quot;</div></pre></td></tr></table></figure><p>这样我们就可以通过npm run devtest也能启动整个服务了，注意上面的命令，我们加了一个TESTING=true ，这个就是加入的环境变量，TESTING:true， 通过上面的devtest的配置，我们可以运行npm run devtest像nppm run dev那样运行起来整个程序，不过我们发现，此时在项目中我们获取不到process.env.TESTING这个变量，这是为什么呢，如果是直接用webpack是可以的，经过查看，是在vue-cli的一系列配置文件中，已经写死了这些，不过我们可以改动加上<br>在根目录 config下，有dev.env.js和prod.env.js，这两个文件就是关键了，我们在NODE_ENV下面加一行TESTING:process.env.TESTING。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line"></div><div class="line"></div><div class="line">  NODE_ENV: &apos;&quot;production&quot;&apos;，</div><div class="line">  TESTING: process.env.TESTING</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这时我们就能全局访问process.env.TESTING变量了，当我们npm run dev的时候，这个是undefined，当npm run devtest的时候是true， 同理我们可以添加一个npm run test命令， 与npm run build命令对应，加入打包测试的环境变量。<br>vue-cli的配置本质还是webpack的配置， 普通的webpack配置也可以采用此方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;vue-cli环境下，默认已经配置了一个NODE_ENV的环境变量，有时我们可能觉得光是只有一个开发环境和生产环境还不够，比如我们还想来一个测试坏境，这时候就需要自己定义了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-小技巧总结[转]</title>
    <link href="http://yoursite.com/2017/03/03/Vue-%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/03/03/Vue-小技巧总结/</id>
    <published>2017-03-03T09:41:00.000Z</published>
    <updated>2018-11-15T12:37:34.946Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>这篇文章主要是为了将开发过程中知道的一些小技巧进行总结，帮助使用Vue开发的小伙伴们愉快地采坑。</p></blockquote><a id="more"></a><hr><h3 id="组件实例style的scoped"><a href="#组件实例style的scoped" class="headerlink" title="组件实例style的scoped"></a>组件实例style的scoped</h3><p>场景：在组件中用js动态创建的dom，添加样式不生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    let a = document.querySelector(&apos;test&apos;)</div><div class="line">    let newDom = document.createElement(&apos;div&apos;)</div><div class="line">    newDom.setAttribute(&apos;class&apos;, &apos;testAdd&apos;)</div><div class="line">    a.appendChild(newDom)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style scoped&gt;</div><div class="line">    .test&#123;</div><div class="line">       background:blue;</div><div class="line">       height:100px;</div><div class="line">       width:100px;</div><div class="line">    &#125;</div><div class="line">    .testAdd&#123;</div><div class="line">        background:red;</div><div class="line">        height:100px;</div><div class="line">        width:100px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// test生效   testAdd 不生效</div><div class="line">&lt;div data-v-1b971ada class=&quot;test&quot;&gt;&lt;div class=&quot;testAdd&quot;&gt;&lt;/div&gt;&lt;/div&gt;</div><div class="line">.test[data-v-1b971ada] &#123; // 注意data-v-1b971ada</div><div class="line">    background:blue;</div><div class="line">    height:100px;</div><div class="line">    width:100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原因:</p><p>当 <style> 标签有 scoped 属性时，它的 CSS 只作用于当前组件中的元素。<br>它会为组件中所有的标签和class样式添加一个scoped标识，就像上面结果中的data-v-1b971ada。<br>所以原因就很清楚了：因为动态添加的dom没有scoped添加的标识，没有跟testAdd的样式匹配起来，导致样式失效。</p><p>解决方式：</p><ul><li><p>去掉该组件的scoped</p></li><li><p>动态添加style</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newDom.style.height=&apos;100px&apos;;</div><div class="line">newDom.style.width=&apos;100px&apos;;</div><div class="line">newDom.style.background=&apos;red&apos;;</div></pre></td></tr></table></figure><hr><h3 id="Vue-数组-对象更新-视图不更新"><a href="#Vue-数组-对象更新-视图不更新" class="headerlink" title="Vue 数组/对象更新 视图不更新"></a>Vue 数组/对象更新 视图不更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">data() &#123; // data数据</div><div class="line">    return &#123;</div><div class="line">        arr: [1,2,3],</div><div class="line">        obj:&#123;</div><div class="line">               a: 1,</div><div class="line">                b: 2</div><div class="line">             &#125;</div><div class="line">           &#125;;</div><div class="line">        &#125;,</div><div class="line">       // 数据更新 数组视图不更新</div><div class="line">        this.arr[0] = &apos;OBKoro1&apos;;</div><div class="line">        this.arr.length = 1;</div><div class="line">        console.log(arr);// [&apos;OBKoro1&apos;];</div><div class="line">        // 数据更新 对象视图不更新</div><div class="line">        this.obj.c = &apos;OBKoro1&apos;;</div><div class="line">        delete this.obj.a;</div><div class="line">        console.log(obj);  // &#123;b:2,c:&apos;OBKoro1&apos;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于js的限制，Vue 不能检测以上数组的变动，以及对象的添加/删除，很多人会因为像上面这样操作，出现视图没有更新的问题。</p><p>解决方式：</p><ul><li>this.$set(array)</li></ul></style></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这篇文章主要是为了将开发过程中知道的一些小技巧进行总结，帮助使用Vue开发的小伙伴们愉快地采坑。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序-全栈开发(mpvue+koa2+mysql)</title>
    <link href="http://yoursite.com/2017/03/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91(mpvue+koa2+mysql)/"/>
    <id>http://yoursite.com/2017/03/02/小程序-全栈开发(mpvue+koa2+mysql)/</id>
    <published>2017-03-02T08:06:52.000Z</published>
    <updated>2018-11-15T12:37:23.854Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>接触小程序并做了一些项目之后，又开始了Vue的旅程，受其核心思想的影响，对数据/状态管理、组件化、跨平台等都有较高的追求，mpvue 是一个使用 Vue.js开发小程序的前端框架，由此开始了mpvue踩坑之旅，想在提高代码可读性的同时，也增加一点Vue.js的开发体验。</p></blockquote><a id="more"></a><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><hr><p>前端： 微信小程序、mpvue、 eslint、sass、ES6、ES7<br>后端：koa2、Koa-Router、Knex、腾讯云Wafer2<br>数据库：Mysql<br>数据库可视化工具：Navicate Premium</p><hr><h2 id="小程序介绍"><a href="#小程序介绍" class="headerlink" title="小程序介绍"></a>小程序介绍</h2><p>一个功能简单的小程序，包含了个人中心、图书列表、个人评论列表三个tab页，后端的数据定义、分类、和存取等，各有其色。</p><hr><h3 id="成果分享"><a href="#成果分享" class="headerlink" title="成果分享"></a>成果分享</h3><p>个人中心：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/user1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>个人中心：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/user2.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图书列表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/home1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图书详情：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/home1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>评论列表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/list-01.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ow43yt5wd.bkt.clouddn.com/naotu.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>*全局安装vue-cli</p><p>$npm install –global vue-cli</p><p>*创建基于mpvue-quickstart模板的新项目，一路回车。</p><p>$vue init mpvue/mpvue-quickstart koa-wx</p><p>*安装依赖</p><p>$cd koa-wx</p><p>$npm install</p><p>$npm run dev</p><hr><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">├── build           // 构建相关  </div><div class="line">├── config           // 配置相关</div><div class="line">├── dist            // 编译后静态文件 </div><div class="line">├── node_modules        // 依赖相关</div><div class="line">├── server            // 服务端源代码</div><div class="line">│  ├── controllers     </div><div class="line">│  ├── middlewares    </div><div class="line">│  ├── node_modules    </div><div class="line">│  ├── routes    </div><div class="line">│  ├── tools     </div><div class="line">│  ├── .eslintrc.js </div><div class="line">│  ├── .eslintrc.json  </div><div class="line">│  ├── app.js     </div><div class="line">│  ├── config.js   </div><div class="line">│  ├── nodemon.json   </div><div class="line">│  ├── package.json    </div><div class="line">│  ├── process.prod.json   </div><div class="line">│  ├── qcloud.js   </div><div class="line">│  ├── README.md    </div><div class="line">│  ├── tools.md  </div><div class="line">├── src            // 前端源代码</div><div class="line">│  ├── components     </div><div class="line">│  ├── config    </div><div class="line">│  ├── mock     </div><div class="line">│  ├── pages     </div><div class="line">│  ├── styles     </div><div class="line">│  ├── utils       </div><div class="line">│  ├── App.vue        </div><div class="line">│  ├── main.js       </div><div class="line">│  ├── store.js      </div><div class="line">│  ├── weui.css    </div><div class="line">├── static          </div><div class="line">├── .babelrc         </div><div class="line">├── .editorconfig      </div><div class="line">├── .eslintignore    </div><div class="line">├── .eslintrc.js       </div><div class="line">├── .postcssrc.js      </div><div class="line">├── index.html        </div><div class="line">└── package.json      </div><div class="line">└── package-lock.json </div><div class="line">└── project.config.json </div><div class="line">└── README.md</div></pre></td></tr></table></figure><hr><h3 id="搭建后端本地开发环境"><a href="#搭建后端本地开发环境" class="headerlink" title="搭建后端本地开发环境"></a>搭建后端本地开发环境</h3><p>打开 server/config.js添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const CONF = &#123;</div><div class="line">      // 其他配置 ...</div><div class="line">    serverHost: &apos;localhost&apos;,</div><div class="line">    tunnelServerUrl: &apos;&apos;,</div><div class="line">    tunnelSignatureKey: &apos;27fb7d1c161b7ca52d73cce0f1d833f9f5b5ec89&apos;,</div><div class="line">      // 腾讯云相关配置可以查看云 API 秘钥控制台：https://console.cloud.tencent.com/capi</div><div class="line">    qcloudAppId: &apos;您的腾讯云 AppID&apos;,</div><div class="line">    qcloudSecretId: &apos;您的腾讯云 SecretId&apos;,</div><div class="line">    qcloudSecretKey: &apos;您的腾讯云 SecretKey&apos;,</div><div class="line">    wxMessageToken: &apos;weixinmsgtoken&apos;,</div><div class="line">    networkTimeout: 30000</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>并修改 MySQL 相关的配置为本地的 MySQL 数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql: &#123;</div><div class="line">    host: &apos;localhost&apos;,</div><div class="line">    port: 3306,</div><div class="line">    user: &apos;root&apos;,</div><div class="line">    db: &apos;cAuth&apos;,</div><div class="line">    pass: &apos;******&apos;,</div><div class="line">    char: &apos;utf8mb4&apos;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p>*切换到服务端代码目录<br>$cd server</p><p>*安装依赖<br>$npm install</p><p>*安装全局依赖<br>$npm install -g nodemon</p><p>$npm run dev</p><p>初始化数据库 - 打开 terminal 输入如下命令：</p><p>$node tools/initdb.js</p><p>进入Mysql选中刚才创建的数据库，输入 show tables; 可以看到初始化时创建了一个名叫 cSessionInfo 的表。说明本地环境已经搭建成功。</p><hr><h3 id="部署到腾讯云环境"><a href="#部署到腾讯云环境" class="headerlink" title="部署到腾讯云环境"></a>部署到腾讯云环境</h3><p>当本地本地开发出一版时，可以部署到腾讯云的开发环境，这样就可以在线上访问该项目。</p><p>首先修改项目根目录的 project.config.json 文件，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;qcloudRoot&quot;: &quot;./server/&quot;,</div></pre></td></tr></table></figure><p>然后将本地开发时添加到 server/config.js 的配置删除，在 mysql.pass 那里填上自己的 APPID。</p><p>接着进入小程序开发工具，点击右上角的 腾讯云，上传测试代码，弹出如图选项。第一次部署如下选择，之后再次上传选择 智能上传 即可。部署成功会有提示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://static.imkk.xin/blog/photo/uploadToTecentCloud.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>###上传前端代码</p><p>在小程序开发工具右上角找到 上传 选项，填写版本信息，上传后进入开发者控制台，开发管理页面，将该小程序设置为体验版本。</p><p>然后在用户身份 ==&gt; 成员管理中，添加项目成员，配置权限，这样好友也可以体验该小程序了。</p><p>项目地址：<a href="https://github.com/wangqian2017/mpvue-koa2" target="_blank" rel="external">https://github.com/wangqian2017/mpvue-koa2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;接触小程序并做了一些项目之后，又开始了Vue的旅程，受其核心思想的影响，对数据/状态管理、组件化、跨平台等都有较高的追求，mpvue 是一个使用 Vue.js开发小程序的前端框架，由此开始了mpvue踩坑之旅，想在提高代码可读性的同时，也增加一点Vue.js的开发体验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
