{"meta":{"title":"W | 个人博客 | web前端","subtitle":null,"description":"前端","author":"wangxiaobai","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-04-11T08:28:54.000Z","updated":"2018-04-11T08:29:04.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-04-11T08:28:32.000Z","updated":"2018-04-11T08:28:44.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ES6---Airbnb JavaScript（ES6）代码规范","slug":"ES6---Airbnb JavaScript（ES6）代码规范","date":"2018-04-11T08:06:52.000Z","updated":"2018-04-11T15:14:50.000Z","comments":true,"path":"2018/04/11/ES6---Airbnb JavaScript（ES6）代码规范/","link":"","permalink":"http://yoursite.com/2018/04/11/ES6---Airbnb JavaScript（ES6）代码规范/","excerpt":"导语 本文摘自—Airbnb JavaScript（ES6）代码规范。","text":"导语 本文摘自—Airbnb JavaScript（ES6）代码规范。 声明变量的新姿势用let不用varES6之前我们使用var声明一个变量，但是它有很多弊病： 无块级作用域变量，很容易声明全局变量。 变量提升。 可重复声明。 12345678910var a = [];for (var i = 0; i &lt; 10; i++) &#123; a[i] = function () &#123; console.log(i); &#125;;&#125;a[6](); // 10a[7](); // 10a[8](); // 10a[9](); // 10 所以，你有什么理由不用let? 某些场景，const比let更好const和let的唯一区别就是，const不可以被更改，所以当声明变量的时候，尤其是在声明容易被更改的全局变量的时候，尽量使用const。 更好的代码语义化，一眼看到就是常量。 另一个原因是因为JavaScript 编译器对const的优化要比let好，多使用const，有利于提高程序的运行效率。 所有的函数都应该设置为常量。 动态字符串不要使用“双引号”，一律用单引号或反引号。 12345678// lowconst a = &quot;foobar&quot;;const b = &apos;foo&apos; + a + &apos;bar&apos;;// bestconst a = &apos;foobar&apos;;const b = `foo$&#123;a&#125;bar`;const c = &apos;foobar&apos;; 解构赋值的骚操作变量赋值在用到数组成员对变量赋值时，尽量使用解构赋值。 12345678const arr = [1, 2, 3, 4];// lowconst first = arr[0];const second = arr[1];// goodconst [first, second] = arr; 函数传对象函数的参数如果是对象的成员，优先使用解构赋值。 123456789// lowfunction getFullName(user) &#123; const firstName = user.firstName; const lastName = user.lastName;&#125;// goodfunction getFullName(&#123; firstName, lastName &#125;) &#123;&#125; 如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。 1234567891011// lowfunction processInput(input) &#123; return [left, right, top, bottom];&#125;// goodfunction processInput(input) &#123; return &#123; left, right, top, bottom &#125;;&#125;const &#123; left, right &#125; = processInput(input); 关于对象的细节逗号单行定义的对象结尾不要逗号： 12345// lowconst a = &#123; k1: v1, k2: v2, &#125;;// goodconst a = &#123; k1: v1, k2: v2 &#125;; 多行定义的对象要保留逗号：： 1234567891011// lowconst b = &#123; k1: v1, k2: v2&#125;;// goodconst b = &#123; k1: v1, k2: v2,&#125;; 一次性初始化完全不要声明之后又给对象添加新属性： 1234567// lowconst a = &#123;&#125;;a.x = 3;// goodconst a = &#123; x: null &#125;;a.x = 3; 如果一定非要加请使用Object.assign： 12const a = &#123;&#125;;Object.assign(a, &#123; x: 3 &#125;); 如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义： 12345678910111213/ lowconst obj = &#123; id: 5, name: &apos;San Francisco&apos;,&#125;;obj[getKey(&apos;enabled&apos;)] = true;// goodconst obj = &#123; id: 5, name: &apos;San Francisco&apos;,[getKey(&apos;enabled&apos;)]: true,&#125;; 在简洁一点1234567891011121314151617181920212223var ref = &apos;some value&apos;;// lowconst atom = &#123; ref: ref, value: 1, addValue: function (value) &#123; return atom.value + value; &#125;,&#125;;// goodconst atom = &#123; ref, value: 1, addValue(value) &#123; return atom.value + value; &#125;,&#125;; 数组扩展运算符…使用扩展运算符（…）拷贝数组： 1234567891011// 还在用for i 你就太low了const len = items.length;const itemsCopy = [];let i;for (i = 0; i &lt; len; i++) &#123; itemsCopy[i] = items[i];&#125;// cool !const itemsCopy = [...items]; Array.form（）用 Array.from 方法，将类似数组的对象转为数组： 12const foo = document.querySelectorAll(&apos;.foo&apos;);const nodes = Array.from(foo); 函数箭头函数=&gt;立即执行函数可以写成箭头函数的形式： 123(() =&gt; &#123; console.log(&apos;Welcome to the Internet.&apos;);&#125;)(); 尽量写箭头函数使你的代码看起来简洁优雅： 1234567// low[1, 2, 3].map(function (x) &#123; return x * x;&#125;);// cool ![1, 2, 3].map(x =&gt; x * x); 别再用arguments（类数组）了！使用 rest 运算符（…）代替，rest 运算符可以提供一个真正的数组。 12345678910// lowfunction concatenateAll() &#123; const args = Array.prototype.slice.call(arguments); return args.join(&apos;&apos;);&#125;// goodfunction concatenateAll(...args) &#123; return args.join(&apos;&apos;);&#125; 传参时试试设置默认值123456789// lowfunction handleThings(opts) &#123; opts = opts || &#123;&#125;;&#125;// goodfunction handleThings(opts = &#123;&#125;) &#123; // ...&#125; Object？Map！简单的键值对优先Map如果只是简单的key: value结构，建议优先使用Map，因为Map提供方便的遍历机制。 12345678910111213let map = new Map(arr);// 遍历key值for (let key of map.keys()) &#123; console.log(key);&#125;// 遍历value值for (let value of map.values()) &#123; console.log(value);&#125;// 遍历key和value值for (let item of map.entries()) &#123; console.log(item[0], item[1]);&#125; class语法123456789101112131415161718192021// lowfunction Queue(contents = []) &#123; this._queue = [...contents];&#125;Queue.prototype.pop = function() &#123; const value = this._queue[0]; this._queue.splice(0, 1); return value;&#125;// goodclass Queue &#123; constructor(contents = []) &#123; this._queue = [...contents]; &#125; pop() &#123; const value = this._queue[0]; this._queue.splice(0, 1); return value; &#125;&#125; 模块化引入模块使用import取代require，因为Module是Javascript模块的标准写法。 1234567// badconst moduleA = require(&apos;moduleA&apos;);const func1 = moduleA.func1;const func2 = moduleA.func2;// goodimport &#123; func1, func2 &#125; from &apos;moduleA&apos;; 输出模块使用export输出变量，拒绝module.exports: 123456789import React from &apos;react&apos;;class Breadcrumbs extends React.Component &#123; render() &#123; return &lt;nav /&gt;; &#125;&#125;;export default Breadcrumbs; 输出单个值，使用export default。 输出多个值，使用export。 export default与普通的export不要同时使用。 编码规范模块输出一个函数，首字母应该小写： 1234function getData() &#123;&#125;export default getData;","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"Markdown---入门指南","slug":"markdown-入门指南","date":"2017-10-12T08:06:52.000Z","updated":"2018-04-11T15:14:45.000Z","comments":true,"path":"2017/10/12/markdown-入门指南/","link":"","permalink":"http://yoursite.com/2017/10/12/markdown-入门指南/","excerpt":"导语 Markdown 是一种轻量级的「标记语言」，语法十分简单，常用的标记符号不超过十个。","text":"导语 Markdown 是一种轻量级的「标记语言」，语法十分简单，常用的标记符号不超过十个。 Markdown 语法的简要规则标题在Markdown中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。 1234567# 一级标题## 二级标题### 三级标题... 以此类推，总共六级标题，建议在 # 号后加空格。 列表列表分为有序列表和无序列表。在Markdown下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要与文字之间加上一个空格。 123456789#### 无序列表* 1* 2* 3#### 有序列表1. 12. 23. 3 引用如果你需要引用一小段别处的句子，那么就要用引用的格式 例如这样 只需要在文本前加入 &gt; 这种尖括号即可 1&gt; 例如这样 图片与链接插入链接与插入图片的语法很相似，区别在一个 ！号。 12图片为： ![]()链接为： []() 粗体与斜体Markdown 的粗体与斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的写法。 12*我是斜体***我是粗体** 表格语法为： 123| Table | Are | Cool || --- | --- | --- || col 3 is | right | $3000 | 效果为： Table Are Cool col 3 is right $3000 代码框如果你是个程序猿，需要在文章里优雅的引用代码框， 在Markdown下实现也非常简单，只需要用两个`把中间的代码包裹起来即可。 1`&lt;b&gt;Markdown&lt;/b&gt;` 使用 tab 键即可缩进。 分割线分割线的语法只需要三个 * 号。 1***","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]}]}